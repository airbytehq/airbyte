# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401
from connector_builder.generated.models.any_of_constant_backoff_strategy_exponential_backoff_strategy_wait_time_from_header_backoff_strategy_wait_until_time_from_header_backoff_strategy import AnyOfConstantBackoffStrategyExponentialBackoffStrategyWaitTimeFromHeaderBackoffStrategyWaitUntilTimeFromHeaderBackoffStrategy
from connector_builder.generated.models.http_response_filter import HttpResponseFilter


class DefaultErrorHandlerAllOf(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    DefaultErrorHandlerAllOf - a model defined in OpenAPI

        config: The config of this DefaultErrorHandlerAllOf.
        response_filters: The response_filters of this DefaultErrorHandlerAllOf [Optional].
        max_retries: The max_retries of this DefaultErrorHandlerAllOf [Optional].
        max_retries: The max_retries of this DefaultErrorHandlerAllOf [Optional].
        backoff_strategies: The backoff_strategies of this DefaultErrorHandlerAllOf [Optional].
    """

    config: Dict[str, Any] = Field(alias="config")
    response_filters: Optional[List[HttpResponseFilter]] = Field(alias="response_filters", default=None)
    max_retries: Optional[int] = Field(alias="max_retries", default=None)
    max_retries: Optional[int] = Field(alias="_max_retries", default=None)
    backoff_strategies: Optional[List[AnyOfConstantBackoffStrategyExponentialBackoffStrategyWaitTimeFromHeaderBackoffStrategyWaitUntilTimeFromHeaderBackoffStrategy]] = Field(alias="backoff_strategies", default=None)

DefaultErrorHandlerAllOf.update_forward_refs()