plugins {
    id 'application'
}

dependencies {
    implementation 'io.temporal:temporal-sdk:1.0.4'

    implementation 'org.apache.cxf:cxf-core:3.4.2'

    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.eclipse.jetty:jetty-server:9.4.31.v20200723'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.31.v20200723'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet'
    implementation 'org.glassfish.jersey.inject:jersey-hk2'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson'
    implementation 'org.glassfish.jersey.ext:jersey-bean-validation'

    implementation 'com.github.slugify:slugify:2.4'

    implementation project(':airbyte-analytics')
    implementation project(':airbyte-api')
    implementation project(':airbyte-commons-docker')
    implementation project(':airbyte-config:models')
    implementation project(':airbyte-config:persistence')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-db')
    implementation project(":airbyte-json-validation")
    implementation project(':airbyte-migration')
    implementation project(':airbyte-notification')
    implementation project(':airbyte-protocol:models')
    implementation project(':airbyte-scheduler:client')
    implementation project(':airbyte-scheduler:models')
    implementation project(':airbyte-scheduler:persistence')
    implementation project(':airbyte-workers')

    testImplementation "org.postgresql:postgresql:42.2.18"

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'

    testImplementation "org.testcontainers:postgresql:1.15.1"
}

application {
    mainClass = 'io.airbyte.server.ServerApp'
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

run {
    // default for running on local machine.
    environment "DATABASE_USER", env.DATABASE_USER
    environment "DATABASE_PASSWORD", env.DATABASE_PASSWORD
    // we map the docker pg db to port 5433 so it does not conflict with other pg instances.
    environment "DATABASE_URL", "jdbc:postgresql://localhost:5433/${env.DATABASE_DB}"
    environment "WORKSPACE_ROOT", env.WORKSPACE_ROOT
    environment "CONFIG_ROOT", "/tmp/airbyte_config"
    environment "TRACKING_STRATEGY", env.TRACKING_STRATEGY
    environment "AIRBYTE_VERSION", env.VERSION
    environment "AIRBYTE_ROLE", System.getenv('AIRBYTE_ROLE')
    environment "TEMPORAL_HOST", "localhost:7233"

}

// generate seed for each yaml file.
task generateSeed {
    def seeds = [
            [
                    "sourceDefinitionId",
                    new File(project.projectDir, '/src/main/resources/seed/source_definitions.yaml'),
                    new File(project.projectDir, '/src/main/resources/config/STANDARD_SOURCE_DEFINITION')
            ],
            [
                    "destinationDefinitionId",
                    new File(project.projectDir, '/src/main/resources/seed/destination_definitions.yaml'),
                    new File(project.projectDir, '/src/main/resources/config/STANDARD_DESTINATION_DEFINITION')
            ],
    ]
    seeds.each{val ->
        def name = val[0]
        def taskName = "generateSeed$name"
        dependsOn taskName
        task "$taskName"(type: JavaExec) {
            classpath = sourceSets.main.runtimeClasspath

            main = 'io.airbyte.server.SeedRepository'

            // arguments to pass to the application
            args '--id-name'
            args val[0]
            args '--input-path'
            args val[1]
            args '--output-path'
            args val[2]
        }
    }
}

// we only want to attempt generateSeed if tests have passed.
generateSeed.dependsOn(check)
generateSeed.dependsOn(assemble)
build.dependsOn(generateSeed)
