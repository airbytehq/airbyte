import groovy.io.FileType
import groovy.io.FileVisitResult
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Exec
import ru.vyarus.gradle.plugin.python.task.PythonTask

class AirbytePythonConfiguration {
    String moduleDirectory
}

class Helpers {
    static addTestTaskIfTestFilesFound(Project project, String testFilesDirectory, String taskName, taskDependencies) {
        """
        This method verifies if there are test files in a directory before adding the pytest task to run tests on that directory. This is needed
        because if there are no tests in that dir and we run pytest on it, it exits with exit code 5 which gradle takes to mean that the process
        failed, since it's non-zero. This means that if a module doesn't need a unit or integration test, it still needs to add a dummy test file
        like:

        ```
        def make_ci_pass_test():
            assert True
        ```

        So we use this method to leverage pytest's test discovery rules (https://docs.pytest.org/en/6.2.x/goodpractices.html#conventions-for-python-test-discovery)
        to selectively run pytest based on whether there seem to be test files in that directory.
        Namely, if the directory contains a file whose name is test_*.py or *_test.py then it's a test.

        See https://github.com/airbytehq/airbyte/issues/4979 for original context
        """

        if (project.file(testFilesDirectory).exists()) {
            def outputArg = project.hasProperty('reports_folder') ?"-otemp_coverage.xml" : "--skip-empty"
            def coverageFormat = project.hasProperty('reports_folder') ? 'xml' : 'report'
            def testConfig = project.file('pytest.ini').exists() ? 'pytest.ini' : project.rootProject.file('pyproject.toml').absolutePath
            project.projectDir.toPath().resolve(testFilesDirectory).traverse(type: FileType.FILES, nameFilter: ~/(^test_.*|.*_test)\.py$/) { file ->
                project.task("_${taskName}Coverage", type: PythonTask, dependsOn: taskDependencies) {
                    module = "coverage"
                    command = "run --data-file=${testFilesDirectory}/.coverage.${taskName} --rcfile=${project.rootProject.file('pyproject.toml').absolutePath} -m pytest -s ${testFilesDirectory} -c ${testConfig}"
                }
                // generation of coverage report is optional and we should skip it if tests are empty

                project.task(taskName, type: Exec){
                    commandLine = ".venv/bin/python"
                    args "-m", "coverage", coverageFormat, "--data-file=${testFilesDirectory}/.coverage.${taskName}", "--rcfile=${project.rootProject.file('pyproject.toml').absolutePath}", outputArg
                    dependsOn project.tasks.findByName("_${taskName}Coverage")
                    setIgnoreExitValue true
                    doLast {
                        // try to move a generated report to custom report folder if needed
                        if (project.file('temp_coverage.xml').exists() && project.hasProperty('reports_folder')) {
                            project.file('temp_coverage.xml').renameTo(project.file("${project.reports_folder}/coverage.xml"))
                        }
                    }

                }
                // If a file is found, terminate the traversal, thus causing this task to be declared at most once
                return FileVisitResult.TERMINATE
            }
        }

        // If the task doesn't exist then we didn't find a matching file. So add an empty task since other tasks will
        // probably rely on this one existing.
        if (!project.hasProperty(taskName)) {
            project.task(taskName) {
                logger.info "Skipping task ${taskName} because ${testFilesDirectory} doesn't exist."
            }
        }
    }
}

class AirbytePythonPlugin implements Plugin<Project> {

    void apply(Project project) {
        def extension = project.extensions.create('airbytePython', AirbytePythonConfiguration)

        def venvDirectoryName = '.venv'
        project.plugins.apply 'ru.vyarus.use-python'

        project.python {
            envPath = venvDirectoryName
            minPythonVersion = '3.9'
            scope = 'VIRTUALENV'
            installVirtualenv = true
            pip 'pip:21.3.1'
            pip 'mccabe:0.6.1'
            // https://github.com/csachs/pyproject-flake8/issues/13
            pip 'flake8:4.0.1'
            // flake8 doesn't support pyproject.toml files
            // and thus there is the wrapper "pyproject-flake8" for this
            pip 'pyproject-flake8:0.0.1a2'
            pip 'black:22.3.0'
            pip 'mypy:0.930'
            pip 'isort:5.6.4'
            pip 'pytest:6.2.5'
            pip 'coverage[toml]:6.3.1'
        }


        project.task('isortFormat', type: PythonTask) {
            module = "isort"
            command = "--settings-file=${project.rootProject.file('pyproject.toml').absolutePath} ./"
        }

        project.task('isortReport', type: PythonTask) {
            module = "isort"
            command = "--settings-file=${project.rootProject.file('pyproject.toml').absolutePath} --diff --quiet ./"
            outputPrefix = ''
        }

        project.task('blackFormat', type: PythonTask) {
            module = "black"
            // the line length should match .isort.cfg
            command = "--config ${project.rootProject.file('pyproject.toml').absolutePath} ./"
            dependsOn project.rootProject.licenseFormat
            dependsOn project.isortFormat
        }

        project.task('blackReport', type: PythonTask) {
            module = "black"
            command = "--config ${project.rootProject.file('pyproject.toml').absolutePath} --diff --quiet ./"
            outputPrefix = ''
        }

        project.task('flakeCheck', type: PythonTask, dependsOn: project.blackFormat) {
            module = "pflake8"
            command = "--config ${project.rootProject.file('pyproject.toml').absolutePath} ./"
        }

        project.task('flakeReport', type: PythonTask) {
            module = "pflake8"
            command = "--exit-zero --config ${project.rootProject.file('pyproject.toml').absolutePath} ./"
            outputPrefix = ''
        }

        project.task("mypyReport", type: Exec){
            commandLine = ".venv/bin/python"
            args "-m", "mypy", "--config-file", "${project.rootProject.file('pyproject.toml').absolutePath}", "./"
            setIgnoreExitValue true
        }



        // attempt to install anything in requirements.txt. by convention this should only be dependencies whose source is located in the project.

        if (project.file('requirements.txt').exists()) {
            project.task('installLocalReqs', type: PythonTask) {
                module = "pip"
                command = "install -r requirements.txt"
                inputs.file('requirements.txt')
                outputs.file('build/installedlocalreqs.txt')

                // HACK: makes all integrations depend on installing requirements for bases. long term we should resolve deps and install in order.
                if (project.getPath().startsWith(":airbyte-integrations:connectors") && !project.hasProperty("reports_folder")) {
                    dependsOn project.rootProject.getTasksByName("airbytePythonApply", true).findAll { it.project.getPath().startsWith(":airbyte-integrations:bases") }
                }
            }
        } else if (project.file('setup.py').exists()) {
            // If requirements.txt does not exists, install from setup.py instead, assume a dev or "tests" profile exists.
            // In this case, there is no need to depend on the base python modules since everything should be contained in the setup.py.
            project.task('installLocalReqs', type: PythonTask) {
                module = "pip"
                command = "install .[dev,tests]"
            }
        } else {
            throw new GradleException('Error: Python module lacks requirement.txt and setup.py')
        }

        project.task('installReqs', type: PythonTask, dependsOn: project.installLocalReqs) {
            module = "pip"
            command = "install .[main]"
            inputs.file('setup.py')
            outputs.file('build/installedreqs.txt')
        }

        project.task('installTestReqs', type: PythonTask, dependsOn: project.installReqs) {
            module = "pip"
            command = "install .[tests]"
            inputs.file('setup.py')
            outputs.file('build/installedtestreqs.txt')
        }

        Helpers.addTestTaskIfTestFilesFound(project, 'unit_tests', 'unitTest', project.installTestReqs)

        Helpers.addTestTaskIfTestFilesFound(project, 'integration_tests', 'customIntegrationTests', project.installTestReqs)
        if (!project.tasks.findByName('integrationTest')) {
            project.task('integrationTest')
        }
        project.integrationTest.dependsOn(project.customIntegrationTests)

        if (extension.moduleDirectory) {
            project.task('mypyCheck', type: PythonTask) {
                module = "mypy"
                command = "-m ${extension.moduleDirectory} --config-file ${project.rootProject.file('pyproject.toml').absolutePath}"
            }

            project.check.dependsOn mypyCheck
        }

        project.task('airbytePythonFormat', type: DefaultTask) {
            dependsOn project.blackFormat
            dependsOn project.isortFormat
            dependsOn project.flakeCheck
        }

        project.task('airbytePythonReport', type: DefaultTask) {
            dependsOn project.blackReport
            dependsOn project.isortReport
            dependsOn project.flakeReport
            dependsOn project.mypyReport
            doLast {
               if (project.hasProperty('reports_folder')) {
                      // Gradles adds some log messages to files and we must remote them
                      // examples of these lines:
                      // :airbyte-integrations:connectors: ...
                      // [python] .venv/bin/python -m black  ...
                      project.fileTree(project.reports_folder).visit { FileVisitDetails details ->
                          project.println "Found the report file: " + details.file.path
                          def tempFile = project.file(details.file.path + ".1")
                          details.file.eachLine { line ->
                                if ( !line.startsWith(":airbyte") && !line.startsWith("[python]") ) {
                                    tempFile << line + "\n"
                                }
                          }
                          if (!tempFile.exists()) {
                                // generate empty file
                                tempFile << "\n"
                          }
                          tempFile.renameTo(details.file)

                      }
               }
            }
        }

        project.task('airbytePythonApply', type: DefaultTask) {
            dependsOn project.installReqs
            dependsOn project.airbytePythonFormat
        }


        project.task('airbytePythonTest', type: DefaultTask) {
            dependsOn project.airbytePythonApply
            dependsOn project.installTestReqs
            dependsOn project.unitTest
        }

        // Add a task that allows cleaning up venvs to every python project
        project.task('cleanPythonVenv', type: Exec) {
            commandLine 'rm'
            args '-rf', "$project.projectDir.absolutePath/$venvDirectoryName"
        }

        // Add a task which can be run at the root project level to delete all python venvs
        if (!project.rootProject.hasProperty('cleanPythonVenvs')) {
            project.rootProject.task('cleanPythonVenvs')
        }
        project.rootProject.cleanPythonVenvs.dependsOn(project.cleanPythonVenv)

        project.assemble.dependsOn project.airbytePythonApply
        project.assemble.dependsOn project.airbytePythonTest
        project.test.dependsOn project.airbytePythonTest

                // saves tools reports to a custom folder
        def reportsFolder = project.hasProperty('reports_folder') ? project.reports_folder : ''
        if ( reportsFolder != '' ) {

            // clean reports folders
            project.file(reportsFolder).deleteDir()
            project.file(reportsFolder).mkdirs()



            project.tasks.blackReport.configure {
                it.logging.addStandardOutputListener(new StandardOutputListener() {
                    @Override
                    void onOutput(CharSequence charSequence) {
                        project.file("$reportsFolder/black.diff") << charSequence
                    }
                })
            }
            project.tasks.isortReport.configure {
                it.logging.addStandardOutputListener(new StandardOutputListener() {
                    @Override
                    void onOutput(CharSequence charSequence) {
                        project.file("$reportsFolder/isort.diff") << charSequence
                    }
                })
            }

            project.tasks.flakeReport.configure {
                it.logging.addStandardOutputListener(new StandardOutputListener() {
                    @Override
                    void onOutput(CharSequence charSequence) {
                        project.file("$reportsFolder/flake.txt") << charSequence
                    }
                })
            }

            project.tasks.mypyReport.configure {
                it.logging.addStandardOutputListener(new StandardOutputListener() {
                    @Override
                    void onOutput(CharSequence charSequence) {
                        project.file("$reportsFolder/mypy.log") << charSequence
                    }
                })
            }

        }
    }
}

