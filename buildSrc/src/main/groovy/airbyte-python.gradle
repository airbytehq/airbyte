import groovy.io.FileType
import groovy.io.FileVisitResult
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Exec
import ru.vyarus.gradle.plugin.python.task.PythonTask

class Helpers {
    static addTestTaskIfTestFilesFound(Project project, String testFilesDirectory, String taskName, taskDependencies) {
        """
        This method verifies if there are test files in a directory before adding the pytest task to run tests on that directory. This is needed
        because if there are no tests in that dir and we run pytest on it, it exits with exit code 5 which gradle takes to mean that the process
        failed, since it's non-zero. This means that if a module doesn't need a unit or integration test, it still needs to add a dummy test file
        like:

        ```
        def make_ci_pass_test():
            assert True
        ```

        So we use this method to leverage pytest's test discovery rules (https://docs.pytest.org/en/6.2.x/goodpractices.html#conventions-for-python-test-discovery)
        to selectively run pytest based on whether there seem to be test files in that directory.
        Namely, if the directory contains a file whose name is test_*.py or *_test.py then it's a test.

        See https://github.com/airbytehq/airbyte/issues/4979 for original context
        """

        boolean requiresTasks = false
        if (project.file(testFilesDirectory).exists()) {
            def testDir = project.projectDir.toPath().resolve(testFilesDirectory)
            testDir.traverse(type: FileType.FILES, nameFilter: ~/(^test_.*|.*_test)\.py$/) {file ->
                requiresTasks = true
                // If a file is found, terminate the traversal, thus causing this task to be declared at most once
                return FileVisitResult.TERMINATE
            }
        }
        if (!requiresTasks) {
            return
        }

        def coverageTask = project.tasks.register(taskName, PythonTask) {
            def dataFile = "${testFilesDirectory}/.coverage.${taskName}"
            def rcFile = project.rootProject.file('pyproject.toml').absolutePath
            def testConfig = project.file('pytest.ini').exists() ? 'pytest.ini' : project.rootProject.file('pyproject.toml').absolutePath

            module = "coverage"
            command = "run --data-file=${dataFile} --rcfile=${rcFile} -m pytest -s ${testFilesDirectory} -c ${testConfig}"
        }
        coverageTask.configure {
            dependsOn taskDependencies
        }
    }
}

class AirbytePythonPlugin implements Plugin<Project> {

    void apply(Project project) {

        def venvDirectoryName = '.venv'

        // Add a task that allows cleaning up venvs to every python project
        def cleanPythonVenv = project.tasks.register('cleanPythonVenv', Exec) {
            commandLine 'rm'
            args '-rf', "${project.projectDir.absolutePath}/${venvDirectoryName}"
        }
        project.tasks.named('clean').configure {
            dependsOn cleanPythonVenv
        }

        project.plugins.apply 'ru.vyarus.use-python'

        // Configure gradle python plugin.
        project.python {
            envPath = venvDirectoryName
            minPythonVersion '3.10'

            // Amazon Linux support.
            // The airbyte-ci tool runs gradle tasks in AL2023-based containers.
            // In AL2023, `python3` is necessarily v3.9, and later pythons need to be installed and named explicitly.
            // See https://github.com/amazonlinux/amazon-linux-2023/issues/459 for details.
            try {
                if ("python3.11 --version".execute().waitFor() == 0) {
                    // python3.11 definitely exists at this point, use it instead of 'python3'.
                    pythonBinary "python3.11"
                }
            } catch (IOException _) {
                // Swallow exception if python3.11 is not installed.
            }
            // Pyenv support.
            try {
                def pyenvRoot = "pyenv root".execute()
                def pyenvLatest = "pyenv latest ${minPythonVersion}".execute()
                // Pyenv definitely exists at this point: use 'python' instead of 'python3' in all cases.
                pythonBinary "python"
                if (pyenvRoot.waitFor() == 0 && pyenvLatest.waitFor() == 0) {
                    pythonPath "${pyenvRoot.text.trim()}/versions/${pyenvLatest.text.trim()}/bin"
                }
            } catch (IOException _) {
                // Swallow exception if pyenv is not installed.
            }

            scope 'VIRTUALENV'
            installVirtualenv = true
            pip 'pip:23.2.1'
            pip 'mccabe:0.6.1'
            // https://github.com/csachs/pyproject-flake8/issues/13
            pip 'flake8:4.0.1'
            // flake8 doesn't support pyproject.toml files
            // and thus there is the wrapper "pyproject-flake8" for this
            pip 'pyproject-flake8:0.0.1a2'
            pip 'pytest:6.2.5'
            pip 'coverage[toml]:6.3.1'
        }

        // Attempt to install anything in requirements.txt.
        // By convention this should only be dependencies whose source is located in the project.
        if (project.file('requirements.txt').exists()) {
            project.tasks.register('installLocalReqs', PythonTask) {
                module = "pip"
                command = "install -r requirements.txt"
                inputs.file('requirements.txt')
                outputs.file('build/installedlocalreqs.txt')
            }
        } else if (project.file('setup.py').exists()) {
            // If requirements.txt does not exists, install from setup.py instead, assume a dev or "tests" profile exists.
            // In this case, there is no need to depend on the base python modules since everything should be contained in the setup.py.
            project.tasks.register('installLocalReqs', PythonTask) {
                module = "pip"
                command = "install .[dev,tests]"
                inputs.file('setup.py')
                outputs.file('build/installedlocalreqs.txt')
            }
        } else {
            return
        }

        def installLocalReqs = project.tasks.named('installLocalReqs')

        def flakeCheck = project.tasks.register('flakeCheck', PythonTask) {
            module = "pflake8"
            command = "--config ${project.rootProject.file('pyproject.toml').absolutePath} ./"
        }

        def installReqs = project.tasks.register('installReqs', PythonTask) {
            module = "pip"
            command = "install .[main]"
            inputs.file('setup.py')
            outputs.file('build/installedreqs.txt')
        }
        installReqs.configure {
            dependsOn installLocalReqs
        }

        project.tasks.named('check').configure {
            dependsOn installReqs
            dependsOn flakeCheck
        }

        def installTestReqs = project.tasks.register('installTestReqs', PythonTask) {
            module = "pip"
            command = "install .[tests]"
            inputs.file('setup.py')
            outputs.file('build/installedtestreqs.txt')
        }
        installTestReqs.configure {
            dependsOn installReqs
        }

        Helpers.addTestTaskIfTestFilesFound(project, 'unit_tests', 'testPython', installTestReqs)
        project.tasks.named('check').configure {
            dependsOn project.tasks.matching { it.name == 'testPython' }
        }

        Helpers.addTestTaskIfTestFilesFound(project, 'integration_tests', 'integrationTestPython', installTestReqs)
        def integrationTestTasks = project.tasks.matching { it.name == 'integrationTestPython' }
        integrationTestTasks.configureEach {
            dependsOn project.tasks.named('assemble')
            mustRunAfter project.tasks.named('check')
        }
        project.tasks.named('build').configure {
            dependsOn integrationTestTasks
        }
    }
}

