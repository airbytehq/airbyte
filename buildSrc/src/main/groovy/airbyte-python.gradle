import java.security.MessageDigest
import java.nio.file.Paths

class AirbytePythonConfiguration {
    String moduleDirectory
}

// todo: handle cacheability
class AirbytePythonPlugin implements Plugin<Project> {

    void apply(Project project) {
        def extension = project.extensions.create('airbytePython', AirbytePythonConfiguration)

        apply plugin: 'ru.vyarus.use-python'

        python {
            envPath = '.venv'
            minPythonVersion = '3.7'
            scope = VIRTUALENV
            installVirtualenv = true
            pip 'flake8:3.8.4'
            pip 'black:20.8b1'
            pip 'mypy:0.790'
            pip 'isort:5.6.4'
        }

        task installReqs(type: PythonTask) {
            module = "pip"
            command = "install -r requirements.txt"
        }

        task blackFormat(type: PythonTask) {
            module = "black"
            // the line length should match .isort.cfg
            command = ". --line-length 140"
        }

        task isortFormat(type: PythonTask) {
            module = "isort"
            command = ". --settings-file ${rootProject.file('tools/python/.isort.cfg').absolutePath}"
        }

        task flakeCheck(type: PythonTask, dependsOn: blackFormat) {
            module = "flake8"
            command = ". --config ${rootProject.file('tools/python/.flake8').absolutePath}"
        }

        if (extension.has('moduleDirectory')) {
            task mypyCheck(type: PythonTask, dependsOn: installReqs) {
                module = "mypy"
                command = "-m ${extension.moduleDirectory} --config-file ${rootProject.file('tools/python/.mypy.ini').absolutePath}"
            }

            project.check.dependsOn mypyCheck
        }

        project.task('airbytePython', type: DefaultTask) {
            dependsOn installReqs
            dependsOn blackFormat
            dependsOn isortFormat
            dependsOn flakeCheck
        }

        project.build.dependsOn project.airbytePython
    }
}
