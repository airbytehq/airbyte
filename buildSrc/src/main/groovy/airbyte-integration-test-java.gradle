import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.testing.Test

class AirbyteIntegrationTestJavaPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.sourceSets {
            integrationTestJava {
                java {
                    srcDir 'src/test-integration/java'
                }
                resources {
                    srcDir 'src/test-integration/resources'
                }
            }
        }
        project.tasks.named('check').configure {
            dependsOn project.tasks.matching { it.name == 'compileIntegrationTestJavaJava' }
            dependsOn project.tasks.matching { it.name == 'spotbugsIntegrationTestJava' }
        }

        project.configurations {
            integrationTestJavaImplementation.extendsFrom testImplementation
            integrationTestJavaRuntimeOnly.extendsFrom testRuntimeOnly
        }

        def integrationTestJava = project.tasks.register('integrationTestJava', Test) {
            testClassesDirs = project.sourceSets.integrationTestJava.output.classesDirs
            classpath += project.sourceSets.integrationTestJava.runtimeClasspath

            useJUnitPlatform()
            testLogging() {
                events 'skipped', 'started', 'passed', 'failed'
                exceptionFormat 'full'
                // Swallow the logs when running in airbyte-ci, rely on test reports instead.
                showStandardStreams = !System.getenv().containsKey("RUN_IN_AIRBYTE_CI")
            }

            systemProperties = project.test.systemProperties
            maxParallelForks = project.test.maxParallelForks
            maxHeapSize = project.test.maxHeapSize

            // Tone down the JIT when running the containerized connector to improve overall performance.
            // The JVM default settings are optimized for long-lived processes in steady-state operation.
            // Unlike in production, the connector containers in these tests are always short-lived.
            // It's very much worth injecting a JAVA_OPTS environment variable into the container with
            // flags which will reduce startup time at the detriment of long-term performance.
            environment 'JOB_DEFAULT_ENV_JAVA_OPTS', '-XX:TieredStopAtLevel=1'

            // Always re-run integration tests no matter what.
            outputs.upToDateWhen { false }
        }
        integrationTestJava.configure {
            mustRunAfter project.tasks.named('check')
            dependsOn project.tasks.matching { it.name == 'assemble' }
        }
        project.tasks.named('build').configure {
            dependsOn integrationTestJava
        }
    }
}
