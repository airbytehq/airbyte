import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.testing.Test

class AirbyteIntegrationTestJavaPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.sourceSets {
            integrationTestJava {
                java {
                    srcDir 'src/test-integration/java'
                }
                resources {
                    srcDir 'src/test-integration/resources'
                }
            }
        }
        project.tasks.named('test').configure {
            dependsOn project.tasks.named('compileIntegrationTestJavaJava')
        }

        project.configurations {
            integrationTestJavaImplementation.extendsFrom testImplementation
            integrationTestJavaRuntimeOnly.extendsFrom testRuntimeOnly
        }

        def integrationTestJava = project.tasks.register('integrationTestJava', Test) {
            testClassesDirs = project.sourceSets.integrationTestJava.output.classesDirs
            classpath += project.sourceSets.integrationTestJava.runtimeClasspath

            useJUnitPlatform {
                // todo (cgardens) - figure out how to de-dupe this exclusion with the one in build.gradle.
                excludeTags 'log4j2-config', 'logger-client', 'cloud-storage'
            }

            testLogging() {
                events "passed", "failed", "started"
                exceptionFormat "full"
                // uncomment to get the full log output
                // showStandardStreams = true
            }

            outputs.upToDateWhen { false }

            maxParallelForks = Runtime.runtime.availableProcessors()
            // This allows to set up a `gradle.properties` file inside the connector folder to reduce parallelization.
            // This is especially useful for connectors that shares resources (like Redshift or Snowflake).
            if (project.hasProperty('numberThreads')) {
                int numberThreads = 0
                String numberThreadsString = project.property('numberThreads').toString()
                if (numberThreadsString.isInteger()) {
                    numberThreads = numberThreadsString as int
                }
                 if (numberThreads > 0 && numberThreads < maxParallelForks) {
                    maxParallelForks = numberThreads
                }
            }
            maxHeapSize = '3g'

            systemProperties = [
                // Allow tests to set @Execution(ExecutionMode.CONCURRENT)
                'junit.jupiter.execution.parallel.enabled': 'true'
            ]
        }
        integrationTestJava.configure {
            mustRunAfter project.tasks.named('test')
            dependsOn project.tasks.matching { it.name == 'assemble' }
            dependsOn project.tasks.matching { it.name == 'spotbugsMain' }
        }
    }
}
