import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.file.FileCollection
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputDirectory
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.Internal
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity
import org.gradle.api.tasks.TaskAction
import org.slf4j.Logger

import java.nio.file.Path
import java.security.MessageDigest
import java.nio.file.Paths

@CacheableTask
abstract class AirbyteDockerTask extends DefaultTask {
    @Internal
    abstract File rootDir

    @InputFiles
    @PathSensitive(PathSensitivity.RELATIVE)
    abstract FileCollection projectFiles

    @Input
    abstract Set<String> baseImageHashes

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    abstract File projectDir

    @Input
    String dockerfileName

    @Input
    boolean followSymlinks = false

    @OutputFile
    abstract File idFileOutput

    def buildDockerfile(String scriptPath, String fileName) {
        if (project.file(fileName).exists()) {
            def tag = DockerHelpers.getDevTaggedImage(projectDir, dockerfileName)

            def arch = System.getProperty("os.arch").toLowerCase()
            def isArm64 = arch == "aarch64" || arch == "arm64"
            def buildPlatform = System.getenv('DOCKER_BUILD_PLATFORM') ?: isArm64 ? 'linux/arm64' : 'amd64'

            project.exec {
                commandLine scriptPath, rootDir.absolutePath, projectDir.absolutePath, dockerfileName, tag, idFileOutput.absolutePath, followSymlinks, buildPlatform
            }
        }
    }

    @TaskAction
    def dockerTask() {
        def scriptPath = Paths.get(rootDir.absolutePath, 'tools/bin/build_image.sh').toString()
        buildDockerfile(scriptPath, dockerfileName)
    }
}

class AirbyteDockerPlugin implements Plugin<Project> {

    static def getBaseTaggedImages(File dockerfile) {
        def result = [] as Set<String>

        // Look for "FROM foo AS bar" directives, and add them to the map with .put("bar", "foo")
        Map<String, String> imageAliases = [:]
        dockerfile.eachLine { line ->
            def parts = line.split()
            if (parts.length >= 4 && parts[0].equals("FROM") && parts[parts.length - 2].equals("AS")) {
                imageAliases.put(parts[parts.length - 1], parts[1])
            }
        }

        dockerfile.eachLine { line ->
            if (line.startsWith("FROM ")) {
                def image = line.split()[1]
                assert !image.isEmpty()
                result.add(image)
            } else if (line.startsWith("COPY --from=")) {
                def image = line.substring("COPY --from=".length()).split()[0]
                assert !image.isEmpty()
                if (imageAliases[image] != null) {
                    result.add(imageAliases[image])
                } else {
                    result.add(image)
                }
            }
        }

        return result
    }

    static def getBaseImageHashes(Map imageToHash, File dockerfile) {
        def result = [] as Set<String>

        getBaseTaggedImages(dockerfile).forEach { taggedImage ->
            result.add((String) imageToHash.get(taggedImage))
        }

        return result
    }

    static String getImageHash(Project project, String taggedImage) {
        def stdout = new ByteArrayOutputStream()

        project.exec {
            commandLine "docker", "images", "--no-trunc", "-f", "dangling=false", "--format", "{{.ID}}", resolveEnvironmentVariables(project, taggedImage)
            standardOutput = stdout;
        }

        return "$stdout".toString().trim()
    }

    // Some image tags rely on environment variables (e.g. "FROM amazoncorretto:${JDK_VERSION}").
    // dump those into a "sh -c 'echo ...'" command to resolve them (e.g. "amazoncorretto:17.0.4")
    static String resolveEnvironmentVariables(Project project, String str) {
        def stdout = new ByteArrayOutputStream()

        project.exec {
            commandLine "sh", "-c", "echo " + str
            standardOutput = stdout;
        }

        return "$stdout".toString().trim()
    }

    static boolean isUpToDate(Logger logger, File idFileOutput, Project project, String dockerFile, Path dockerPath) {
        if (idFileOutput.exists()) {
            def taggedImage = DockerHelpers.getDevTaggedImage(project.projectDir, dockerFile)
            logger.debug "taggedImage " + taggedImage

            def current = getImageHash(project, taggedImage)
            logger.debug "current " + current
            def stored = (String) project.rootProject.imageToHash.get(taggedImage)
            logger.debug "stored " + stored

            def notUpToDate = new ArrayList<String>(getBaseTaggedImages(dockerPath.toFile())).any { baseImage ->
                logger.debug "checking base image " + baseImage
                def storedBase = (String) project.rootProject.imageToHash.get(resolveEnvironmentVariables(project, baseImage))
                def currentBase = getImageHash(project, baseImage)

                logger.debug "storedBase " + storedBase
                logger.debug "currentBase " + currentBase
                if (!currentBase.equals(storedBase)) {
                    logger.debug "did not match"
                    return true
                } else {
                    logger.debug "did match"
                    return false
                }
            }

            if (notUpToDate) {
                return false;
            }

            logger.debug "stored " + stored

            def upToDate = current.equals(stored)

            logger.debug "uptodate " + upToDate.toString()

            return upToDate
        } else {
            return false
        }
    }

    static def createTask(Project project, String taskName, String dockerFile) {
        if (project.file(dockerFile).exists()) {
            def filteredProjectFiles = project.fileTree(project.projectDir).filter {
                file -> !file.toString().contains(".venv")
            }

            project.task(taskName, type: AirbyteDockerTask) {
                def dockerPath = Paths.get(project.projectDir.absolutePath, dockerFile)
                def hash = MessageDigest.getInstance("MD5").digest(dockerPath.getBytes()).encodeHex().toString()
                dockerfileName = dockerFile
                rootDir = project.rootProject.rootDir
                projectDir = project.projectDir
                projectFiles = filteredProjectFiles
                idFileOutput = project.file(Paths.get(project.rootProject.rootDir.absolutePath, '.dockerversions', hash).toString())
                baseImageHashes = getBaseImageHashes(project.rootProject.imageToHash, dockerPath.toFile())
                dependsOn project.assemble

                outputs.upToDateWhen {
                    return isUpToDate(logger, idFileOutput, project, dockerFile, dockerPath)
                }
            }
        } else {
            project.task(taskName) {
                logger.info "Skipping ${taskName} because ${dockerFile} does not exist."
            }
        }
    }

    void apply(Project project) {
        // set (and cache) global image to version map
        project.rootProject.ext.imageToHash = {
            if (!project.rootProject.hasProperty("imageToHash")) {
                def imageToHash = [:]
                def stdout = new ByteArrayOutputStream()
                project.exec {
                    commandLine "docker", "images", "--no-trunc", "-f", "dangling=false", "--format", "{{.Repository}}:{{.Tag}} {{.ID}}"
                    standardOutput = stdout;
                }

                "$stdout".eachLine { line ->
                    def splits = line.split()
                    imageToHash.put(splits[0], splits[1].trim())
                }

                return imageToHash
            } else {
                return project.rootProject.imageToHash
            }
        }()

        createTask(project, 'airbyteDocker', 'Dockerfile')
        createTask(project, 'airbyteDockerTest', 'Dockerfile.test')

        project.build.dependsOn project.airbyteDocker
    }
}
