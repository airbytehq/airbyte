import groovy.io.FileType
import groovy.io.FileVisitResult
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Exec
import ru.vyarus.gradle.plugin.python.task.PythonTask

class AirbytePythonDockerConfiguration {
    String moduleDirectory
}


class HelpersDocker {
    static addTestTaskIfTestFilesFound(Project project, String testFilesDirectory, String taskName, taskDependencies) {
        """
        This method verifies if there are test files in a directory before adding the pytest task to run tests on that directory. This is needed
        because if there are no tests in that dir and we run pytest on it, it exits with exit code 5 which gradle takes to mean that the process
        failed, since it's non-zero. This means that if a module doesn't need a unit or integration test, it still needs to add a dummy test file
        like:

        ```
        def make_ci_pass_test():
            assert True
        ```

        So we use this method to leverage pytest's test discovery rules (https://docs.pytest.org/en/6.2.x/goodpractices.html#conventions-for-python-test-discovery)
        to selectively run pytest based on whether there seem to be test files in that directory.
        Namely, if the directory contains a file whose name is test_*.py or *_test.py then it's a test.

        See https://github.com/airbytehq/airbyte/issues/4979 for original context
        """

        if (project.file(testFilesDirectory).exists()) {
            def outputArg = project.hasProperty('reports_folder') ? "-otemp_coverage.xml" : "--skip-empty"
            def coverageFormat = project.hasProperty('reports_folder') ? 'xml' : 'report'
            def testConfig = project.file('pytest.ini').exists() ? 'pytest.ini' : project.rootProject.file('pyproject.toml').absolutePath
            project.projectDir.toPath().resolve(testFilesDirectory).traverse(type: FileType.FILES, nameFilter: ~/(^test_.*|.*_test)\.py$/) { file ->
                project.task("_${taskName}Coverage", type: PythonTask, dependsOn: taskDependencies) {
                    module = "coverage"
                    command = "run --data-file=${testFilesDirectory}/.coverage.${taskName} --rcfile=${project.rootProject.file('pyproject.toml').absolutePath} -m pytest -s ${testFilesDirectory} -c ${testConfig}"
                }
                // generation of coverage report is optional and we should skip it if tests are empty

                project.task(taskName, type: Exec) {
                    //commandLine = ".venv/bin/python"
                    //args "-m", "coverage", coverageFormat, "--data-file=${testFilesDirectory}/.coverage.${taskName}", "--rcfile=${project.rootProject.file('pyproject.toml').absolutePath}", outputArg
                    commandLine "docker", "run", "-v", "${project.rootProject.absoluteProjectPath(".")}:/tmp", "--entrypoint", "python", "python:3.9-slim", "-m", "coverage", "coverageFormat", "--data-file=${testFilesDirectory}/.coverage.${taskName}", "--data-file=${testFilesDirectory}/.coverage.${taskName}"
                    "--rcfile=${project.rootProject.file('pyproject.toml').absolutePath}"
                    dependsOn project.tasks.findByName("_${taskName}Coverage")
                    setIgnoreExitValue true
                    doLast {
                        // try to move a generated report to custom report folder if needed
                        if (project.file('temp_coverage.xml').exists() && project.hasProperty('reports_folder')) {
                            project.file('temp_coverage.xml').renameTo(project.file("${project.reports_folder}/coverage.xml"))
                        }
                    }

                }
                // If a file is found, terminate the traversal, thus causing this task to be declared at most once
                return FileVisitResult.TERMINATE
            }
        }

        // If the task doesn't exist then we didn't find a matching file. So add an empty task since other tasks will
        // probably rely on this one existing.
        if (!project.hasProperty(taskName)) {
            project.task(taskName) {
                logger.info "Skipping task ${taskName} because ${testFilesDirectory} doesn't exist."
            }
        }
    }
}

class AirbytePythonDockerPlugin implements Plugin<Project> {

    void apply(Project project) {
        def extension = project.extensions.create('airbytePythonDocker', AirbytePythonDockerConfiguration)

        project.task('installReqs', type: Exec) {
            commandLine "docker", "run", "-v", "${project.projectDir.getAbsolutePath()}:/tmp", "--entrypoint", "/bin/bash", "python:3.9-slim", "-c", "chmod +x /tmp/run.sh && /tmp/run.sh"
        }

        project.task('airbytePythonReport', type: DefaultTask) {
            dependsOn project.installReqs
            doLast {
                if (project.hasProperty('reports_folder')) {
                    // Gradles adds some log messages to files and we must remote them
                    // examples of these lines:
                    // :airbyte-integrations:connectors: ...
                    // [python] .venv/bin/python -m black  ...
                    project.fileTree(project.reports_folder).visit { FileVisitDetails details ->
                        project.println "Found the report file: " + details.file.path
                        def tempFile = project.file(details.file.path + ".1")
                        details.file.eachLine { line ->
                            if (!line.startsWith(":airbyte") && !line.startsWith("[python]")) {
                                tempFile << line + "\n"
                            }
                        }
                        if (!tempFile.exists()) {
                            // generate empty file
                            tempFile << "\n"
                        }
                        tempFile.renameTo(details.file)

                    }
                }
            }
        }

        project.task('airbytePythonApply', type: DefaultTask) {
            dependsOn project.installReqs
        }


        project.task('airbytePythonTest', type: DefaultTask) {
            dependsOn project.airbytePythonApply
            dependsOn project.installReqs
        }


        project.assemble.dependsOn project.airbytePythonApply
        project.assemble.dependsOn project.airbytePythonTest
        project.test.dependsOn project.airbytePythonTest
    }
}

