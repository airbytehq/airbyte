import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Exec

/*
This plugin exists to build & test a python module via Gradle without requiring the developer to install Python on their machine. It achieves this by mounting the module into a Python Docker image and running the tests. 

Modules consuming this plugin must define two scripts `run_tests.sh` and `run_format.sh`. 
*/

class AirbytePythonDockerConfiguration {
    String moduleDirectory
}

class AirbytePythonDockerPlugin implements Plugin<Project> {

    void apply(Project project) {
        def extension = project.extensions.create('airbytePythonDocker', AirbytePythonDockerConfiguration)

        project.task('airbytePythonDockerApply', type: Exec) {
            /*
            Install the dependencies and run the tests from a docker container
             */
            commandLine "docker", "run", "-v", "${project.projectDir.getAbsolutePath()}:/home", "--entrypoint", "/bin/bash", "python:3.9-slim", "-c", "chmod +x /home/run_tests.sh && /home/run_tests.sh /home"
        }

        project.task('blackFormat', type: Exec) {
            /*
            Run formatter and static analysis from a docker container
             */
            commandLine "docker", "run", "-v", "${project.projectDir.getAbsolutePath()}:/home", "--entrypoint", "/bin/bash", "python:3.9-slim", "-c", "chmod +x /home/run_tests.sh && /home/run_format.sh /home"
        }

        project.assemble.dependsOn project.airbytePythonDockerApply
        project.test.dependsOn project.airbytePythonDockerApply
    }
}

