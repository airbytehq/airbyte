import org.gradle.api.Plugin
import org.gradle.api.Project


class AirbyteSourceTestPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('standardSourceTestPython') {
            doFirst {
                project.exec {
                    def imageName = DockerHelpers.getDevTaggedImage(project.projectDir, 'Dockerfile')
                    def pythonContainerName = DockerHelpers.getDevTaggedImage(project.projectDir, 'Dockerfile.test')
                    logger.info('acceptance test inputs')
                    logger.info("imageName: ${imageName}")
                    logger.info("pythonContainerName: ${pythonContainerName}")
                    workingDir project.rootDir
                    commandLine 'docker', 'run', '--rm', '-i',
                            // so that it has access to docker
                            '-v', "/var/run/docker.sock:/var/run/docker.sock",
                            // when launching the container within a container, it mounts the directory from
                            // the host filesystem, not the parent container. this forces /tmp to be the
                            // same directory for host, parent container, and child container.
                            '-v', "/tmp:/tmp",
                            // mount the project dir. all provided input paths must be relative to that dir.
                            '-v', "${project.projectDir.absolutePath}:/test_input",
                            '--name', "std-test-${project.name}", 'airbyte/standard-source-test:dev',
                            '--imageName', imageName,
                            '--pythonContainerName', pythonContainerName
                }
            }

            outputs.upToDateWhen { false }
        }
        project.airbyteDockerTest.dependsOn(':airbyte-integrations:bases:base-python-test:airbyteDocker')
        project.standardSourceTestPython.dependsOn(':airbyte-integrations:bases:standard-source-test:airbyteDocker')
        project.standardSourceTestPython.dependsOn(project.build)
        project.standardSourceTestPython.dependsOn(project.airbyteDocker)
        project.standardSourceTestPython.dependsOn(project.airbyteDockerTest)

        // make sure we create the integrationTest task once in case a java integration test was already initialized
        if(!project.hasProperty('integrationTest')) {
            project.task('integrationTest')
        }

        project.integrationTest.dependsOn(project.standardSourceTestPython)
    }
}
