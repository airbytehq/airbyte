import org.gradle.api.Plugin
import org.gradle.api.Project

import java.nio.file.Paths

class AirbyteSourceTestPlugin implements Plugin<Project> {
    static String extractLabelValue(String dockerFile, String labelName) {
        def file = dockerFile instanceof File ? dockerFile : new File(dockerFile)
        return file.readLines()
                .grep({ it.startsWith('LABEL') && it.contains(labelName) })
                .get(0)
                .split('=')[1]
    }

    static String extractImageName(String dockerFile) {
        return extractLabelValue(dockerFile, "io.airbyte.name")
    }

    static String extractImageVersion(String dockerFile) {
        return extractLabelValue(dockerFile, "io.airbyte.version")
    }

    static String getTaggedImage(projectDir, dockerfileName) {
        return "${extractImageName(Paths.get(projectDir.absolutePath, dockerfileName).toString())}:dev"
    }

    void apply(Project project) {
        project.task('standardSourceTestPython') {
            doFirst {
                project.exec {
                    def imageName = getTaggedImage(project.projectDir, 'Dockerfile')
                    def pythonContainerName = getTaggedImage(project.projectDir, 'Dockerfile.test')
                    logger.info('standard test inputs')
                    logger.info("imageName: ${imageName}")
                    logger.info("pythonContainerName: ${pythonContainerName}")
                    workingDir project.rootDir
                    commandLine 'docker', 'run', '--rm', '-i',
                            // so that it has access to docker
                            '-v', "/var/run/docker.sock:/var/run/docker.sock",
                            // when launching the container within a container, it mounts the directory from
                            // the host filesystem, not the parent container. this forces /tmp to be the
                            // same directory for host, parent container, and child container.
                            '-v', "/tmp:/tmp",
                            // mount the project dir. all provided input paths must be relative to that dir.
                            '-v', "${project.projectDir.absolutePath}:/test_input",
                            '--name', "std-test-${project.name}", 'airbyte/standard-source-test:dev',
                            '--imageName', imageName,
                            '--pythonContainerName', pythonContainerName
                }
            }
        }
        project.standardSourceTestPython.dependsOn(':airbyte-integrations:bases:standard-source-test:airbyteDocker')
        project.standardSourceTestPython.dependsOn(project.build)
        project.standardSourceTestPython.dependsOn(project.airbyteDockerTest)
    }
}
