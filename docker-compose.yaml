version: '3.7'

services:
  db:
    image: dataline/db:${VERSION}
    container_name: dataline-db
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=db-${DATABASE_DB}
  seed:
    image: dataline/seed:${VERSION}
    container_name: dataline-data-seed
    environment:
      - ENV=${ENV}
    # When the volume is created for the first time it will be populated with the contents of /app/seed,
    # which is prepopulated with the configs that we want config persistence to have access to upon
    # installation. On subsequent compose up / down, this will get mounted, but not copy any data.
    # Effectively it'll be a no-op on subsequent runs, though we may be able to use it to add new data
    # to the volume if we need to as we release updates.
    # reference:
    # https://docs.docker.com/storage/volumes/#populate-a-volume-using-a-container
    # https://docs.docker.com/compose/compose-file/#long-syntax-3
    volumes:
      - type: volume
        source: data
        target: /app/seed
  scheduler:
    image: dataline/scheduler:${VERSION}
    container_name: dataline-scheduler
    environment:
      - ENV=${ENV}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS=db:5432
      - WORKSPACE_ROOT=${WORKSPACE_ROOT}
      - WORKSPACE_DOCKER_MOUNT=${WORKSPACE_DOCKER_MOUNT}
      - CONFIG_ROOT=${CONFIG_ROOT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${WORKSPACE_DOCKER_MOUNT}:${WORKSPACE_ROOT}"
      - "data:${CONFIG_ROOT}"
    depends_on:
      - db
      - seed
  server:
    image: dataline/server:${VERSION}
    container_name: dataline-server
    environment:
      - ENV=${ENV}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_URL=${DATABASE_URL}
      - WAIT_BEFORE_HOSTS=5
      - WAIT_HOSTS=db:5432
      - CONFIG_ROOT=${CONFIG_ROOT}
    ports:
      - 8001:8001
    volumes:
      - "data:${CONFIG_ROOT}"
    depends_on:
      - db
  webapp:
    image: dataline/webapp:${VERSION}
    container_name: dataline-webapp
    ports:
      - 8000:80
    depends_on:
      - server

volumes:
  workspace:
    name: ${WORKSPACE_DOCKER_MOUNT}
  data:
    name: data
