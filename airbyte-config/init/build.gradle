import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'java-library'
}

dependencies {
    implementation 'commons-cli:commons-cli:1.4'

    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-config:config-persistence')
    implementation project(':airbyte-protocol:protocol-models')
    implementation project(':airbyte-commons-docker')
    implementation project(':airbyte-json-validation')

    testImplementation project(':airbyte-test-utils')
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
}

task copyScripts(type: Copy) {
    dependsOn copyDocker

    from('scripts')
    into 'build/docker/bin/scripts'
}

// TODO: DRY up this method in BuildSrc maybe
//task localDockerBuildTask(type: DockerBuildImage, group: "$projectDir") {
//    def artifactName = "init"
//    def projectDir = project.projectDir
//    def buildVersion = rootProject.ext.version
//    def buildTag = rootProject.ext.image_tag
//
//    def jdkVersion = System.getenv('JDK_VERSION') ?: '17.0.1'
//    def arch = System.getenv('BUILD_ARCH') ?: System.getProperty("os.arch").toLowerCase()
//    def isArm64 = arch == "aarch64" || arch == "arm64"
//    def buildPlatform = System.getenv('DOCKER_BUILD_PLATFORM') ?: isArm64 ? 'linux/arm64' : 'linux/amd64'
//    def alpineImage = System.getenv('ALPINE_IMAGE') ?: isArm64 ? 'arm64v8/alpine:3.14' : 'amd64/alpine:3.14'
//    def nginxImage = System.getenv('NGINX_IMAGE') ?: isArm64 ? 'arm64v8/nginx:alpine' : 'amd64/nginx:alpine'
//    def openjdkImage = System.getenv('JDK_IMAGE') ?: isArm64 ? "arm64v8/openjdk:19-slim-bullseye" : "amd64/openjdk:19-slim-bullseye"
//    def buildArch = System.getenv('DOCKER_BUILD_ARCH') ?: isArm64 ? 'arm64' : 'amd64'
//
//    inputDir = file("$projectDir/build/docker")
//    platform = buildPlatform
//    images.add("airbyte/$artifactName:$buildTag")
//    buildArgs.put('JDK_VERSION', jdkVersion)
//    buildArgs.put('DOCKER_BUILD_ARCH', buildArch)
//    buildArgs.put('ALPINE_IMAGE', alpineImage)
//    buildArgs.put('NGINX_IMAGE', nginxImage)
//    buildArgs.put('JDK_IMAGE', openjdkImage)
//    buildArgs.put('VERSION', buildVersion)
//}
//loc?alDockerBuildTask.dependsOn(copyScripts)
//assemble.dependsOn(localDockerBuildTask)

tasks.named("buildDockerImage") {
    dependsOn copyScripts
}

Task publishArtifactsTask = getPublishArtifactsTask("$rootProject.ext.version", project)
