#!/usr/bin/env bash

# ------------- Import some defaults for the shell

# Source shell defaults
# $0 is the currently running program (this file)
this_file_directory=$(dirname $0)
relative_path_to_defaults=$this_file_directory/../shell_defaults

# if a file exists there, source it. otherwise complain
if test -f $relative_path_to_defaults; then
  # source and '.' are the same program
  source $relative_path_to_defaults
else
  echo -e "\033[31m\nFAILED TO SOURCE TEST RUNNING OPTIONS.\033[39m"
  echo -e "\033[31mTried $relative_path_to_defaults\033[39m"
  exit 1
fi

echo "To run locally use GITHUB_PAT=\$YOUR_PAT_HERE before running"
token=$GITHUB_PAT
org=airbytehq
# FUN POSIX fact, every string is an array!
repo_list="airbyte airbyte-cloud"


for repo in $repo_list; do
  # Start the while loop to check for all runners
  runner_for_page_count=1
  page_count=0
  all_runner_ids=""
  # keep paging through until we find them all
  while test $runner_for_page_count -gt 0; do
    page_count=$(($page_count+1))
    set +o xtrace
    # API for endpoint:
    # https://docs.github.com/en/rest/actions/self-hosted-runners#list-self-hosted-runners-for-a-repository
    runner_response=$(curl \
      --silent \
      --header "Accept: application/vnd.github.v3+json" \
      --header "Authorization: token $token" \
      --request GET  https://api.github.com/repos/$org/$repo/actions/runners?page=$page_count&per_page=100)
    runner_response_wc=$(echo $runner_response | wc -w)
    # For auth errors because auth errors are short
    if test $runner_response_wc -lt 100; then
      echo -e "$blue_text""\$runner_response is \n\n$runner_response\n\n""$default_text"
    fi

    runner_ids_for_page=$(echo $runner_response | \
         jq  '.runners[] | select(.status=="offline") | .id')

    runner_for_page_count=$(echo $runner_ids_for_page | wc -w)
    echo -e "$blue_text""jq returned $runner_for_page_count runners for page $page_count""$default_text"
    all_runner_ids="$runner_ids_for_page $all_runner_ids"
    all_runner_ids_count=$(echo $all_runner_ids | wc -w)
    echo -e "$blue_text""Total count is now $all_runner_ids_count""$default_text"
  done

  echo -e "$blue_text""Total ids returned: $all_runner_ids_count""$default_text"
  if test $all_runner_ids_count -eq 0; then
    echo -e "$blue_text""Nothing to kill.  No Termination Required :(""$default_text"
    exit 0
  fi
  # DELETE THEM ALL!
  cursor=0
  for this_runner in $all_runner_ids; do
    cursor=$(($cursor+1))
    echo -e "$blue_text""Removing $cursor / $all_runner_ids_count""$default_text"
    # API for endpoint:
    # https://docs.github.com/en/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-a-repository
    curl \
      --silent \
      --request DELETE \
      --header "Accept: application/vnd.github.v3+json" \
      --header "Authorization: token $token" \
      https://api.github.com/repos/$org/$repo/actions/runners/$this_runner && \
      echo -e "$blue_text""OK    ID $this_runner""$default_text" || \
      echo -e "$red_text""FAIL! ID $this_runner""$default_text"
  done

done
