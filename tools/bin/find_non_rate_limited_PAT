#!/usr/bin/env bash

# Run away from anything even a little scary
set -o nounset # -u exit if a variable is not set
set -o errexit # -f exit for any command failure
# text color escape codes (please note \033 == \e but OSX doesn't respect the \e)
blue_text='\033[94m'
red_text='\033[31m'
default_text='\033[39m'

# set -x/xtrace' uses a Sony PS4 for more info
PS4="$blue_text"'${BASH_SOURCE}:${LINENO}:default_text '

# Last for more pretty output
# set -o xtrace  # -x display every line before exectution; enables PS4


# If more than one argument given, run this script once for each argument

# @ is the entire CLI arg... ie `this_script arg1 arg2`
# fun fact, any string with spaces is an array in shell!
for personal_access_token in $@
  do
    echo -e "$blue_text""Curl-ing rate_limit for PAT:  \"$personal_access_token\"""$default_text"


    full_response=$(
      curl  --silent \
            --header "Authorization: Bearer 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" \
            --request GET https://api.github.com/rate_limit \
    )

    echo -e "$blue_text""first 4 lines of Curl response:\n$(echo $full_response | head -n4)\n\n""$default_text"

    echo -e "$blue_text""Running jq '.resources.core.remaining' on full_response""$default_text"

    rate_limit_remaining=$(echo "$full_response" | jq '.resources.core.remaining' )

    echo -e "$blue_text""Github says this PAT has ""$red_text""$rate_limit_remaining""$blue_text"" left""$default_text"

    # If GH rate limit response > 100
    if test $rate_limit_remaining -gt 100; then
      echo -e "$blue_text""Curl-ing rate_limit for PAT:  \"$personal_access_token\"""$default_text"
      echo "::set-output name=pat::$personal_access_token"
      exit 0
    else
      echo -e "$red_text""Rate limit exceed for this PAT!""$default_text"
    fi

done

echo -e "$red_text""::error NO more request availible! Yell at topher or someone on infra!""$default_text"

exit 1

