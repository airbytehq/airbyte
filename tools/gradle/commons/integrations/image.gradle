import java.nio.file.Paths
import java.security.MessageDigest

@CacheableTask
abstract class DockerBuild extends DefaultTask {
    @Input
    abstract File rootDir

    // todo: parse tree of exclusions for inputs
    @InputDirectory
    abstract File projectDir

    @Input
    abstract Set<String> baseImageHashes

    @Input
    String dockerfileName = 'Dockerfile'

    @OutputFile
    abstract File idFileOutput

    @TaskAction
    def buildImage() {
        def scriptPath = Paths.get(rootDir.absolutePath, 'tools/bin/build_image.sh').toString()
        def tag = "${extractImageName(Paths.get(projectDir.absolutePath, dockerfileName).toString())}:dev"

        project.exec {
            commandLine scriptPath, rootDir.absolutePath, projectDir.absolutePath, dockerfileName, tag, idFileOutput.absolutePath
        }
    }

    static String extractLabelValue(String dockerFile, String labelName) {
        def file = dockerFile instanceof File ? dockerFile : new File(dockerFile)
        return file.readLines()
                .grep({ it.startsWith('LABEL') && it.contains(labelName) })
                .get(0)
                .split('=')[1]
    }

    static String extractImageName(String dockerFile) {
        return extractLabelValue(dockerFile, "io.airbyte.name")
    }

    static String extractImageVersion(String dockerFile) {
        return extractLabelValue(dockerFile, "io.airbyte.version")
    }
}

rootProject.ext.imageToVersion = {
    if(!rootProject.hasProperty("imageToVersion")) {
        def imageToVersion = [:]
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "docker", "images", "--no-trunc", "-f", "dangling=false", "--format", "{{.Repository}}:{{.Tag}} {{.ID}}"
            standardOutput = stdout;
        }

        "$stdout".eachLine { line ->
            def splits = line.split()
            imageToVersion.put(splits[0], splits[1])
        }

        return imageToVersion
    } else {
        return rootProject.imageToVersion
    }
}()

def getBaseImageHashes(File dockerfile) {
    println("getting hashes for ${dockerfile}")

    def result = [] as Set<String>

    dockerfile.eachLine { line ->
        if (line.startsWith("FROM ")) {
            def image = line.split()[1]
            def map = rootProject.imageToVersion
            result.add((String)map.get(image))
        }
    }

    return result
}

task buildImage(type: DockerBuild) {
    def dockerPath = Paths.get(project.projectDir.absolutePath, 'Dockerfile')
    def hash = MessageDigest.getInstance("MD5").digest(dockerPath.getBytes()).encodeHex().toString()
    rootDir = rootProject.rootDir
    projectDir = project.projectDir
    idFileOutput = file(Paths.get(rootProject.rootDir.absolutePath, '.dockerversions', hash).toString())
    baseImageHashes = getBaseImageHashes(dockerPath.toFile()) // todo: parameterize by dockerfile name
}

buildImage.dependsOn(build) // todo: should this depend on outputs?
