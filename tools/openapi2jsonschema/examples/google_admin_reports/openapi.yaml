openapi: 3.0.0
servers:
  - url: https://admin.googleapis.com/
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Admin SDK API
  version: reports_v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
    - analytics
    - media
  x-logo:
    url: https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png
  x-origin:
    - format: google
      url: https://admin.googleapis.com/$discovery/rest?version=reports_v1
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: admin
externalDocs:
  url: https://developers.google.com/admin-sdk/
tags:
  - name: activities
  - name: channels
  - name: customerUsageReports
  - name: entityUsageReports
  - name: userUsageReport
paths:
  "/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}":
    get:
      description: "Retrieves a list of activities for a specific customer's account and application such as the Admin console application or the Google Drive application. For more information, see the guides for administrator and Google Drive activity reports. For more information about the activity report's parameters, see the activity parameters reference guides. "
      operationId: reports.activities.list
      parameters:
        - description: Represents the profile ID or the user email for which the data should be filtered. Can be `all` for all information, or `userKey` for a user's unique Google Workspace profile ID or their primary email address. Must not be a deleted user. For a deleted user, call `users.list` in Directory API with `showDeleted=true`, then use the returned `ID` as the `userKey`.
          in: path
          name: userKey
          required: true
          schema:
            type: string
        - description: Application name for which the events are to be retrieved.
          in: path
          name: applicationName
          required: true
          schema:
            enum:
              - access_transparency
              - admin
              - calendar
              - chat
              - drive
              - gcp
              - gplus
              - groups
              - groups_enterprise
              - jamboard
              - login
              - meet
              - mobile
              - rules
              - saml
              - token
              - user_accounts
              - context_aware_access
              - chrome
              - data_studio
              - keep
            type: string
        - description: The Internet Protocol (IP) Address of host where the event was performed. This is an additional way to filter a report's summary using the IP address of the user whose activity is being reported. This IP address may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. This parameter supports both IPv4 and IPv6 address versions.
          in: query
          name: actorIpAddress
          schema:
            type: string
        - description: The unique ID of the customer to retrieve data for.
          in: query
          name: customerId
          schema:
            type: string
        - description: "Sets the end of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is the approximate time of the API request. An API report has three basic time concepts: - *Date of the API's request for a report*: When the API created and retrieved the report. - *Report's start time*: The beginning of the timespan shown in the report. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error. - *Report's end time*: The end of the timespan shown in the report. For example, the timespan of events summarized in a report can start in April and end in May. The report itself can be requested in August. If the `endTime` is not specified, the report returns all activities from the `startTime` until the current time or the most recent 180 days if the `startTime` is more than 180 days in the past."
          in: query
          name: endTime
          schema:
            type: string
        - description: The name of the event being queried by the API. Each `eventName` is related to a specific Google Workspace service or feature which the API organizes into types of events. An example is the Google Calendar events in the Admin console application's reports. The Calendar Settings `type` structure has all of the Calendar `eventName` activities reported by the API. When an administrator changes a Calendar setting, the API reports this activity in the Calendar Settings `type` and `eventName` parameters. For more information about `eventName` query strings and parameters, see the list of event names for various applications above in `applicationName`.
          in: query
          name: eventName
          schema:
            type: string
        - description: "The `filters` query string is a comma-separated list. The list is composed of event parameters that are manipulated by relational operators. Event parameters are in the form `parameter1 name[parameter1 value],parameter2 name[parameter2 value],...` These event parameters are associated with a specific `eventName`. An empty report is returned if the filtered request's parameter does not belong to the `eventName`. For more information about `eventName` parameters, see the list of event names for various applications above in `applicationName`. In the following Admin Activity example, the <> operator is URL-encoded in the request's query string (%3C%3E): GET...&eventName=CHANGE_CALENDAR_SETTING &filters=NEW_VALUE%3C%3EREAD_ONLY_ACCESS In the following Drive example, the list can be a view or edit event's `doc_id` parameter with a value that is manipulated by an 'equal to' (==) or 'not equal to' (<>) relational operator. In the first example, the report returns each edited document's `doc_id`. In the second example, the report returns each viewed document's `doc_id` that equals the value 12345 and does not return any viewed document's which have a `doc_id` value of 98765. The <> operator is URL-encoded in the request's query string (%3C%3E): GET...&eventName=edit&filters=doc_id GET...&eventName=view&filters=doc_id==12345,doc_id%3C%3E98765 The relational operators include: - `==` - 'equal to'. - `<>` - 'not equal to'. It is URL-encoded (%3C%3E). - `<` - 'less than'. It is URL-encoded (%3C). - `<=` - 'less than or equal to'. It is URL-encoded (%3C=). - `>` - 'greater than'. It is URL-encoded (%3E). - `>=` - 'greater than or equal to'. It is URL-encoded (%3E=). *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. If no parameters are requested, all parameters are returned. "
          in: query
          name: filters
          schema:
            type: string
        - description: 'Comma separated group ids (obfuscated) on which user activities are filtered, i.e. the response will contain activities for only those users that are a part of at least one of the group ids mentioned here. Format: "id:abc123,id:xyz456"'
          in: query
          name: groupIdFilter
          schema:
            type: string
        - description: Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page. The `maxResults` query string is optional in the request. The default value is 1000.
          in: query
          name: maxResults
          schema:
            maximum: 1000
            minimum: 1
            type: integer
        - description: ID of the organizational unit to report on. Activity records will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.
          in: query
          name: orgUnitID
          schema:
            type: string
        - description: The token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.
          in: query
          name: pageToken
          schema:
            type: string
        - description: Sets the beginning of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report returns all activities from `startTime` until `endTime`. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error.
          in: query
          name: startTime
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activities"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.reports.audit.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.reports.audit.readonly
      tags:
        - activities
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  "/admin/reports/v1/activity/users/{userKey}/applications/{applicationName}/watch":
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Start receiving notifications for account activities. For more information, see Receiving Push Notifications.
      operationId: reports.activities.watch
      parameters:
        - description: Represents the profile ID or the user email for which the data should be filtered. Can be `all` for all information, or `userKey` for a user's unique Google Workspace profile ID or their primary email address. Must not be a deleted user. For a deleted user, call `users.list` in Directory API with `showDeleted=true`, then use the returned `ID` as the `userKey`.
          in: path
          name: userKey
          required: true
          schema:
            type: string
        - description: Application name for which the events are to be retrieved.
          in: path
          name: applicationName
          required: true
          schema:
            enum:
              - access_transparency
              - admin
              - calendar
              - chat
              - drive
              - gcp
              - gplus
              - groups
              - groups_enterprise
              - jamboard
              - login
              - meet
              - mobile
              - rules
              - saml
              - token
              - user_accounts
              - context_aware_access
              - chrome
              - data_studio
              - keep
            type: string
        - description: The Internet Protocol (IP) Address of host where the event was performed. This is an additional way to filter a report's summary using the IP address of the user whose activity is being reported. This IP address may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. This parameter supports both IPv4 and IPv6 address versions.
          in: query
          name: actorIpAddress
          schema:
            type: string
        - description: The unique ID of the customer to retrieve data for.
          in: query
          name: customerId
          schema:
            type: string
        - description: "Sets the end of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is the approximate time of the API request. An API report has three basic time concepts: - *Date of the API's request for a report*: When the API created and retrieved the report. - *Report's start time*: The beginning of the timespan shown in the report. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error. - *Report's end time*: The end of the timespan shown in the report. For example, the timespan of events summarized in a report can start in April and end in May. The report itself can be requested in August. If the `endTime` is not specified, the report returns all activities from the `startTime` until the current time or the most recent 180 days if the `startTime` is more than 180 days in the past."
          in: query
          name: endTime
          schema:
            type: string
        - description: The name of the event being queried by the API. Each `eventName` is related to a specific Google Workspace service or feature which the API organizes into types of events. An example is the Google Calendar events in the Admin console application's reports. The Calendar Settings `type` structure has all of the Calendar `eventName` activities reported by the API. When an administrator changes a Calendar setting, the API reports this activity in the Calendar Settings `type` and `eventName` parameters. For more information about `eventName` query strings and parameters, see the list of event names for various applications above in `applicationName`.
          in: query
          name: eventName
          schema:
            type: string
        - description: "The `filters` query string is a comma-separated list. The list is composed of event parameters that are manipulated by relational operators. Event parameters are in the form `parameter1 name[parameter1 value],parameter2 name[parameter2 value],...` These event parameters are associated with a specific `eventName`. An empty report is returned if the filtered request's parameter does not belong to the `eventName`. For more information about `eventName` parameters, see the list of event names for various applications above in `applicationName`. In the following Admin Activity example, the <> operator is URL-encoded in the request's query string (%3C%3E): GET...&eventName=CHANGE_CALENDAR_SETTING &filters=NEW_VALUE%3C%3EREAD_ONLY_ACCESS In the following Drive example, the list can be a view or edit event's `doc_id` parameter with a value that is manipulated by an 'equal to' (==) or 'not equal to' (<>) relational operator. In the first example, the report returns each edited document's `doc_id`. In the second example, the report returns each viewed document's `doc_id` that equals the value 12345 and does not return any viewed document's which have a `doc_id` value of 98765. The <> operator is URL-encoded in the request's query string (%3C%3E): GET...&eventName=edit&filters=doc_id GET...&eventName=view&filters=doc_id==12345,doc_id%3C%3E98765 The relational operators include: - `==` - 'equal to'. - `<>` - 'not equal to'. It is URL-encoded (%3C%3E). - `<` - 'less than'. It is URL-encoded (%3C). - `<=` - 'less than or equal to'. It is URL-encoded (%3C=). - `>` - 'greater than'. It is URL-encoded (%3E). - `>=` - 'greater than or equal to'. It is URL-encoded (%3E=). *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. If no parameters are requested, all parameters are returned. "
          in: query
          name: filters
          schema:
            type: string
        - description: 'Comma separated group ids (obfuscated) on which user activities are filtered, i.e. the response will contain activities for only those users that are a part of at least one of the group ids mentioned here. Format: "id:abc123,id:xyz456"'
          in: query
          name: groupIdFilter
          schema:
            type: string
        - description: Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page. The `maxResults` query string is optional in the request. The default value is 1000.
          in: query
          name: maxResults
          schema:
            maximum: 1000
            minimum: 1
            type: integer
        - description: ID of the organizational unit to report on. Activity records will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.
          in: query
          name: orgUnitID
          schema:
            type: string
        - description: The token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.
          in: query
          name: pageToken
          schema:
            type: string
        - description: Sets the beginning of the range of time shown in the report. The date is in the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report returns all activities from `startTime` until `endTime`. The `startTime` must be before the `endTime` (if specified) and the current time when the request is made, or the API returns an error.
          in: query
          name: startTime
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Channel"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.reports.audit.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.reports.audit.readonly
      tags:
        - activities
  "/admin/reports/v1/usage/dates/{date}":
    get:
      description: "Retrieves a report which is a collection of properties and statistics for a specific customer's account. For more information, see the Customers Usage Report guide. For more information about the customer report's parameters, see the Customers Usage parameters reference guides. "
      operationId: reports.customerUsageReports.get
      parameters:
        - description: Represents the date the usage occurred. The timestamp is in the ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone for this.
          in: path
          name: date
          required: true
          schema:
            type: string
        - description: The unique ID of the customer to retrieve data for.
          in: query
          name: customerId
          schema:
            type: string
        - description: Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. For your follow-on requests getting all of the report's pages, enter the `nextPageToken` value in the `pageToken` query string.
          in: query
          name: pageToken
          schema:
            type: string
        - description: "The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Customers usage report include `accounts`, `app_maker`, `apps_scripts`, `calendar`, `classroom`, `cros`, `docs`, `gmail`, `gplus`, `device_management`, `meet`, and `sites`. A `parameters` query string is in the CSV form of `app_name1:param_name1, app_name2:param_name2`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned. "
          in: query
          name: parameters
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageReports"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.reports.usage.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.reports.usage.readonly
      tags:
        - customerUsageReports
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  "/admin/reports/v1/usage/users/{userKey}/dates/{date}":
    get:
      description: Retrieves a report which is a collection of properties and statistics for a set of users with the account. For more information, see the User Usage Report guide. For more information about the user report's parameters, see the Users Usage parameters reference guides.
      operationId: reports.userUsageReport.get
      parameters:
        - description: Represents the profile ID or the user email for which the data should be filtered. Can be `all` for all information, or `userKey` for a user's unique Google Workspace profile ID or their primary email address. Must not be a deleted user. For a deleted user, call `users.list` in Directory API with `showDeleted=true`, then use the returned `ID` as the `userKey`.
          in: path
          name: userKey
          required: true
          schema:
            type: string
        - description: Represents the date the usage occurred. The timestamp is in the ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone for this.
          in: path
          name: date
          required: true
          schema:
            type: string
        - description: The unique ID of the customer to retrieve data for.
          in: query
          name: customerId
          schema:
            type: string
        - description: "The `filters` query string is a comma-separated list of an application's event parameters where the parameter's value is manipulated by a relational operator. The `filters` query string includes the name of the application whose usage is returned in the report. The application values for the Users Usage Report include `accounts`, `docs`, and `gmail`. Filters are in the form `[application name]:parameter name[parameter value],...`. In this example, the `<>` 'not equal to' operator is URL-encoded in the request's query string (%3C%3E): GET https://www.googleapis.com/admin/reports/v1/usage/users/all/dates/2013-03-03 ?parameters=accounts:last_login_time &filters=accounts:last_login_time%3C%3E2010-10-28T10:26:35.000Z The relational operators include: - `==` - 'equal to'. - `<>` - 'not equal to'. It is URL-encoded (%3C%3E). - `<` - 'less than'. It is URL-encoded (%3C). - `<=` - 'less than or equal to'. It is URL-encoded (%3C=). - `>` - 'greater than'. It is URL-encoded (%3E). - `>=` - 'greater than or equal to'. It is URL-encoded (%3E=). "
          in: query
          name: filters
          schema:
            type: string
        - description: 'Comma separated group ids (obfuscated) on which user activities are filtered, i.e. the response will contain activities for only those users that are a part of at least one of the group ids mentioned here. Format: "id:abc123,id:xyz456"'
          in: query
          name: groupIdFilter
          schema:
            type: string
        - description: Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page. The `maxResults` query string is optional.
          in: query
          name: maxResults
          schema:
            maximum: 1000
            minimum: 1
            type: integer
        - description: ID of the organizational unit to report on. User activity will be shown only for users who belong to the specified organizational unit. Data before Dec 17, 2018 doesn't appear in the filtered results.
          in: query
          name: orgUnitID
          schema:
            type: string
        - description: Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.
          in: query
          name: pageToken
          schema:
            type: string
        - description: "The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Customers Usage report include `accounts`, `app_maker`, `apps_scripts`, `calendar`, `classroom`, `cros`, `docs`, `gmail`, `gplus`, `device_management`, `meet`, and `sites`. A `parameters` query string is in the CSV form of `app_name1:param_name1, app_name2:param_name2`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned. "
          in: query
          name: parameters
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageReports"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.reports.usage.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.reports.usage.readonly
      tags:
        - userUsageReport
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  "/admin/reports/v1/usage/{entityType}/{entityKey}/dates/{date}":
    get:
      description: Retrieves a report which is a collection of properties and statistics for entities used by users within the account. For more information, see the Entities Usage Report guide. For more information about the entities report's parameters, see the Entities Usage parameters reference guides.
      operationId: reports.entityUsageReports.get
      parameters:
        - description: Represents the type of entity for the report.
          in: path
          name: entityType
          required: true
          schema:
            enum:
              - gplus_communities
            type: string
        - description: Represents the key of the object to filter the data with.
          in: path
          name: entityKey
          required: true
          schema:
            enum:
              - all
              - entityKey
            type: string
        - description: Represents the date the usage occurred. The timestamp is in the ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone for this.
          in: path
          name: date
          required: true
          schema:
            type: string
        - description: The unique ID of the customer to retrieve data for.
          in: query
          name: customerId
          schema:
            type: string
        - description: "The `filters` query string is a comma-separated list of an application's event parameters where the parameter's value is manipulated by a relational operator. The `filters` query string includes the name of the application whose usage is returned in the report. The application values for the Entities usage report include `accounts`, `docs`, and `gmail`. Filters are in the form `[application name]:parameter name[parameter value],...`. In this example, the `<>` 'not equal to' operator is URL-encoded in the request's query string (%3C%3E): GET https://www.googleapis.com/admin/reports/v1/usage/gplus_communities/all/dates/2017-12-01 ?parameters=gplus:community_name,gplus:num_total_members &filters=gplus:num_total_members%3C%3E0 The relational operators include: - `==` - 'equal to'. - `<>` - 'not equal to'. It is URL-encoded (%3C%3E). - `<` - 'less than'. It is URL-encoded (%3C). - `<=` - 'less than or equal to'. It is URL-encoded (%3C=). - `>` - 'greater than'. It is URL-encoded (%3E). - `>=` - 'greater than or equal to'. It is URL-encoded (%3E=). Filters can only be applied to numeric parameters."
          in: query
          name: filters
          schema:
            type: string
        - description: Determines how many activity records are shown on each response page. For example, if the request sets `maxResults=1` and the report has two activities, the report has two pages. The response's `nextPageToken` property has the token to the second page.
          in: query
          name: maxResults
          schema:
            maximum: 1000
            minimum: 1
            type: integer
        - description: Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. In your follow-on request getting the next page of the report, enter the `nextPageToken` value in the `pageToken` query string.
          in: query
          name: pageToken
          schema:
            type: string
        - description: "The `parameters` query string is a comma-separated list of event parameters that refine a report's results. The parameter is associated with a specific application. The application values for the Entities usage report are only `gplus`. A `parameter` query string is in the CSV form of `[app_name1:param_name1], [app_name2:param_name2]...`. *Note:* The API doesn't accept multiple values of a parameter. If a particular parameter is supplied more than once in the API request, the API only accepts the last value of that request parameter. In addition, if an invalid request parameter is supplied in the API request, the API ignores that request parameter and returns the response corresponding to the remaining valid request parameters. An example of an invalid request parameter is one that does not belong to the application. If no parameters are requested, all parameters are returned. "
          in: query
          name: parameters
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageReports"
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.reports.usage.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.reports.usage.readonly
      tags:
        - entityUsageReports
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
  /admin/reports_v1/channels/stop:
    parameters:
      - $ref: "#/components/parameters/_.xgafv"
      - $ref: "#/components/parameters/access_token"
      - $ref: "#/components/parameters/alt"
      - $ref: "#/components/parameters/callback"
      - $ref: "#/components/parameters/fields"
      - $ref: "#/components/parameters/key"
      - $ref: "#/components/parameters/oauth_token"
      - $ref: "#/components/parameters/prettyPrint"
      - $ref: "#/components/parameters/quotaUser"
      - $ref: "#/components/parameters/upload_protocol"
      - $ref: "#/components/parameters/uploadType"
    post:
      description: Stop watching resources through this channel.
      operationId: admin.channels.stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Channel"
      responses:
        "200":
          description: Successful response
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/admin.reports.audit.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/admin.reports.audit.readonly
      tags:
        - channels
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - "1"
          - "2"
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    Activities:
      description: JSON template for a collection of activities.
      properties:
        etag:
          description: ETag of the resource.
          type: string
        items:
          description: Each activity record in the response.
          items:
            $ref: "#/components/schemas/Activity"
          type: array
        kind:
          default: admin#reports#activities
          description: The type of API resource. For an activity report, the value is `reports#activities`.
          type: string
        nextPageToken:
          description: Token for retrieving the follow-on next page of the report. The `nextPageToken` value is used in the request's `pageToken` query string.
          type: string
      type: object
    Activity:
      description: JSON template for the activity resource.
      properties:
        actor:
          description: User doing the action.
          properties:
            callerType:
              description: The type of actor.
              type: string
            email:
              description: The primary email address of the actor. May be absent if there is no email address associated with the actor.
              type: string
            key:
              description: Only present when `callerType` is `KEY`. Can be the `consumer_key` of the requestor for OAuth 2LO API requests or an identifier for robot accounts.
              type: string
            profileId:
              description: The unique Google Workspace profile ID of the actor. May be absent if the actor is not a Google Workspace user.
              type: string
          type: object
        etag:
          description: ETag of the entry.
          type: string
        events:
          description: Activity events in the report.
          items:
            properties:
              name:
                description: "Name of the event. This is the specific name of the activity reported by the API. And each `eventName` is related to a specific Google Workspace service or feature which the API organizes into types of events. For `eventName` request parameters in general: - If no `eventName` is given, the report returns all possible instances of an `eventName`. - When you request an `eventName`, the API's response returns all activities which contain that `eventName`. It is possible that the returned activities will have other `eventName` properties in addition to the one requested. For more information about `eventName` properties, see the list of event names for various applications above in `applicationName`."
                type: string
              parameters:
                description: Parameter value pairs for various applications. For more information about `eventName` parameters, see the list of event names for various applications above in `applicationName`.
                items:
                  properties:
                    boolValue:
                      description: Boolean value of the parameter.
                      type: boolean
                    intValue:
                      description: Integer value of the parameter.
                      format: int64
                      type: string
                    messageValue:
                      description: "Nested parameter value pairs associated with this parameter. Complex value type for a parameter are returned as a list of parameter values. For example, the address parameter may have a value as `[{parameter: [{name: city, value: abc}]}]`"
                      properties:
                        parameter:
                          description: Parameter values
                          items:
                            $ref: "#/components/schemas/NestedParameter"
                          type: array
                      type: object
                    multiIntValue:
                      description: Integer values of the parameter.
                      items:
                        format: int64
                        type: string
                      type: array
                    multiMessageValue:
                      description: List of `messageValue` objects.
                      items:
                        properties:
                          parameter:
                            description: Parameter values
                            items:
                              $ref: "#/components/schemas/NestedParameter"
                            type: array
                        type: object
                      type: array
                    multiValue:
                      description: String values of the parameter.
                      items:
                        type: string
                      type: array
                    name:
                      description: The name of the parameter.
                      type: string
                    value:
                      description: String value of the parameter.
                      type: string
                  type: object
                type: array
              type:
                description: Type of event. The Google Workspace service or feature that an administrator changes is identified in the `type` property which identifies an event using the `eventName` property. For a full list of the API's `type` categories, see the list of event names for various applications above in `applicationName`.
                type: string
            type: object
          type: array
        id:
          description: Unique identifier for each activity record.
          properties:
            applicationName:
              description: Application name to which the event belongs. For possible values see the list of applications above in `applicationName`.
              type: string
            customerId:
              description: The unique identifier for a Google Workspace account.
              type: string
            time:
              description: Time of occurrence of the activity. This is in UNIX epoch time in seconds.
              format: date-time
              type: string
            uniqueQualifier:
              description: Unique qualifier if multiple events have the same time.
              format: int64
              type: string
          type: object
        ipAddress:
          description: IP address of the user doing the action. This is the Internet Protocol (IP) address of the user when logging into Google Workspace, which may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. The API supports IPv4 and IPv6.
          type: string
        kind:
          default: admin#reports#activity
          description: The type of API resource. For an activity report, the value is `audit#activity`.
          type: string
        ownerDomain:
          description: This is the domain that is affected by the report's event. For example domain of Admin console or the Drive application's document owner.
          type: string
      type: object
    Channel:
      description: A notification channel used to watch for resource changes.
      properties:
        address:
          description: The address where notifications are delivered for this channel.
          type: string
        expiration:
          description: Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
          format: int64
          type: string
        id:
          description: A UUID or similar unique string that identifies this channel.
          type: string
        kind:
          default: api#channel
          description: Identifies this as a notification channel used to watch for changes to a resource, which is "`api#channel`".
          type: string
        params:
          additionalProperties:
            type: string
          description: Additional parameters controlling delivery channel behavior. Optional.
          type: object
        payload:
          description: A Boolean value to indicate whether payload is wanted. Optional.
          type: boolean
        resourceId:
          description: An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
          type: string
        resourceUri:
          description: A version-specific identifier for the watched resource.
          type: string
        token:
          description: An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
          type: string
        type:
          description: The type of delivery mechanism used for this channel. The value should be set to `"web_hook"`.
          type: string
      type: object
    NestedParameter:
      description: JSON template for a parameter used in various reports.
      properties:
        boolValue:
          description: Boolean value of the parameter.
          type: boolean
        intValue:
          description: Integer value of the parameter.
          format: int64
          type: string
        multiBoolValue:
          description: Multiple boolean values of the parameter.
          items:
            type: boolean
          type: array
        multiIntValue:
          description: Multiple integer values of the parameter.
          items:
            format: int64
            type: string
          type: array
        multiValue:
          description: Multiple string values of the parameter.
          items:
            type: string
          type: array
        name:
          description: The name of the parameter.
          type: string
        value:
          description: String value of the parameter.
          type: string
      type: object
    UsageReport:
      description: JSON template for a usage report.
      properties:
        date:
          description: Output only. The date of the report request.
          readOnly: true
          type: string
        entity:
          description: Output only. Information about the type of the item.
          properties:
            customerId:
              description: Output only. The unique identifier of the customer's account.
              readOnly: true
              type: string
            entityId:
              description: 'Output only. Object key. Only relevant if entity.type = "OBJECT" Note: external-facing name of report is "Entities" rather than "Objects".'
              readOnly: true
              type: string
            profileId:
              description: Output only. The user's immutable Google Workspace profile identifier.
              readOnly: true
              type: string
            type:
              description: Output only. The type of item. The value is `user`.
              readOnly: true
              type: string
            userEmail:
              description: Output only. The user's email address. Only relevant if entity.type = "USER"
              readOnly: true
              type: string
          readOnly: true
          type: object
        etag:
          description: ETag of the resource.
          type: string
        kind:
          default: admin#reports#usageReport
          description: The type of API resource. For a usage report, the value is `admin#reports#usageReport`.
          type: string
        parameters:
          description: Output only. Parameter value pairs for various applications. For the Entity Usage Report parameters and values, see [the Entity Usage parameters reference](/admin-sdk/reports/v1/reference/usage-ref-appendix-a/entities).
          items:
            properties:
              boolValue:
                description: Output only. Boolean value of the parameter.
                readOnly: true
                type: boolean
              datetimeValue:
                description: The RFC 3339 formatted value of the parameter, for example 2010-10-28T10:26:35.000Z.
                format: date-time
                readOnly: true
                type: string
              intValue:
                description: Output only. Integer value of the parameter.
                format: int64
                readOnly: true
                type: string
              msgValue:
                description: Output only. Nested message value of the parameter.
                items:
                  additionalProperties:
                    description: Properties of the object.
                  type: object
                readOnly: true
                type: array
              name:
                description: The name of the parameter. For the User Usage Report parameter names, see the User Usage parameters reference.
                type: string
              stringValue:
                description: Output only. String value of the parameter.
                readOnly: true
                type: string
            type: object
          readOnly: true
          type: array
      type: object
    UsageReports:
      properties:
        etag:
          description: ETag of the resource.
          type: string
        kind:
          default: admin#reports#usageReports
          description: The type of API resource. For a usage report, the value is `admin#reports#usageReports`.
          type: string
        nextPageToken:
          description: Token to specify next page. A report with multiple pages has a `nextPageToken` property in the response. For your follow-on requests getting all of the report's pages, enter the `nextPageToken` value in the `pageToken` query string.
          type: string
        usageReports:
          description: Various application parameter records.
          items:
            $ref: "#/components/schemas/UsageReport"
          type: array
        warnings:
          description: Warnings, if any.
          items:
            properties:
              code:
                description: Machine readable code or warning type. The warning code value is `200`.
                type: string
              data:
                description: Key-value pairs to give detailed information on the warning.
                items:
                  properties:
                    key:
                      description: Key associated with a key-value pair to give detailed information on the warning.
                      type: string
                    value:
                      description: Value associated with a key-value pair to give detailed information on the warning.
                      type: string
                  type: object
                type: array
              message:
                description: 'The human readable messages for a warning are: - Data is not available warning - Sorry, data for date yyyy-mm-dd for application "`application name`" is not available. - Partial data is available warning - Data for date yyyy-mm-dd for application "`application name`" is not available right now, please try again after a few hours. '
                type: string
            type: object
          type: array
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/admin.reports.audit.readonly: View audit reports for your G Suite domain
            https://www.googleapis.com/auth/admin.reports.usage.readonly: View usage reports for your G Suite domain
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 authorizationCode authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            https://www.googleapis.com/auth/admin.reports.audit.readonly: View audit reports for your G Suite domain
            https://www.googleapis.com/auth/admin.reports.usage.readonly: View usage reports for your G Suite domain
          tokenUrl: https://accounts.google.com/o/oauth2/token
      type: oauth2
