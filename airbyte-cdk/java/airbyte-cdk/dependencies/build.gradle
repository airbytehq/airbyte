import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id "com.github.eirnym.js2p" version "1.0"
    id "de.undercouch.download" version "5.4.0"
    id "java-library"
    id "org.openapi.generator" version "6.2.1"
}

java {
    // TODO: rewrite code to avoid javac wornings in the first place
    compileJava {
        options.compilerArgs += "-Xlint:-varargs,-try,-deprecation,-unchecked,-this-escape"
    }
    compileTestJava {
        options.compilerArgs += "-Xlint:-try"
    }
    compileTestFixturesJava {
        options.compilerArgs += "-Xlint:-try"
    }
}

String specFile = "$projectDir/src/main/openapi/config.yaml"
String serverOutputDir = "$buildDir/generated/api/server"
String clientOutputDir = "$buildDir/generated/api/client"
String docsOutputDir = "$buildDir/generated/api/docs"
Map<String,String> schemaMappingsValue = [
        'OAuthConfiguration'                : 'com.fasterxml.jackson.databind.JsonNode',
        'SourceDefinitionSpecification'     : 'com.fasterxml.jackson.databind.JsonNode',
        'SourceConfiguration'               : 'com.fasterxml.jackson.databind.JsonNode',
        'DestinationDefinitionSpecification': 'com.fasterxml.jackson.databind.JsonNode',
        'DestinationConfiguration'          : 'com.fasterxml.jackson.databind.JsonNode',
        'StreamJsonSchema'                  : 'com.fasterxml.jackson.databind.JsonNode',
        'StateBlob'                         : 'com.fasterxml.jackson.databind.JsonNode',
        'FieldSchema'                       : 'com.fasterxml.jackson.databind.JsonNode',
]

def generate = tasks.register('generate')

def generateApiServer = tasks.register('generateApiServer', GenerateTask) {

    inputs.file specFile
    outputs.dir serverOutputDir

    generatorName = "jaxrs-spec"
    inputSpec = specFile
    outputDir = serverOutputDir

    apiPackage = "io.airbyte.api.generated"
    invokerPackage = "io.airbyte.api.invoker.generated"
    modelPackage = "io.airbyte.api.model.generated"

    schemaMappings.set(schemaMappingsValue)

    generateApiDocumentation = false

    configOptions.set([
            dateLibrary  : "java8",
            generatePom  : "false",
            interfaceOnly: "true",
            /*
            JAX-RS generator does not respect nullable properties defined in the OpenApi Spec.
            It means that if a field is not nullable but not set it is still returning a null value for this field in the serialized json.
            The below Jackson annotation is made to only keep non null values in serialized json.
            We are not yet using nullable=true properties in our OpenApi so this is a valid workaround at the moment to circumvent the default JAX-RS behavior described above.
            Feel free to read the conversation on https://github.com/airbytehq/airbyte/pull/13370 for more details.
            */
            additionalModelTypeAnnotations: "\n@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)",
    ])
}
generate.configure {
    dependsOn generateApiServer
}

def generateApiClient = tasks.register('generateApiClient', GenerateTask) {

    inputs.file specFile
    outputs.dir clientOutputDir

    generatorName = "java"
    inputSpec = specFile
    outputDir = clientOutputDir

    apiPackage = "io.airbyte.api.client.generated"
    invokerPackage = "io.airbyte.api.client.invoker.generated"
    modelPackage = "io.airbyte.api.client.model.generated"

    schemaMappings.set(schemaMappingsValue)

    library = "native"

    generateApiDocumentation = false

    configOptions.set([
            dateLibrary  : "java8",
            generatePom  : "false",
            interfaceOnly: "true"
    ])
}
generate.configure {
    dependsOn generateApiClient
}

def generateApiDocs = tasks.register('generateApiDocs', GenerateTask) {

    generatorName = "html"
    inputSpec = specFile
    outputDir = docsOutputDir

    apiPackage = "io.airbyte.api.client.generated"
    invokerPackage = "io.airbyte.api.client.invoker.generated"
    modelPackage = "io.airbyte.api.client.model.generated"

    schemaMappings.set(schemaMappingsValue)

    generateApiDocumentation = false

    configOptions.set([
            dateLibrary  : "java8",
            generatePom  : "false",
            interfaceOnly: "true"
    ])
}
def deleteExistingDocs = tasks.register('deleteOldApiDocs', Delete) {
    delete rootProject.file("docs/reference/api/generated-api-html")
}
deleteExistingDocs.configure {
    dependsOn generateApiDocs
}
def copyApiDocs = tasks.register('copyApiDocs', Copy) {
    from(docsOutputDir) {
        include "**/*.html"
    }
    into rootProject.file("docs/reference/api/generated-api-html")
    includeEmptyDirs = false
}
copyApiDocs.configure {
    dependsOn deleteExistingDocs
}
generate.configure {
    dependsOn copyApiDocs
}

dependencies {
    api platform('com.fasterxml.jackson:jackson-bom:2.15.2')
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    api 'com.google.guava:guava:33.0.0-jre'
    api 'commons-io:commons-io:2.15.1'
    api ('io.airbyte.airbyte-protocol:protocol-models:0.7.0') { exclude group: 'com.google.api-client', module: 'google-api-client' }
    api 'javax.annotation:javax.annotation-api:1.3.2'
    api 'org.apache.commons:commons-compress:1.25.0'
    api 'org.apache.commons:commons-lang3:3.14.0'
    api 'org.apache.logging.log4j:log4j-api:2.21.1'
    api 'org.apache.logging.log4j:log4j-core:2.21.1'
    api 'org.apache.logging.log4j:log4j-slf4j-impl:2.21.1'
    api 'org.apache.logging.log4j:log4j-slf4j2-impl:2.21.1'
    api 'org.slf4j:log4j-over-slf4j:2.0.11'
    api 'org.slf4j:slf4j-api:2.0.11'

    implementation 'com.jayway.jsonpath:json-path:2.7.0'
    implementation 'com.networknt:json-schema-validator:1.0.72'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'io.swagger:swagger-annotations:1.6.2'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'me.andrz.jackson:jackson-json-reference-core:0.3.2' // needed so that we can follow $ref when parsing json
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'

    testFixturesImplementation 'io.swagger:swagger-annotations:1.6.2'
    testFixturesImplementation 'org.apache.ant:ant:1.10.11'

    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
}


jsonSchema2Pojo {
    sourceType = org.jsonschema2pojo.SourceType.YAMLSCHEMA
    source = files("${sourceSets.main.output.resourcesDir}/types")
    targetDirectory = new File(project.buildDir, 'generated/src/gen/java/')

    targetPackage = 'io.airbyte.configoss'
    useLongIntegers = true

    removeOldOutput = true

    generateBuilders = true
    includeConstructors = false
    includeSetters = true
    serializable = true
}

generate.configure {
    dependsOn tasks.named('generateJsonSchema2Pojo')
}


sourceSets {
    main {
        java {
            srcDirs([
                "$projectDir/src/main/java",
                "${serverOutputDir}/src/gen/java",
                "${clientOutputDir}/src/main/java",
            ])
        }
        resources {
            srcDir "$projectDir/src/main/openapi/"
        }
    }
}

tasks.named('compileJava').configure {
    dependsOn generate
}
tasks.named('compileTestJava').configure {
    dependsOn generate
}
