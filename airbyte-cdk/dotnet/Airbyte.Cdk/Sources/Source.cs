using System.IO;
using System.Text.Json;
using System.Threading.Channels;
using System.Threading.Tasks;
using Airbyte.Cdk.Models;

namespace Airbyte.Cdk.Sources
{
    public abstract class Source : Connector
    {
        /// <summary>
        /// Can be overridden to change an input state
        /// </summary>
        /// <param name="statepath"></param>
        /// <returns></returns>
        public virtual JsonElement ReadState(string statepath) =>
            string.IsNullOrWhiteSpace(statepath) || !File.Exists(statepath)
                ? JsonDocument.Parse("{}").RootElement.Clone()
                : JsonDocument.Parse(File.ReadAllText(statepath)).RootElement.Clone();

        /// <summary>
        /// Can be overridden to change an input catalog
        /// </summary>
        /// <param name="catalogpath"></param>
        /// <returns></returns>
        public virtual ConfiguredAirbyteCatalog ReadCatalog(string catalogpath)
            => JsonSerializer.Deserialize<ConfiguredAirbyteCatalog>(File.ReadAllText(catalogpath));

        /// <summary>
        /// Returns a generator of the AirbyteMessages generated by reading the source with the given configuration, catalog, and state.
        /// </summary>
        /// <param name="logger"></param>
        /// <param name="channel"></param>
        /// <param name="config"></param>
        /// <param name="catalog"></param>
        /// <param name="state"></param>
        /// <returns></returns>
        public abstract Task Read(AirbyteLogger logger, ChannelWriter<AirbyteMessage> channel, JsonElement config,
            ConfiguredAirbyteCatalog catalog, JsonElement state);

        /// <summary>
        /// Returns an AirbyteCatalog representing the available streams and fields in this integration. For example, given valid credentials to a
        /// Postgres database, returns an Airbyte catalog where each postgres table is a stream, and each table column is a field.
        /// </summary>
        /// <param name="logger"></param>
        /// <param name="config"></param>
        /// <returns></returns>
        public abstract AirbyteCatalog Discover(AirbyteLogger logger, JsonElement config);
    }
}
