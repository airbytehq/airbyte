/*
 * Copyright (c) 2024 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.cdk.test.util

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.ObjectMapper
import io.airbyte.cdk.data.ObjectValue
import java.time.Instant
import java.util.UUID

/** A record that we expect to exist in the destination, whether raw _or_ final. */
data class OutputRecord(
    val rawId: UUID?,
    val extractedAt: Instant,
    val loadedAt: Instant?,
    val generationId: Long?,
    /**
     * strongly-typed map, e.g. ZonedDateTime for timestamp_with_timezone. this makes destination
     * test implementations easier. values can be null, b/c warehouse destinations with a JSON
     * column type can be either SQL null, or JSON null, and we want to distinguish between those.
     * Destinations _must_ filter out the airbyte_* fields from this map.
     */
    val data: ObjectValue,
    val airbyteMeta: JsonNode?,
) {
    /** Utility constructor with easier types to write by hand */
    constructor(
        rawId: String,
        extractedAt: Long,
        loadedAt: Long?,
        generationId: Long?,
        data: Map<String, Any?>,
        airbyteMeta: String?,
    ) : this(
        UUID.fromString(rawId),
        Instant.ofEpochMilli(extractedAt),
        loadedAt?.let { Instant.ofEpochMilli(it) },
        generationId,
        ObjectValue.from(data),
        airbyteMeta?.let { ObjectMapper().readTree(it) },
    )

    /**
     * Utility constructor for "expected records". [rawId] and [loadedAt] are generated by the
     * destination at runtime, so we don't have those when writing the test. Just generate arbitrary
     * values for them.
     */
    constructor(
        extractedAt: Long,
        generationId: Long?,
        data: Map<String, Any?>,
        airbyteMeta: String?,
    ) : this(
        null,
        Instant.ofEpochMilli(extractedAt),
        loadedAt = null,
        generationId,
        ObjectValue.from(data),
        airbyteMeta?.let { ObjectMapper().readTree(it) },
    )
}
