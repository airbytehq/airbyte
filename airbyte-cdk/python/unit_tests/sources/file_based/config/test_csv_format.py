import pytest
import unittest
from pydantic import ValidationError

from airbyte_cdk.sources.file_based.config.csv_format import CsvHeaderDefinition, CsvHeaderDefinitionType


class CsvHeaderDefinitionTest(unittest.TestCase):
    def test_given_not_user_provided_but_column_names_provided_then_raise_exception(self) -> None:
        for definition_type in filter(lambda _type: _type != CsvHeaderDefinitionType.USER_PROVIDED, [*CsvHeaderDefinitionType]):
            with pytest.raises(ValidationError):
                CsvHeaderDefinition(definition_type=definition_type, column_names=["1", "2", "3"])

    def test_given_user_provided_and_not_column_names_provided_then_raise_exception(self) -> None:
        with pytest.raises(ValidationError):
            CsvHeaderDefinition(definition_type=CsvHeaderDefinitionType.USER_PROVIDED)

    def test_given_user_provided_and_column_names_then_config_is_valid(self) -> None:
        # no error means that this test succeeds
        CsvHeaderDefinition(definition_type=CsvHeaderDefinitionType.USER_PROVIDED, column_names=["1", "2", "3"])

    def test_given_user_provided_then_csv_does_not_have_header_row(self) -> None:
        assert not CsvHeaderDefinition(definition_type=CsvHeaderDefinitionType.USER_PROVIDED, column_names=["1", "2", "3"]).csv_has_header_row()

    def test_given_autogenerated_then_csv_does_not_have_header_row(self) -> None:
        assert not CsvHeaderDefinition(definition_type=CsvHeaderDefinitionType.AUTOGENERATED).csv_has_header_row()

    def test_given_from_csv_then_csv_has_header_row(self) -> None:
        assert CsvHeaderDefinition(definition_type=CsvHeaderDefinitionType.FROM_CSV).csv_has_header_row()
