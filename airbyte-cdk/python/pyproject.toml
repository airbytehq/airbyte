[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "airbyte-cdk"
version = "0.90.0"
description = "A framework for writing Airbyte Connectors."
authors = ["Airbyte <contact@airbyte.io>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/airbytehq/airbyte"
repository = "https://github.com/airbytehq/airbyte"
documentation = "https://docs.airbyte.io/"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
]
keywords = ["airbyte", "connector-development-kit", "cdk"]

[tool.poetry.dependencies]
python = "^3.9"
airbyte-protocol-models = ">=0.9.0, <1.0"
backoff = "*"
cachetools = "*"
Deprecated = "~1.2"
dpath = "~2.0.1"
genson = "1.2.2"
isodate = "~0.6.1"
Jinja2 = "~3.1.2"
jsonref = "~0.2"
jsonschema = "~3.2.0"
pendulum = "<3.0.0"
pydantic = "^1.10.8"
pyrate-limiter = "~3.1.0"
python-dateutil = "*"
PyYAML = "^6.0.1"
requests = "*"
requests_cache = "*"
wcmatch = "8.4"
# Extras depedencies
avro = { version = "~1.11.2", optional = true }
cohere = { version = "4.21", optional = true }
fastavro = { version = "~1.8.0", optional = true }
langchain = { version = "0.1.16", optional = true }
langchain_core = { version = "0.1.42", optional = true }
markdown = { version = "*", optional = true }
openai = { version = "0.27.9", extras = ["embeddings"], optional = true }
pdf2image = { version = "1.16.3", optional = true }
"pdfminer.six" = { version = "20221105", optional = true }
pyarrow = { version = "~15.0.0", optional = true }
pytesseract = { version = "0.3.10", optional = true }
Sphinx = { version = "~4.2", optional = true }
sphinx-rtd-theme = { version = "~1.0", optional = true }
sqlalchemy = { version = "^2.0.30", optional = true }
tiktoken = { version = "0.4.0", optional = true }
unstructured = { version = "0.10.27", extras = ["docx", "pptx"], optional = true }
"unstructured.pytesseract" = { version = ">=0.3.12", optional = true }
pyjwt = "^2.8.0"
cryptography = "^42.0.5"
pytz = "2024.1"

[tool.poetry.group.dev.dependencies]
datamodel_code_generator = "0.11.19"
freezegun = "*"
mypy = "*"
pandas = "2.0.3"
poethepoet = "^0.24.2"
pyproject-flake8 = "^6.1.0"
pytest = "6.2.5"
pytest-cov = "*"
pytest-httpserver = "*"
pytest-mock = "*"
requests-mock = "*"

[tool.poetry.extras]
file-based = ["avro", "fastavro", "pyarrow", "unstructured", "pdf2image", "pdfminer.six", "unstructured.pytesseract", "pytesseract", "markdown"]
sphinx-docs = ["Sphinx", "sphinx-rtd-theme"]
vector-db-based = ["langchain", "openai", "cohere", "tiktoken"]
sql-based = ["sqlalchemy"]

[tool.poe.tasks]
# Build tasks
assemble = {cmd = "bin/generate-component-manifest-files.sh", help = "Generate component manifest files."}
build-package = {cmd = "poetry build", help = "Build the python package: source and wheels archives."}
build = {sequence = ["assemble", "build-package"], help = "Run all tasks to build the package."}

# Check tasks
lint =  {cmd = "pflake8 --config ../../pyproject.toml ./", help = "Lint with flake8."}
type-check = {cmd = "bin/run-mypy-on-modified-files.sh", help = "Type check modified files with mypy."}
unit-test-with-cov = {cmd = "pytest -s unit_tests -c pytest.ini --cov=airbyte_cdk --cov-report=term --cov-config ../../pyproject.toml", help = "Run unit tests and create a coverage report."}
# TODO: find a version of the modified mypy check that works both locally and in CI.
check-local = {sequence = ["lint", "type-check", "unit-test-with-cov"], help = "Lint all code, type-check modified files, and run unit tests."}
check-ci = {sequence = ["lint", "unit-test-with-cov"], help = "Lint and run unit tests. Does not include type-checking."}

# Build and check
pre-push = {sequence = ["build", "check-local"], help = "Run all build and check tasks."}

[tool.airbyte_ci]
optional_poetry_groups = ["dev"]
poetry_extras = ["file-based", "sphinx-docs", "vector-db-based"]
poe_tasks = ["build", "check-ci"]
mount_docker_socket = true

# Below Config file is specific to the Ruff linter and formatter.
# It is used to enforce a consistent code style.

[tool.ruff]
target-version = "py310"
preview = true
line-length = 100

# TODO: Expand to include all CDK code once we are ready for more stringent linting
include = [
    "airbyte_cdk/destinations/*",
]

[tool.ruff.lint]
select = [
    # For rules reference, see https://docs.astral.sh/ruff/rules/
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "FBT",   # flake8-boolean-trap
    "BLE",   # Blind except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe (complexity)
    "COM",   # flake8-commas
    "CPY",   # missing copyright notice
    # "D", # pydocstyle # TODO: Re-enable when adding docstrings
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle (errors)
    "ERA",  # flake8-eradicate (commented out code)
    "EXE",  # flake8-executable
    "F",    # Pyflakes
    "FA",   # flake8-future-annotations
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "FURB", # Refurb
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "PD",   # pandas-vet
    "PERF", # Perflint
    "PIE",  # flake8-pie
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T10",  # debugger calls
    # "T20", # flake8-print # TODO: Re-enable once we have logging
    "TCH",    # flake8-type-checking
    "TD",     # flake8-todos
    "TID",    # flake8-tidy-imports
    "TRY",    # tryceratops
    "TRY002", # Disallow raising vanilla Exception. Create or use a custom exception instead.
    "TRY003", # Disallow vanilla string passing. Prefer kwargs to the exception constructur.
    "UP",     # pyupgrade
    "W",      # pycodestyle (warnings)
    "YTT",    # flake8-2020
]
ignore = [
    # For rules reference, see https://docs.astral.sh/ruff/rules/

    # These we don't agree with or don't want to prioritize to enforce:
    "ANN003",  # kwargs missing type annotations
    "ANN101",  # Type annotations for 'self' args
    "ANN102",  # Type annotations for 'cls' args
    "COM812",  # Because it conflicts with ruff auto-format
    "EM",      # flake8-errmsgs (may reconsider later)
    "DJ",      # Django linting
    "G",       # flake8-logging-format
    "ISC001",  # Conflicts with ruff auto-format
    "NPY",     # NumPy-specific rules
    "PIE790",  # Allow unnecssary 'pass' (sometimes useful for readability)
    "PERF203", # exception handling in loop
    "PLR6301", # Allow class methods that don't use 'self' (otherwise noisy)
    "RUF022",  # Allow unsorted __all__ (sometimes useful for grouping by type with pdoc)
    "S",       # flake8-bandit (noisy, security related)
    "SIM910",  # Allow "None" as second argument to Dict.get(). "Explicit is better than implicit."
    "TD002",   # Require author for TODOs
    "TRIO",    # flake8-trio (opinionated, noisy)
    "INP001",  # Dir 'examples' is part of an implicit namespace package. Add an __init__.py.

    # TODO: Consider re-enabling these before release:
    "A003",    # Class attribute 'type' is shadowing a Python builtin
    "BLE001",  # Do not catch blind exception: Exception
    "ERA001",  # Remove commented-out code
    "FIX002",  # Allow "TODO:" until release (then switch to requiring links via TDO003)
    "PLW0603", # Using the global statement to update _cache is discouraged
    "PLW0108", # Lambda may be unnecessary; consider inlining inner function
    "TD003",   # Require links for TODOs # TODO: Re-enable when we disable FIX002

    "UP007", # Allow legacy `Union[a, b]` and `Optional[a]` for Pydantic, until we drop Python 3.9 (Pydantic doesn't like it)
]
fixable = ["ALL"]
unfixable = [
    "ERA001", # Commented-out code (avoid silent loss of code)
    "T201",   # print() calls (avoid silent loss of code / log messages)
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
max-args = 8      # Relaxed from default of 5
max-branches = 15 # Relaxed from default of 12

[tool.ruff.lint.flake8-import-conventions.aliases]
airbyte = "ab"
"airbyte.exceptions" = "exc"

[tool.ruff.lint.isort]
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = ["airbyte_cdk", "airbyte_protocol"]
known-local-folder = ["airbyte"]
required-imports = ["from __future__ import annotations"]
known-third-party = []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.mccabe]
max-complexity = 24

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false
docstring-code-format = true
