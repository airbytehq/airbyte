import org.jsonschema2pojo.SourceType

plugins {
    id "com.github.eirnym.js2p" version "1.0"
}

dependencies {
    implementation group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'
}

jsonSchema2Pojo {
    // todo (cgardens) - this path cannot be the same as the one in airbyte-configs:model,
    //  otherwise they clobber each other, when we are accessing them as java resources.
    //  we need to find a more graceful way of handling this issue, but for now this keeps
    //  us moving forward.
    sourceType = SourceType.YAMLSCHEMA
    source = files("${sourceSets.main.output.resourcesDir}/singer_types")
    targetDirectory = new File(project.buildDir, 'generated/src/gen/java/')

    targetPackage = 'io.airbyte.singer'
    useLongIntegers = true

    removeOldOutput = true

    generateBuilders = true
    includeConstructors = false
    includeSetters = true

    // If this is true, then when we serialize objects, they have extra empty collections that the
    // original object did not contain. This causes problem when the extra collections make the
    // object invalid json schema. The case that bit us was that type: [] is NOT valid JsonSchema
    // so it causes downstream consumers to fail. e.g. in the case of an anyOf, the correct
    // construction is { anyOf: [ object 1, object 2...] }. If type is included as an empty array as
    // so: { type: [], anyOf: [ object 1, object 2...] } this is no longer valid JsonSchema.
    // Turning this off means we need to be careful about null checking for these collections now.
    //
    // e.g. Here's an example of what happens when initializeCollections is true.
    // json schema for a Pet:
    // {
    //  "type": "object",
    //  "additionalProperties": false,
    //  "properties": {
    //    "name": {
    //      "type": "string"
    //    },
    //    "collars": {
    //      "type": "array",
    //      "items": {
    //        "type": "string"
    //      }
    //    }
    //  }
    //}
    // input: { "name": "Spot" }
    // Deserialize using the generate Pet from jsonschema2pojo and then re-serialize, the output
    // will include the collars field.
    // output: { "name": "Spot", "collars": [] }
    initializeCollections = false
}

task postprocess {
    doFirst {
        def files = [
                'generated/src/gen/java/io/airbyte/singer/SingerColumn.java',
                'generated/src/gen/java/io/airbyte/singer/SingerTableSchema.java'
        ]

        for (file in files) {

            def original = new File(project.buildDir, file)
            def lines = original.readLines()

            original.withWriter('utf-8') { writer ->
                lines.each {
                    if (it.contains("private List<SingerType> type"))
                        writer.writeLine("    @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = io.airbyte.singer.SingerTypeDeserializer.class)")
                    writer.writeLine(it)
                }
            }
        }
    }
}

afterEvaluate { project ->
    project.tasks.generateJsonSchema2Pojo.finalizedBy postprocess
}
