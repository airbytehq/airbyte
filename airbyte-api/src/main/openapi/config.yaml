openapi: 3.0.0
info:
  description: |
    Airbyte Configuration API
    [https://airbyte.io](https://airbyte.io).

    This API is a collection HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.

    Here are some conventions that this API follows:
    * All endpoints are http POST methods.
    * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params.
    * The naming convention for endpoints is: localhost:8001/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8001/v1/connections/create`.
    * For all `update` method, the whole object must be passed in, even the fields that did not change.

    Change Management:
    * The major version of the API endpoint can be determined / specified in the URL `localhost:8080/v1/connections/create`
    * Minor version bumps will be invisible to the end user. The user cannot specify minor versions in requests.
    * All backwards incompatible changes will happen in major version bumps. We will not make backwards incompatible changes in minor version bumps. Examples of non-breaking changes (includes but not limited to...):
      * Adding fields to request or response bodies.
      * Adding new HTTP endpoints.

  version: "1.0.0-oas3"
  title: Airbyte Configuration API
  contact:
    email: contact@airbyte.io
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
externalDocs:
  description: Find out more about Airbyte
  url: "https://airbyte.io"
servers:
  - url: "http://localhost:8001"
tags:
  - name: workspace
    description: Workspace related resources.
  - name: source_definition
    description: SourceDefinition related resources.
  - name: source_definition_specification
    description: SourceDefinition specification related resources.
  - name: source
    description: Source related resources.
  - name: destination_definition
    description: DestinationDefinition related resources.
  - name: destination_definition_specification
    description: DestinationDefinitionSpecification related resources.
  - name: destination
    description: Destination  related resources.
  - name: connection
    description: Connection between sources and destinations.
  - name: web_backend
    description: Connection between sources and destinations.
  - name: health
    description: Healthchecks
  - name: deployment
    description: Export/Import Airbyte Configuration and Database resources.

paths:
  /v1/workspaces/get:
    post:
      tags:
        - workspace
      summary: Find workspace by ID
      operationId: getWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceRead"
        "404":
          description: Workspace not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/workspaces/get_by_slug:
    post:
      tags:
        - workspace
      summary: Find workspace by slug
      operationId: getWorkspaceBySlug
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlugRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceRead"
        "404":
          description: Workspace not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/workspaces/update:
    post:
      tags:
        - workspace
      summary: Update workspace state
      operationId: updateWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceUpdate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkspaceRead"
        "404":
          description: Workspace not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/source_definitions/create:
    post:
      tags:
        - source_definition
      summary: Creates a sourceDefinition
      operationId: createSourceDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceDefinitionCreate"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceDefinitionRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/source_definitions/update:
    post:
      tags:
        - source_definition
      summary: Update a sourceDefinition
      operationId: updateSourceDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceDefinitionUpdate"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceDefinitionRead"
        "404":
          description: SourceDefinition not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/source_definitions/list:
    post:
      tags:
        - source_definition
      summary: List all of the sourceDefinitions that Airbyte supports
      operationId: listSourceDefinitions
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceDefinitionReadList"
  /v1/source_definitions/get:
    post:
      tags:
        - source
      summary: Get source
      operationId: getSourceDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceDefinitionIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceDefinitionRead"
        "404":
          description: SourceDefinition not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/source_definition_specifications/get:
    post:
      tags:
        - source_definition_specification
      summary: Get specification for a SourceDefinition.
      operationId: getSourceDefinitionSpecification
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceDefinitionIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceDefinitionSpecificationRead"
        "404":
          description: SourceDefinition not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/sources/create:
    post:
      tags:
        - source
      summary: Create a source
      operationId: createSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceCreate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/sources/update:
    post:
      tags:
        - source
      summary: Update a source
      operationId: updateSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceUpdate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceRead"
        "404":
          description: Source not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/sources/list:
    post:
      tags:
        - source
      summary: List sources for workspace
      description: List sources for workspace. Does not return deleted sources.
      operationId: listSourcesForWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceReadList"
        "404":
          description: Workspace not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/sources/get:
    post:
      tags:
        - source
      summary: Get source
      operationId: getSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceRead"
        "404":
          description: Source not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/sources/delete:
    post:
      tags:
        - source
      summary: Delete a source
      operationId: deleteSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceIdRequestBody"
        required: true
      responses:
        "204":
          description: The resource was deleted successfully.
        "404":
          description: Source not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/sources/check_connection:
    post:
      tags:
        - source
      summary: Check connection to the source
      operationId: checkConnectionToSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckConnectionRead"
        "404":
          description: Source not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/sources/discover_schema:
    post:
      tags:
        - source
      summary: Discover the schema of the source
      operationId: discoverSchemaForSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceDiscoverSchemaRead"
        "404":
          description: Source not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destination_definitions/create:
    post:
      tags:
        - destination_definition
      summary: Creates a destinationsDefinition
      operationId: createDestinationDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationDefinitionCreate"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationDefinitionRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destination_definitions/update:
    post:
      tags:
        - destination_definition
      summary: Update destinationDefinition
      operationId: updateDestinationDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationDefinitionUpdate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationDefinitionRead"
        "404":
          description: DestinationDefinition not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destination_definitions/list:
    post:
      tags:
        - destination_definition
      summary: List all of the destinationDefinitions that Airbyte supports
      operationId: listDestinationDefinitions
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationDefinitionReadList"
  /v1/destination_definitions/get:
    post:
      tags:
        - destination_definition
      summary: Get destinationDefinition
      operationId: getDestinationDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationDefinitionIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationDefinitionRead"
        "404":
          description: DestinationDefinition not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destination_definition_specifications/get:
    post:
      tags:
        - destination_definition_specification
      summary: Get specification for a destinationDefinition
      operationId: getDestinationDefinitionSpecification
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationDefinitionIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationDefinitionSpecificationRead"
        "404":
          description: DestinationDefinition not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  # DESTINATIONS
  /v1/destinations/create:
    post:
      tags:
        - destination
      summary: Create a destination
      operationId: createDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationCreate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destinations/update:
    post:
      tags:
        - destination
      summary: Update a destination
      operationId: updateDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationUpdate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destinations/list:
    post:
      tags:
        - destination
      summary: List configured destinations for a workspace
      operationId: listDestinationsForWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationReadList"
        "404":
          description: Workspace not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destinations/get:
    post:
      tags:
        - destination
      summary: get configured destination
      operationId: getDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationRead"
        "404":
          description: Destination  not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destinations/check_connection:
    post:
      tags:
        - destination
      summary: Check connection to the destination
      operationId: checkConnectionToDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckConnectionRead"
        "404":
          description: Destination  not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/destinations/delete:
    post:
      tags:
        - destination
      summary: Delete the destination
      operationId: deleteDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationIdRequestBody"
        required: true
      responses:
        "204":
          description: The resource was deleted successfully.
        "404":
          description: Destination  not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/connections/create:
    post:
      tags:
        - connection
      summary: Create a connection between a source and a destination
      operationId: createConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionCreate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/connections/update:
    post:
      tags:
        - connection
      summary: Updated a connection status
      operationId: updateConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionUpdate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/connections/list:
    post:
      tags:
        - connection
      summary: Returns all connections for a workspace.
      description: List connections for workspace. Does not return deleted connections.
      operationId: listConnectionsForWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionReadList"
        "404":
          description: Workspace not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/connections/get:
    post:
      tags:
        - connection
      summary: Get a connection
      operationId: getConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionRead"
        "404":
          description: Connection not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/connections/delete:
    post:
      tags:
        - connection
      summary: Delete a connection
      operationId: deleteConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionIdRequestBody"
        required: true
      responses:
        "204":
          description: The resource was deleted successfully.
        "404":
          description: Connection not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/connections/sync:
    post:
      tags:
        - connection
      summary: Trigger a manual sync of the connection
      operationId: syncConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobInfoRead"
        "404":
          description: Connection not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/connections/reset:
    post:
      tags:
        - connection
      summary: Reset the data for the connection. Deletes data generated by the connection in the destination. Resets any cursors back to initial state.
      operationId: resetConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectionIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobInfoRead"
        "404":
          description: Connection not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/scheduler/sources/check_connection:
    post:
      tags:
        - scheduler
      summary: Run check connection for a given source configuration
      operationId: executeSourceCheckConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceCoreConfig"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckConnectionRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/scheduler/sources/discover_schema:
    post:
      tags:
        - scheduler
      summary: Run discover schema for a given source a source configuration
      operationId: executeSourceDiscoverSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceCoreConfig"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceDiscoverSchemaRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/scheduler/destinations/check_connection:
    post:
      tags:
        - scheduler
      summary: Run check connection for a given destination configuration
      operationId: executeDestinationCheckConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationCoreConfig"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckConnectionRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/web_backend/connections/list:
    post:
      tags:
        - web_backend
      summary: Returns all connections for a workspace.
      operationId: webBackendListConnectionsForWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkspaceIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WbConnectionReadList"
        "404":
          description: Workspace not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/web_backend/connections/get:
    post:
      tags:
        - web_backend
      summary: Get a connection
      operationId: webBackendGetConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebBackendConnectionRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WbConnectionRead"
        "404":
          description: Connection not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/web_backend/connections/update:
    post:
      tags:
        - web_backend
      summary: Update a connection
      operationId: webBackendUpdateConnection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebBackendConnectionUpdate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/web_backend/sources/recreate:
    post:
      tags:
        - web_backend
      summary: Recreate a source
      operationId: webBackendRecreateSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceRecreate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/web_backend/destinations/recreate:
    post:
      tags:
        - web_backend
      summary: Recreate a destination
      operationId: webBackendRecreateDestination
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DestinationRecreate"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DestinationRead"
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/jobs/list:
    post:
      tags:
        - jobs
      summary: Returns recent jobs for a connection. Jobs are returned in descending order by createdAt.
      operationId: listJobsFor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobListRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobReadList"
        "404":
          description: Connection not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/jobs/get:
    post:
      tags:
        - jobs
      summary: Get information about a job
      operationId: getJobInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobIdRequestBody"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobInfoRead"
        "404":
          description: Job not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/health:
    get:
      tags:
        - health
      summary: Health Check
      operationId: getHealthCheck
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckRead"
  /v1/logs/get:
    post:
      tags:
        - logs
      summary: Get logs
      operationId: getLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogsRequestBody"
        required: true
      responses:
        "200":
          description: Returns the log file
          content:
            text/plain:
              schema:
                type: string
                format: binary
        "404":
          description: Logs not found
        "422":
          $ref: "#/components/responses/InvalidInput"
  /v1/deployment/export:
    post:
      tags:
        - deployment
      summary: Export Airbyte Configuration and Data Archive
      operationId: exportArchive
      responses:
        "200":
          description: Successful operation
          content:
            application/x-gzip:
              schema:
                $ref: "#/components/schemas/AirbyteArchive"
  /v1/deployment/import:
    post:
      tags:
        - deployment
      summary: Import Airbyte Configuration and Data Archive
      operationId: importArchive
      requestBody:
        content:
          application/x-gzip:
            schema:
              $ref: "#/components/schemas/AirbyteArchive"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportRead"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # WORKSPACE
    WorkspaceId:
      type: string
      format: uuid
    CustomerId:
      type: string
      format: uuid
    WorkspaceIdRequestBody:
      type: object
      required:
        - workspaceId
      properties:
        workspaceId:
          $ref: "#/components/schemas/WorkspaceId"
    WorkspaceRead:
      type: object
      required:
        - workspaceId
        - customerId
        - name
        - slug
        - initialSetupComplete
      properties:
        workspaceId:
          $ref: "#/components/schemas/WorkspaceId"
        customerId:
          $ref: "#/components/schemas/CustomerId"
        name:
          type: string
        slug:
          type: string
        initialSetupComplete:
          type: boolean
        displaySetupWizard:
          type: boolean
        anonymousDataCollection:
          type: boolean
        news:
          type: boolean
        securityUpdates:
          type: boolean
    WorkspaceUpdate:
      type: object
      required:
        - workspaceId
        - initialSetupComplete
        - anonymousDataCollection
        - news
        - securityUpdates
      properties:
        workspaceId:
          $ref: "#/components/schemas/WorkspaceId"
        email:
          type: string
          format: email
        initialSetupComplete:
          type: boolean
        displaySetupWizard:
          type: boolean
        anonymousDataCollection:
          type: boolean
        news:
          type: boolean
        securityUpdates:
          type: boolean
    # SLUG
    SlugRequestBody:
      type: object
      required:
        - slug
      properties:
        slug:
          type: string
    # SourceDefinition
    SourceDefinitionId:
      type: string
      format: uuid
    SourceDefinitionIdRequestBody:
      type: object
      required:
        - sourceDefinitionId
      properties:
        sourceDefinitionId:
          $ref: "#/components/schemas/SourceDefinitionId"
    SourceDefinitionCreate:
      type: object
      required:
        - name
        - dockerRepository
        - dockerImageTag
        - documentationUrl
      properties:
        name:
          type: string
        dockerRepository:
          type: string
        dockerImageTag:
          type: string
        documentationUrl:
          type: string
          format: uri
    SourceDefinitionUpdate:
      type: object
      description: Update the SourceDefinition. Currently, the only allowed attribute to update is the default docker image version.
      required:
        - sourceDefinitionId
        - dockerImageTag
      properties:
        sourceDefinitionId:
          $ref: "#/components/schemas/SourceDefinitionId"
        dockerImageTag:
          type: string
    SourceDefinitionRead:
      type: object
      required:
        - sourceDefinitionId
        - name
        - dockerRepository
        - dockerImageTag
      properties:
        sourceDefinitionId:
          $ref: "#/components/schemas/SourceDefinitionId"
        name:
          type: string
        dockerRepository:
          type: string
        dockerImageTag:
          type: string
        documentationUrl:
          type: string
          format: uri
    SourceDefinitionReadList:
      type: object
      required:
        - sourceDefinitions
      properties:
        sourceDefinitions:
          type: array
          items:
            $ref: "#/components/schemas/SourceDefinitionRead"
    # SOURCE SPECIFICATION
    SourceDefinitionSpecification:
      description: The specification for what values are required to configure the sourceDefinition.
      type: object
      example: { user: { type: string } }
    SourceDefinitionSpecificationRead:
      type: object
      required:
        - sourceDefinitionId
        - connectionSpecification
      properties:
        sourceDefinitionId:
          $ref: "#/components/schemas/SourceDefinitionId"
        documentationUrl:
          type: string
        connectionSpecification:
          $ref: "#/components/schemas/SourceDefinitionSpecification"
    # SOURCE
    SourceId:
      type: string
      format: uuid
    SourceIdRequestBody:
      type: object
      required:
        - sourceId
      properties:
        sourceId:
          $ref: "#/components/schemas/SourceId"
    SourceConfiguration:
      description: The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
      example: { user: "charles" }
    SourceCoreConfig:
      type: object
      required:
        - sourceDefinitionId
        - connectionConfiguration
      properties:
        sourceDefinitionId:
          $ref: "#/components/schemas/SourceDefinitionId"
        connectionConfiguration:
          $ref: "#/components/schemas/SourceConfiguration"
    SourceCreate:
      allOf:
        - $ref: "#/components/schemas/SourceCoreConfig"
        - type: object
          required:
            - workspaceId
            - name
          properties:
            workspaceId:
              $ref: "#/components/schemas/WorkspaceId"
            name:
              type: string
    SourceRecreate:
      type: object
      required:
        - workspaceId
        - sourceDefinitionId
        - sourceId
        - connectionConfiguration
        - name
      properties:
        sourceDefinitionId:
          $ref: "#/components/schemas/SourceDefinitionId"
        sourceId:
          $ref: "#/components/schemas/SourceId"
        workspaceId:
          $ref: "#/components/schemas/WorkspaceId"
        connectionConfiguration:
          $ref: "#/components/schemas/SourceConfiguration"
        name:
          type: string
    SourceUpdate:
      type: object
      required:
        - sourceId
        - connectionConfiguration
        - name
      properties:
        sourceId:
          $ref: "#/components/schemas/SourceId"
        connectionConfiguration:
          $ref: "#/components/schemas/SourceConfiguration"
        name:
          type: string
    SourceRead:
      type: object
      required:
        - sourceDefinitionId
        - sourceId
        - workspaceId
        - connectionConfiguration
        - name
        - sourceName
      properties:
        sourceDefinitionId:
          $ref: "#/components/schemas/SourceDefinitionId"
        sourceId:
          $ref: "#/components/schemas/SourceId"
        workspaceId:
          $ref: "#/components/schemas/WorkspaceId"
        connectionConfiguration:
          $ref: "#/components/schemas/SourceConfiguration"
        name:
          type: string
        sourceName:
          type: string
    SourceReadList:
      type: object
      required:
        - sources
      properties:
        sources:
          type: array
          items:
            $ref: "#/components/schemas/SourceRead"
    SourceDiscoverSchemaRead:
      description: Returns the results of a discover schema job. If the job was not successful, the schema field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
      type: object
      required:
        - jobInfo
      properties:
        schema:
          $ref: "#/components/schemas/SourceSchema"
        jobInfo:
          $ref: "#/components/schemas/JobInfoRead"
    # DESTINATION DEFINITION
    DestinationDefinitionId:
      type: string
      format: uuid
    DestinationDefinitionIdRequestBody:
      type: object
      required:
        - destinationDefinitionId
      properties:
        destinationDefinitionId:
          $ref: "#/components/schemas/DestinationDefinitionId"
    DestinationDefinitionCreate:
      type: object
      required:
        - name
        - dockerRepository
        - dockerImageTag
        - documentationUrl
      properties:
        name:
          type: string
        dockerRepository:
          type: string
        dockerImageTag:
          type: string
        documentationUrl:
          type: string
          format: uri
    DestinationDefinitionUpdate:
      type: object
      required:
        - destinationDefinitionId
        - dockerImageag
      properties:
        destinationDefinitionId:
          $ref: "#/components/schemas/DestinationDefinitionId"
        dockerImageTag:
          type: string
    DestinationDefinitionRead:
      type: object
      required:
        - destinationDefinitionId
        - name
        - dockerRepository
        - dockerImageTag
        - documentationUrl
      properties:
        destinationDefinitionId:
          $ref: "#/components/schemas/DestinationDefinitionId"
        name:
          type: string
        dockerRepository:
          type: string
        dockerImageTag:
          type: string
        documentationUrl:
          type: string
          format: uri
    DestinationDefinitionReadList:
      type: object
      required:
        - destinationDefinitions
      properties:
        destinationDefinitions:
          type: array
          items:
            $ref: "#/components/schemas/DestinationDefinitionRead"
    # DESTINATION DEFINITION SPECIFICATION
    DestinationDefinitionSpecification:
      description: The specification for what values are required to configure the destinationDefinition.
      example: { user: { type: string } }
    DestinationDefinitionSpecificationRead:
      type: object
      required:
        - destinationDefinitionId
        - connectionSpecification
      properties:
        destinationDefinitionId:
          $ref: "#/components/schemas/DestinationDefinitionId"
        documentationUrl:
          type: string
        connectionSpecification:
          $ref: "#/components/schemas/DestinationDefinitionSpecification"
    # DESTINATION
    DestinationId:
      type: string
      format: uuid
    DestinationIdRequestBody:
      type: object
      required:
        - destinationId
      properties:
        destinationId:
          $ref: "#/components/schemas/DestinationId"
    DestinationConfiguration:
      description: The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
      example: { user: "charles" }
    DestinationCoreConfig:
      type: object
      required:
        - workspaceId
        - destinationDefinitionId
        - connectionConfiguration
      properties:
        destinationDefinitionId:
          $ref: "#/components/schemas/DestinationDefinitionId"
        connectionConfiguration:
          $ref: "#/components/schemas/DestinationConfiguration"
    DestinationCreate:
      allOf:
        - $ref: "#/components/schemas/DestinationCoreConfig"
        - type: object
          required:
            - workspaceId
            - name
          properties:
            workspaceId:
              $ref: "#/components/schemas/WorkspaceId"
            name:
              type: string
    DestinationRecreate:
      type: object
      required:
        - workspaceId
        - destinationId
        - destinationDefinitionId
        - connectionConfiguration
        - name
      properties:
        destinationDefinitionId:
          $ref: "#/components/schemas/DestinationDefinitionId"
        destinationId:
          $ref: "#/components/schemas/DestinationId"
        workspaceId:
          $ref: "#/components/schemas/WorkspaceId"
        connectionConfiguration:
          $ref: "#/components/schemas/DestinationConfiguration"
        name:
          type: string
    DestinationUpdate:
      type: object
      required:
        - destinationId
        - connectionConfiguration
        - name
      properties:
        destinationId:
          $ref: "#/components/schemas/DestinationId"
        connectionConfiguration:
          $ref: "#/components/schemas/DestinationConfiguration"
        name:
          type: string
    DestinationRead:
      type: object
      required:
        - destinationDefinitionId
        - destinationId
        - workspaceId
        - connectionConfiguration
        - name
        - destinationName
      properties:
        destinationDefinitionId:
          $ref: "#/components/schemas/DestinationDefinitionId"
        destinationId:
          $ref: "#/components/schemas/DestinationId"
        workspaceId:
          $ref: "#/components/schemas/WorkspaceId"
        connectionConfiguration:
          $ref: "#/components/schemas/DestinationConfiguration"
        name:
          type: string
        destinationName:
          type: string
    DestinationReadList:
      type: object
      required:
        - destinations
      properties:
        destinations:
          type: array
          items:
            $ref: "#/components/schemas/DestinationRead"
    # CONNECTION
    ConnectionId:
      type: string
      format: uuid
    ConnectionIdRequestBody:
      type: object
      required:
        - connectionId
      properties:
        connectionId:
          $ref: "#/components/schemas/ConnectionId"
    WebBackendConnectionRequestBody:
      type: object
      required:
        - connectionId
      properties:
        withRefreshedCatalog:
          type: boolean
        connectionId:
          $ref: "#/components/schemas/ConnectionId"
    ConnectionCreate:
      type: object
      required:
        - sourceId
        - destinationId
        - status
      properties:
        name:
          type: string
          description: Optional name of the connection
        sourceId:
          $ref: "#/components/schemas/SourceId"
        destinationId:
          $ref: "#/components/schemas/DestinationId"
        syncSchema:
          $ref: "#/components/schemas/SourceSchema"
        schedule:
          $ref: "#/components/schemas/ConnectionSchedule"
        status:
          $ref: "#/components/schemas/ConnectionStatus"
    ConnectionUpdate:
      type: object
      required:
        - connectionId
        - syncSchema
        - status
      properties:
        connectionId:
          $ref: "#/components/schemas/ConnectionId"
        syncSchema:
          $ref: "#/components/schemas/SourceSchema"
        schedule:
          $ref: "#/components/schemas/ConnectionSchedule"
        status:
          $ref: "#/components/schemas/ConnectionStatus"
    WebBackendConnectionUpdate:
      allOf:
        - $ref: "#/components/schemas/ConnectionUpdate"
        - type: object
          properties:
            withRefreshedCatalog:
              type: boolean
    ConnectionRead:
      type: object
      required:
        - connectionId
        - name
        - sourceId
        - destinationId
        - syncSchema
        - status
      properties:
        connectionId:
          $ref: "#/components/schemas/ConnectionId"
        name:
          type: string
        sourceId:
          $ref: "#/components/schemas/SourceId"
        destinationId:
          $ref: "#/components/schemas/DestinationId"
        syncSchema:
          $ref: "#/components/schemas/SourceSchema"
        schedule:
          $ref: "#/components/schemas/ConnectionSchedule"
        status:
          $ref: "#/components/schemas/ConnectionStatus"
    ConnectionReadList:
      type: object
      required:
        - connections
      properties:
        connections:
          type: array
          items:
            $ref: "#/components/schemas/ConnectionRead"
    ConnectionStatus:
      type: string
      description: Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
      enum:
        - active
        - inactive
        - deprecated
    ConnectionSchedule:
      description: if null, then no schedule is set.
      type: object
      required:
        - units
        - timeUnit
      properties:
        units:
          type: integer
          format: int64
        timeUnit:
          type: string
          enum:
            - minutes
            - hours
            - days
            - weeks
            - months
    # LOGS
    LogType:
      type: string
      description: type/source of logs produced
      enum:
        - server
        - scheduler
    LogsRequestBody:
      type: object
      required:
        - logType
      properties:
        logType:
          $ref: "#/components/schemas/LogType"
    # SCHEMA
    SourceSchema:
      description: describes the available schema.
      type: object
      required:
        - streams
      properties:
        streams:
          type: array
          items:
            $ref: "#/components/schemas/SourceSchemaStream"
    SourceSchemaStream:
      type: object
      required:
        - name
        - fields
        - supportedSyncModes
      properties:
        # immutable
        name:
          type: string
        cleanedName:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/SourceSchemaField"
        supportedSyncModes:
          type: array
          items:
            $ref: "#/components/schemas/SyncMode"
        sourceDefinedCursor:
          type: boolean
        defaultCursorField:
          type: array
          items:
            type: string
        # configurable
        selected:
          type: boolean
        syncMode:
          $ref: "#/components/schemas/SyncMode"
        cursorField:
          type: array
          items:
            type: string
    SourceSchemaField:
      type: object
      required:
        - name
        - dataType
        - selected
      properties:
        name:
          type: string
        cleanedName:
          type: string
        dataType:
          $ref: "#/components/schemas/DataType"
        selected:
          type: boolean
    DataType:
      type: string
      enum:
        - string
        - number
        - boolean
        - object
        - array
    # SCHEDULER
    JobId:
      type: integer
      format: int64
    JobConfigType:
      type: string
      enum:
        - check_connection_source
        - check_connection_destination
        - discover_schema
        - get_spec
        - sync
        - reset_connection
    JobListRequestBody:
      type: object
      required:
        - configTypes
        - configId
      properties:
        configTypes:
          type: array
          items:
            $ref: "#/components/schemas/JobConfigType"
        configId:
          type: string
    JobIdRequestBody:
      type: object
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/JobId"
    JobRead:
      type: object
      required:
        - id
        - configType
        - configId
        - createdAt
        - updatedAt
        - status
      properties:
        id:
          $ref: "#/components/schemas/JobId"
        configType:
          $ref: "#/components/schemas/JobConfigType"
        configId:
          type: string
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        status:
          $ref: "#/components/schemas/JobStatus"
    JobWithAttemptsRead:
      type: object
      properties:
        job:
          $ref: "#/components/schemas/JobRead"
        attempts:
          type: array
          items:
            $ref: "#/components/schemas/AttemptRead"

    JobStatus:
      type: string
      enum:
        - pending
        - running
        - incomplete
        - failed
        - succeeded
        - cancelled
    AttemptRead:
      type: object
      required:
        - id
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int64
        status:
          $ref: "#/components/schemas/AttemptStatus"
        createdAt:
          type: integer
          format: int64
        updatedAt:
          type: integer
          format: int64
        endedAt:
          type: integer
          format: int64
        bytesSynced:
          type: integer
          format: int64
        recordsSynced:
          type: integer
          format: int64
    AttemptStatus:
      type: string
      enum:
        - running
        - failed
        - succeeded
    JobReadList:
      type: object
      required:
        - jobs
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/JobWithAttemptsRead"
    JobInfoRead:
      type: object
      required:
        - job
        - attempts
      properties:
        job:
          $ref: "#/components/schemas/JobRead"
        attempts:
          type: array
          items:
            $ref: "#/components/schemas/AttemptInfoRead"
    AttemptInfoRead:
      type: object
      required:
        - attempt
        - logs
      properties:
        attempt:
          $ref: "#/components/schemas/AttemptRead"
        logs:
          $ref: "#/components/schemas/LogRead"
    LogRead:
      type: object
      required:
        - logLines
      properties:
        logLines:
          type: array
          items:
            type: string
    # Health
    HealthCheckRead:
      type: object
      required:
        - db
      properties:
        db:
          type: boolean
    # General
    CheckConnectionRead:
      type: object
      required:
        - status
        - jobInfo
      properties:
        status:
          type: string
          enum:
            - succeeded
            - failed
        message:
          type: string
        jobInfo:
          $ref: "#/components/schemas/JobInfoRead"
    # Web Backend
    WbConnectionRead:
      type: object
      required:
        - connectionId
        - name
        - sourceId
        - destinationId
        - syncSchema
        - status
        - source
        - destination
        - isSyncing
      properties:
        connectionId:
          $ref: "#/components/schemas/ConnectionId"
        name:
          type: string
        sourceId:
          $ref: "#/components/schemas/SourceId"
        destinationId:
          $ref: "#/components/schemas/DestinationId"
        syncSchema:
          $ref: "#/components/schemas/SourceSchema"
        schedule:
          $ref: "#/components/schemas/ConnectionSchedule"
        status:
          $ref: "#/components/schemas/ConnectionStatus"
        source:
          $ref: "#/components/schemas/SourceRead"
        destination:
          $ref: "#/components/schemas/DestinationRead"
        lastSync:
          description: epoch time of last sync. null if no sync has taken place.
          type: integer
          format: int64
        isSyncing:
          type: boolean
    WbConnectionReadList:
      type: object
      required:
        - connections
      properties:
        connections:
          type: array
          items:
            $ref: "#/components/schemas/WbConnectionRead"
    SyncMode:
      type: string
      enum:
        - full_refresh
        - incremental
    AirbyteArchive:
      type: string
      format: binary
      description: Tarball Archive (.tar.gz) of Airbyte Configuration and Database
    ImportRead:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - succeeded
            - failed
        reason:
          type: string
  responses:
    InvalidInput:
      description: Invalid Input
security:
  - {}
