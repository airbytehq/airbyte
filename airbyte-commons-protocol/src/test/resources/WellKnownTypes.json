{
  "definitions": {
    "String": {
      "type": "string",
      "description": "Arbitrary text"
    },
    "BinaryData": {
      "type": "string",
      "description": "Arbitrary binary data. Represented as base64-encoded strings in the JSON transport. In the future, if we support other transports, may be encoded differently.\n",
      "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    },
    "Date": {
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}( BC)?$",
      "description": "RFC 3339\u00a75.6's full-date format, extended with BC era support"
    },
    "TimestampWithTimezone": {
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+\\-]\\d{1,2}:\\d{2})( BC)?$",
      "description": "An instant in time. Frequently simply referred to as just a timestamp, or timestamptz. Uses RFC 3339\u00a75.6's date-time format, requiring a \"T\" separator, and extended with BC era support. Note that we do _not_ accept Unix epochs here.\n"
    },
    "TimestampWithoutTimezone": {
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?( BC)?$",
      "description": "Also known as a localdatetime, or just datetime. Under RFC 3339\u00a75.6, this would be represented as `full-date \"T\" partial-time`, extended with BC era support.\n"
    },
    "TimeWithTimezone": {
      "type": "string",
      "pattern": "^\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+\\-]\\d{1,2}:\\d{2})$",
      "description": "An RFC 3339\u00a75.6 full-time"
    },
    "TimeWithoutTimezone": {
      "type": "string",
      "pattern": "^\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?$",
      "description": "An RFC 3339\u00a75.6 partial-time"
    },
    "Number": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "-?(0|[0-9]\\d*)(\\.\\d+)?"
        },
        {
          "enum": ["Infinity", "-Infinity", "NaN"]
        }
      ],
      "description": "Note the mix of regex validation for normal numbers, and enum validation for special values."
    },
    "Integer": {
      "type": "string",
      "oneOf": [
        {
          "pattern": "-?(0|[0-9]\\d*)"
        },
        {
          "enum": ["Infinity", "-Infinity", "NaN"]
        }
      ]
    },
    "Boolean": {
      "type": "boolean",
      "description": "Note the direct usage of a primitive boolean rather than string. Unlike Numbers and Integers, we don't expect unusual values  here."
    }
  }
}
