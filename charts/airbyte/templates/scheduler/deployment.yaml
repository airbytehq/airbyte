---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}-scheduler
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.scheduler.replicaCount }}
  selector:
    matchLabels:
      airbyte: scheduler
  template:
    metadata:
      labels:
        airbyte: scheduler
      {{- if .Values.scheduler.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.scheduler.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "airbyte.serviceAccountName" . }}
      {{- if .Values.scheduler.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.scheduler.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.scheduler.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.scheduler.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.scheduler.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.scheduler.affinity "context" $) | nindent 8 }}
      {{- end }}
      containers:
      - name: airbyte-scheduler-container
        image: {{ include "airbyte.schedulerImage" . }}
        imagePullPolicy: "{{ .Values.scheduler.image.pullPolicy }}"
        env:
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: AIRBYTE_VERSION
        - name: CONFIG_ROOT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: CONFIG_ROOT
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: DATABASE_PORT
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "airbyte.database.secret.name" . }}
              key: {{ include "airbyte.database.secret.passwordKey" . }}
        - name: DATABASE_URL
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: DATABASE_URL
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "common.names.fullname" . }}-secrets
              key: DATABASE_USER
        - name: TRACKING_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: TRACKING_STRATEGY
        - name: WORKSPACE_DOCKER_MOUNT
          value: workspace
        - name: WORKSPACE_ROOT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: WORKSPACE_ROOT
        - name: WORKER_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: WORKER_ENVIRONMENT
        - name: LOCAL_ROOT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: LOCAL_ROOT
        - name: WEBAPP_URL
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: WEBAPP_URL
        - name: TEMPORAL_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: TEMPORAL_HOST
        - name: TEMPORAL_WORKER_PORTS
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: TEMPORAL_WORKER_PORTS
        - name: LOG_LEVEL
          value: "{{ .Values.scheduler.log.level }}"
        - name: JOB_KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SUBMITTER_NUM_THREADS
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: SUBMITTER_NUM_THREADS
        - name: JOB_MAIN_CONTAINER_CPU_REQUEST
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: JOB_MAIN_CONTAINER_CPU_REQUEST
        - name: JOB_MAIN_CONTAINER_CPU_LIMIT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: JOB_MAIN_CONTAINER_CPU_LIMIT
        - name: JOB_MAIN_CONTAINER_MEMORY_REQUEST
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: JOB_MAIN_CONTAINER_MEMORY_REQUEST
        - name: JOB_MAIN_CONTAINER_MEMORY_LIMIT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: JOB_MAIN_CONTAINER_MEMORY_LIMIT
        - name: S3_LOG_BUCKET
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: S3_LOG_BUCKET
        - name: S3_LOG_BUCKET_REGION
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: S3_LOG_BUCKET_REGION
        {{- if and .Values.logs.accessKey.existingSecret .Values.logs.accessKey.existingSecretKey }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.logs.accessKey.existingSecret }}
              key: {{ .Values.logs.accessKey.existingSecretKey }}
        {{- else }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ include "common.names.fullname" . }}-secrets
              key: AWS_ACCESS_KEY_ID
        {{- end }}
        {{- if and .Values.logs.secretKey.existingSecret .Values.logs.secretKey.existingSecretKey }}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.logs.secretKey.existingSecret }}
              key: {{ .Values.logs.secretKey.existingSecretKey }}
        {{- else }}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "common.names.fullname" . }}-secrets
              key: AWS_SECRET_ACCESS_KEY
        {{- end }}
        - name: S3_MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: S3_MINIO_ENDPOINT
        - name: S3_PATH_STYLE_ACCESS
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: S3_PATH_STYLE_ACCESS
        - name: GOOGLE_APPLICATION_CREDENTIALS
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: GOOGLE_APPLICATION_CREDENTIALS
        - name: GCS_LOG_BUCKET
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: GCS_LOG_BUCKET
        - name: INTERNAL_API_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "common.names.fullname" . }}-env
              key: INTERNAL_API_HOST
        {{- if .Values.scheduler.extraEnv }}
        {{ .Values.scheduler.extraEnv | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.scheduler.resources }}
        resources: {{- toYaml .Values.scheduler.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.scheduler.containerSecurityContext }}
        securityContext: {{- toYaml .Values.scheduler.containerSecurityContext | nindent 10 }}
        {{- end }}
        {{- if .Values.scheduler.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - grep -qa airbyte.scheduler.app.SchedulerApp /proc/1/cmdline
          initialDelaySeconds: {{ .Values.scheduler.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.scheduler.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.scheduler.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.scheduler.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.scheduler.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.scheduler.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - grep -qa airbyte.scheduler.app.SchedulerApp /proc/1/cmdline
          initialDelaySeconds: {{ .Values.scheduler.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.scheduler.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.scheduler.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.scheduler.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.scheduler.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: gcs-log-creds-volume
          mountPath: /secrets/gcs-log-creds
          readOnly: true
        {{- if .Values.scheduler.extraVolumeMounts }}
  {{ toYaml .Values.scheduler.extraVolumeMounts | nindent 8 }}
        {{- end }}
      volumes:
      - name: gcs-log-creds-volume
        secret:
          secretName: {{ include "common.names.fullname" . }}-gcs-log-creds
      {{- if .Values.scheduler.extraVolumes }}
{{ toYaml .Values.scheduler.extraVolumes | nindent 6 }}
      {{- end }}
