---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "airbyte.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "airbyte.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate # Needed due to volume claims
  template:
    metadata:
      labels:
        {{- include "airbyte.selectorLabels" . | nindent 8 }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
          {{- printf "- name: %s" .name | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
      initContainers:
      {{- toYaml .Values.extraInitContainers | nindent 6 }}
      {{- end }}
      containers:
      - name: airbyte-server-container
        image: {{ printf "%s:%s" .Values.image.repository (include "connectorBuilderServer.imageTag" .) }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        env:
        {{- if eq .Values.global.deploymentMode "oss"  }}
        - name: AIRBYTE_VERSION
          valueFrom:
            configMapKeyRef:
              name: {{ .Release.Name }}-airbyte-env
              key: AIRBYTE_VERSION
        {{- end }}
        
        # Values from secret
        {{- if .Values.secrets }}
        {{- range $k, $v := .Values.secrets }}
        - name: {{ $k }}
          valueFrom:
            secretKeyRef:
              name: server-secrets
              key: {{ $k }}
        {{- end }}
        {{- end }}

        # Values from env
        {{- if .Values.env_vars }}
        {{- range $k, $v := mergeOverwrite .Values.env_vars .Values.global.env_vars }}
        - name: {{ $k }}
          value: {{ $v | quote }}
        {{- end }}
        {{- end }}

        # Values from extraEnv for more compability(if you want to use external secret source or other stuff)
        {{- if .Values.extraEnv }}
        {{- toYaml .Values.extraEnv | nindent 8 }}
        {{- end }}

        # TODO: add a health check endpoint to connector builder server
        # {{- if .Values.livenessProbe.enabled }}
        # livenessProbe:
        #   httpGet:
        #     path: /api/v1/health
        #     port: http
        #   initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
        #   periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
        #   timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        #   successThreshold: {{ .Values.livenessProbe.successThreshold }}
        #   failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        # {{- end }}
        # {{- if .Values.readinessProbe.enabled }}
        # readinessProbe:
        #   httpGet:
        #     path: /api/v1/health
        #     port: http
        #   initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
        #   periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        #   timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        #   successThreshold: {{ .Values.readinessProbe.successThreshold }}
        #   failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        # {{- end }}

        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.containerSecurityContext }}
        securityContext: {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        {{- end }}
        volumeMounts:
        {{- if .Values.extraVolumeMounts }}
          {{ toYaml .Values.extraVolumeMounts | nindent 8 }}
        {{- end }}
        {{- if .Values.global.extraVolumeMounts }}
          {{ toYaml .Values.global.extraVolumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.extraContainers }}
        {{ toYaml .Values.extraContainers | nindent 6 }}
      {{- end }}
      {{- if .Values.global.extraContainers }}
        {{ toYaml .Values.global.extraContainers | nindent 6 }}
      {{- end }}
      volumes:
      {{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | nindent 6 }}
      {{- end }}
