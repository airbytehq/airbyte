import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'java-library'
}

// Add a configuration for our migrations tasks defined below to encapsulate their dependencies
configurations {
    migrations.extendsFrom implementation
}

dependencies {
    api libs.hikaricp
    api libs.jooq.meta
    api libs.jooq
    api libs.postgresql

    implementation project(':airbyte-protocol:protocol-models')
    implementation project(':airbyte-json-validation')
    implementation project(':airbyte-config:config-models')
    implementation libs.flyway.core

    migrations libs.platform.testcontainers.postgresql
    migrations sourceSets.main.output

    // Mark as compile only to avoid leaking transitively to connectors
    compileOnly libs.platform.testcontainers.postgresql
    compileOnly libs.connectors.testcontainers.mysql

    // These are required because gradle might be using lower version of Jna from other
    // library transitive dependency. Can be removed if we can figure out which library is the cause.
    // Refer: https://github.com/testcontainers/testcontainers-java/issues/3834#issuecomment-825409079
    implementation 'net.java.dev.jna:jna:5.8.0'
    implementation 'net.java.dev.jna:jna-platform:5.8.0'

    testImplementation project(':airbyte-test-utils')
    testImplementation 'org.apache.commons:commons-lang3:3.11'
    testImplementation libs.platform.testcontainers.postgresql
    testImplementation libs.connectors.testcontainers.mysql

    // Big Query
    implementation('com.google.cloud:google-cloud-bigquery:1.133.1')

    // Lombok
    implementation 'org.projectlombok:lombok:1.18.20'
    annotationProcessor('org.projectlombok:lombok:1.18.20')

    // MongoDB
    implementation 'org.mongodb:mongodb-driver-sync:4.3.0'
}

task(newConfigsMigration, dependsOn: 'classes', type: JavaExec) {
    main = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'configs', 'create'
}

task(runConfigsMigration, dependsOn: 'classes', type: JavaExec) {
    main = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'configs', 'migrate'
}

task(dumpConfigsSchema, dependsOn: 'classes', type: JavaExec) {
    main = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'configs', 'dump_schema'
}

task(newJobsMigration, dependsOn: 'classes', type: JavaExec) {
    main = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'jobs', 'create'
}

task(runJobsMigration, dependsOn: 'classes', type: JavaExec) {
    main = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'jobs', 'migrate'
}

task(dumpJobsSchema, dependsOn: 'classes', type: JavaExec) {
    main = 'io.airbyte.db.instance.development.MigrationDevCenter'
    classpath = files(configurations.migrations.files)
    args 'jobs', 'dump_schema'
}

task copyInitSql(type: Copy) {
    dependsOn copyDocker

    from('src/main/resources') {
        include 'init.sql'
    }
    into 'build/docker/bin'
}

// TODO: DRY up this method in BuildSrc maybe
task localDockerBuildTask(type: DockerBuildImage, group: "$projectDir") {
    def artifactName = "db"
    def projectDir = project.projectDir
    def buildVersion = rootProject.ext.version
    def buildTag = rootProject.ext.image_tag

    def jdkVersion = System.getenv('JDK_VERSION') ?: '17.0.1'
    def arch = System.getenv('BUILD_ARCH') ?: System.getProperty("os.arch").toLowerCase()
    def isArm64 = arch == "aarch64" || arch == "arm64"
    def buildPlatform = System.getenv('DOCKER_BUILD_PLATFORM') ?: isArm64 ? 'linux/arm64' : 'linux/amd64'
    def alpineImage = System.getenv('ALPINE_IMAGE') ?: isArm64 ? 'arm64v8/alpine:3.14' : 'amd64/alpine:3.14'
    def nginxImage = System.getenv('NGINX_IMAGE') ?: isArm64 ? 'arm64v8/nginx:alpine' : 'amd64/nginx:alpine'
    def openjdkImage = System.getenv('JDK_IMAGE') ?: isArm64 ? "arm64v8/openjdk:19-slim-bullseye" : "amd64/openjdk:19-slim-bullseye"
    def buildArch = System.getenv('DOCKER_BUILD_ARCH') ?: isArm64 ? 'arm64' : 'amd64'

    inputDir = file("$projectDir/build/docker")
    platform = buildPlatform
    images.add("airbyte/$artifactName:$buildTag")
    buildArgs.put('JDK_VERSION', jdkVersion)
    buildArgs.put('DOCKER_BUILD_ARCH', buildArch)
    buildArgs.put('ALPINE_IMAGE', alpineImage)
    buildArgs.put('NGINX_IMAGE', nginxImage)
    buildArgs.put('JDK_IMAGE', openjdkImage)
    buildArgs.put('VERSION', buildVersion)
}
localDockerBuildTask.dependsOn(copyInitSql)
assemble.dependsOn(localDockerBuildTask)

Task publishArtifactsTask = getPublishArtifactsTask("$rootProject.ext.version", project)