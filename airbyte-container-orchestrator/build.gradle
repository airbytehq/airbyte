import groovy.json.JsonBuilder
import groovy.yaml.YamlSlurper

plugins {
    id 'application'
}

dependencies {
    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.bundles.micronaut.annotation.processor

    implementation platform(libs.micronaut.bom)
    implementation libs.bundles.micronaut

    // Ensure that the versions defined in deps.toml are used
    // instead of versions from transitive dependencies
    implementation(libs.s3) {
        // Force to avoid updated version brought in transitively from Micronaut 3.8+
        // that is incompatible with our current Helm setup
        force = true
    }
    implementation(libs.aws.java.sdk.s3) {
        // Force to avoid updated version brought in transitively from Micronaut 3.8+
        // that is incompatible wit hour current Helm setup
        force = true
    }

    implementation 'io.fabric8:kubernetes-client:5.12.2'
    implementation libs.bundles.datadog

    implementation project(':airbyte-api')
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-commons-protocol')
    implementation project(':airbyte-commons-temporal')
    implementation project(':airbyte-commons-worker')
    implementation project(':airbyte-config:init')
    implementation project(':airbyte-featureflag')
    implementation project(':airbyte-json-validation')
    implementation project(':airbyte-protocol:protocol-models')
    implementation project(':airbyte-metrics:metrics-lib')
    implementation project(':airbyte-worker-models')

    testAnnotationProcessor platform(libs.micronaut.bom)
    testAnnotationProcessor libs.bundles.micronaut.test.annotation.processor

    testImplementation libs.bundles.micronaut.test
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation libs.postgresql
    testImplementation libs.platform.testcontainers
    testImplementation libs.platform.testcontainers.postgresql

    testImplementation project(':airbyte-commons-docker')
}

application {
    applicationName = "airbyte-container-orchestrator"
    mainClass = "io.airbyte.container_orchestrator.Application"
    applicationDefaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
}

// Duplicated from :airbyte-worker, eventually, this should be handled in :airbyte-protocol
task generateWellKnownTypes() {
    doLast {
        def wellKnownTypesYaml = project(':airbyte-protocol').file('protocol-models/src/main/resources/airbyte_protocol/well_known_types.yaml').text
        def parsedYaml = new YamlSlurper().parseText(wellKnownTypesYaml)
        def wellKnownTypesJson = new JsonBuilder(parsedYaml).toPrettyString()
        def targetFile = project.file("build/docker/WellKnownTypes.json")
        targetFile.getParentFile().mkdirs()
        targetFile.text = wellKnownTypesJson
    }
}

tasks.named("buildDockerImage") {
    dependsOn copyGeneratedTar
    dependsOn generateWellKnownTypes
}

// Ideally, we would have buildDockerImage depend on generateWellKnownTypes
// but some of our actions use copyGeneratedTar as the "set up the docker build context" task
// so we'll just add it here.
tasks.named("copyGeneratedTar") {
    dependsOn generateWellKnownTypes
}
