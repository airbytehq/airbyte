name: Connectors

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build_airbyte_to_flow:
    runs-on: ubuntu-20.04

    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=tag::${TAG}

      # Linux builds need the non-default musl target.
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl

      - name: Install protobuf compiler (it's not already included in CI runner)
        run: sudo apt install -y libprotobuf-dev protobuf-compiler

      - name: Build Linux
        run: |-
          sudo apt-get update && \
          sudo apt-get install -y musl-tools && \
          cd airbyte-to-flow && \
          make

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.ref == 'refs/heads/master' }}
        with:
          context: airbyte-to-flow
          push: true
          tags: ghcr.io/estuary/airbyte-to-flow:dev,ghcr.io/estuary/airbyte-to-flow:${{ steps.prep.outputs.tag }}

      - name: Build and push
        uses: docker/build-push-action@v3
        if: ${{ github.ref != 'refs/heads/master' }}
        with:
          context: airbyte-to-flow
          push: true
          tags: ghcr.io/estuary/airbyte-to-flow:${{ steps.prep.outputs.tag }}

  build_cdk:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=tag::${TAG}

      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - uses: actions/setup-java@v1
        with:
          java-version: "17"

      - name: Build CDK
        id: build
        if: ${{ github.event_name == 'push' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          ./gradlew :airbyte-cdk:python:build
          ./publish-airbyte-cdk.sh

  build_connectors:
    needs:
      - build_airbyte_to_flow
      - build_cdk
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        connector:
          - source-facebook-marketing
          - source-hubspot
          - source-google-sheets
          - source-exchange-rates
          - source-google-analytics-v4
          - source-mailchimp
          - source-zendesk-support
          - source-stripe
          - source-amplitude
          - source-intercom
          - source-google-ads
          - source-salesforce
          - source-google-analytics-data-api
          - source-linkedin-ads
          - source-bing-ads
          - source-github
          - source-amazon-ads
          - source-notion
          - source-tiktok-marketing
          - source-google-search-console
          - source-surveymonkey

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=tag::${TAG}

      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - uses: actions/setup-java@v1
        with:
          java-version: "17"

      - name: Login to GitHub package docker registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
            docker login --username ${{ github.actor }} --password-stdin ghcr.io

      - name: Install virtualenv
        run: python3 -m pip install virtualenv==20.4.2 --user

      - name: Build ${{ matrix.connector }}
        id: build
        run: |
          ./gradlew :airbyte-integrations:connectors:${{ matrix.connector }}:build
          docker tag docker.io/airbyte/${{ matrix.connector }}:dev ghcr.io/estuary/${{ matrix.connector }}:${{ steps.prep.outputs.tag }}
          docker push ghcr.io/estuary/${{ matrix.connector }}:${{ steps.prep.outputs.tag }}

      - name: Push ${{ matrix.connector }} image with 'dev' and version tags
        if: ${{ github.event_name == 'push' }}
        id: push-dev
        run: |
          source tools/lib/lib.sh
          export IMAGE_VERSION=$(_get_docker_image_version airbyte-integrations/connectors/${{ matrix.connector }}/Dockerfile)
          
          docker pull ghcr.io/estuary/${{ matrix.connector }}:${{ steps.prep.outputs.tag }}
          echo "Publishing image ghcr.io/estuary/${{ matrix.connector}}:dev"
          docker tag ghcr.io/estuary/${{ matrix.connector }}:${{ steps.prep.outputs.tag }} ghcr.io/estuary/${{ matrix.connector }}:dev
          docker push ghcr.io/estuary/${{ matrix.connector }}:dev
          echo "Publishing image ghcr.io/estuary/${{ matrix.connector}}:$IMAGE_VERSION"
          docker tag ghcr.io/estuary/${{ matrix.connector }}:${{ steps.prep.outputs.tag }} ghcr.io/estuary/${{ matrix.connector }}:$IMAGE_VERSION
          docker push ghcr.io/estuary/${{ matrix.connector }}:$IMAGE_VERSION
