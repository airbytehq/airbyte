name: Airbyte CI

on:
  schedule:
    - cron: '0 */1 * * *'
  push:

jobs:
  ## Gradle Build
  # In case of self-hosted EC2 errors, remove this block.
  start-build-runner:
    name: Start Build EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Start EC2 Runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.SELF_RUNNER_GITHUB_ACCESS_TOKEN }}
          ec2-image-id: ami-04bd6e81239f4f3fb
          ec2-instance-type: c5.2xlarge
          subnet-id: subnet-0469a9e68a379c1d3
          security-group-id: sg-0793f3c9413f21970
  build:
    # In case of self-hosted EC2 errors, removed the `needs` line and switch back to running on ubuntu-latest.
    needs: start-build-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-build-runner.outputs.label }} # run the job on the newly created runner
    name: Build Airbyte
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v2

      - name: Check images exist
        run: ./tools/bin/check_images_exist.sh

      - name: Pip Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ secrets.CACHE_VERSION }}-pip-${{ runner.os }}-${{ hashFiles('**/setup.py') }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ secrets.CACHE_VERSION }}-pip-${{ runner.os }}-

      - name: Npm Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
          key: ${{ secrets.CACHE_VERSION }}-npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ secrets.CACHE_VERSION }}-npm-${{ runner.os }}-

      # this intentionally does not use restore-keys so we don't mess with gradle caching
      - name: Gradle and Python Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            **/.venv
          key: ${{ secrets.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/setup.py') }}-${{ hashFiles('**/requirements.txt') }}

      - uses: actions/setup-java@v1
        with:
          java-version: '14'

      - uses: actions/setup-node@v1
        with:
          node-version: '14.7'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install Pyenv
        run: python3 -m pip install virtualenv==16.7.9 --user

      - name: Generate Template scaffold
        run: ./gradlew :airbyte-integrations:connector-templates:generator:testScaffoldTemplates --scan

      - name: Format
        run: ./gradlew format --scan --info --stacktrace

      - name: Ensure no file change
        run: git status --porcelain && test -z "$(git status --porcelain)"

      - name: Build
        run: CORE_ONLY=true ./gradlew build --scan

      - name: Ensure no file change
        run: git status --porcelain && test -z "$(git status --porcelain)"

      - name: Check documentation
        if: success() && github.ref == 'refs/heads/master'
        run: ./tools/site/link_checker.sh check_docs

# This is only required on the usual github runner. The usual runner does not contain enough disk space for our use.
#      - name: Get Docker Space
#        run: docker run --rm busybox df -h

      - name: Build Core Docker Images
        if: success() && github.ref == 'refs/heads/master'
        run: ./gradlew composeBuild --scan
        env:
          GIT_REVISION: ${{ github.sha }}

      - name: Image Cleanup
        run: ./tools/bin/clean_images.sh

      - name: Run End-to-End Acceptance Tests
        run: ./tools/bin/acceptance_test.sh

      - name: Automatic Migration Acceptance Test
        run: MIGRATION_TEST_VERSION=$(grep VERSION .env | tr  -d "VERSION=") ./gradlew :airbyte-tests:automaticMigrationAcceptanceTest --scan

      - name: Slack Notification - Failure
        if: failure() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.BUILD_SLACK_WEBHOOK }}
          SLACK_USERNAME: Buildozer
          SLACK_ICON: https://avatars.slack-edge.com/temp/2020-09-01/1342729352468_209b10acd6ff13a649a1.jpg
          SLACK_COLOR: DC143C
          SLACK_TITLE: "Build failure"
          SLACK_FOOTER: ""

      - name: Slack Notification - Success
        if: success() && github.ref == 'refs/heads/master'
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.BUILD_SLACK_WEBHOOK }}
          SLACK_USERNAME: Buildbot
          SLACK_TITLE: "Build Success"
          SLACK_FOOTER: ""
  # In case of self-hosted EC2 errors, remove this block.
  stop-build-runner:
    name: Stop Build EC2 Runner
    needs:
      - start-build-runner # required to get output from the start-runner job
      - build # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.SELF_RUNNER_GITHUB_ACCESS_TOKEN }}
          label: ${{ needs.start-build-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-build-runner.outputs.ec2-instance-id }}

  ## Frontend Test
  ## Gradle Build
  # In case of self-hosted EC2 errors, remove this block.
  start-frontend-test-runner:
    name: Start Frontend Test EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Start EC2 Runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.SELF_RUNNER_GITHUB_ACCESS_TOKEN }}
          ec2-image-id: ami-04bd6e81239f4f3fb
          ec2-instance-type: c5.2xlarge
          subnet-id: subnet-0469a9e68a379c1d3
          security-group-id: sg-0793f3c9413f21970
  frontend-test:
    needs: start-frontend-test-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-frontend-test-runner.outputs.label }} # run the job on the newly created runner
    name: Run Frontend Test
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: '14'

      - uses: actions/setup-node@v1
        with:
          node-version: '14.7'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install Pyenv
        run: python3 -m pip install virtualenv==16.7.9 --user

      - name: Install Cypress Test Dependencies
        run: sudo apt-get update && sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Build Core Docker Images and Run Tests
        run: CORE_ONLY=true ./gradlew --no-daemon composeBuild --scan

      - name: Run End-to-End Frontend Tests
        run: ./tools/bin/e2e_test.sh
  # In case of self-hosted EC2 errors, remove this block.
  stop-frontend-test-runner:
    name: Stop Frontend Test EC2 Runner
    needs:
      - start-frontend-test-runner # required to get output from the start-runner job
      - frontend-test # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.SELF_RUNNER_GITHUB_ACCESS_TOKEN }}
          label: ${{ needs.start-frontend-test-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-frontend-test-runner.outputs.ec2-instance-id }}

  ## Kube Acceptance Tests
  # In case of self-hosted EC2 errors, remove this block.
  # Docker acceptance tests run as part of the build job.
  start-kube-acceptance-test-runner:
    name: Start Kube Acceptance Test EC2 Runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.SELF_RUNNER_GITHUB_ACCESS_TOKEN }}
          ec2-image-id: ami-04bd6e81239f4f3fb
          ec2-instance-type: c5.2xlarge
          subnet-id: subnet-0469a9e68a379c1d3
          security-group-id: sg-0793f3c9413f21970
  kube-acceptance-test:
    # In case of self-hosted EC2 errors, removed the `needs` line and switch back to running on ubuntu-latest.
    needs: start-kube-acceptance-test-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-kube-acceptance-test-runner.outputs.label }} # run the job on the newly created runner
    name: Acceptance Tests (Kube)
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: '14'

      - uses: actions/setup-node@v1
        with:
          node-version: '14.7'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install Pyenv
        run: python3 -m pip install virtualenv==16.7.9 --user

      - name: Fix EC-2 Runner
        run: |
          mkdir -p /home/runner

      - name: Install socat (required for port forwarding)
        run: |
          sudo apt-get update
          sudo apt-get install socat

      - name: KIND Kubernetes Cluster Setup
        uses: helm/kind-action@v1.1.0
        # In case of self-hosted EC2 errors, remove this env block.
        env:
          USER: root
          HOME: /home/runner
          CHANGE_MINIKUBE_NONE_USER: true

      - name: Build Core Docker Images and Run Tests
        run: CORE_ONLY=true ./gradlew --no-daemon composeBuild --scan

      - name: Run Logging Tests
        run: ./tools/bin/cloud_storage_logging_test.sh
        env:
          AWS_S3_INTEGRATION_TEST_CREDS: ${{ secrets.AWS_S3_INTEGRATION_TEST_CREDS }}
          GOOGLE_CLOUD_STORAGE_TEST_CREDS: ${{ secrets.GOOGLE_CLOUD_STORAGE_TEST_CREDS }}

      - name: Run Kubernetes End-to-End Acceptance Tests
        env:
          USER: root
          HOME: /home/runner
          AWS_S3_INTEGRATION_TEST_CREDS: ${{ secrets.AWS_S3_INTEGRATION_TEST_CREDS }}
        run: |
          IS_MINIKUBE=true ./tools/bin/acceptance_test_kube.sh
  # In case of self-hosted EC2 errors, remove this block.
  stop-kube-acceptance-test-runner:
    name: Stop Kube Acceptance Test EC2 Runner
    needs:
      - start-kube-acceptance-test-runner # required to get output from the start-runner job
      - kube-acceptance-test # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.SELF_RUNNER_GITHUB_ACCESS_TOKEN }}
          label: ${{ needs.start-kube-acceptance-test-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-kube-acceptance-test-runner.outputs.ec2-instance-id }}
