name: Airbyte CI

env:
  S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
  S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}

on:
  #ability to start task manually in Web UI
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"
  push:
    branches-ignore:
      - "gitbook/v1"

jobs:
  # COMMON TASKS
  ensure-images-exist:
    name: "Ensure all required Docker images exist on Dockerhub"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v3

      - name: Check images exist
        run: ./tools/bin/check_images_exist.sh all
  # The output of this job is used to trigger the following builds.
  changes:
    name: "Detect Modified Files"
    # The filtering action does not deal with well scheduled events so skip to avoid errors.
    # See https://github.com/dorny/paths-filter/issues/100 for more info.
    # This is okay this workflow is only scheduled on master, where we want to build everything
    # so filtering is not required. Use always() in each start block to force the start task.
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      build: ${{ steps.filter.outputs.build }}
      cli: ${{ steps.filter.outputs.cli }}
      connectors: ${{ steps.filter.outputs.connectors }}
      db: ${{ steps.filter.outputs.db }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          # Note, the following glob expression within a filters are ORs.
          filters: |
            backend:
              - 'airbyte-!(cdk|integrations|webapp|webapp-e2e-tests)/**'
              - 'airbyte-integrations/connectors/(destination-jdbc|destination-postgres|source-jdbc|source-postgres)/**'
              - 'airbyte-config/init/src/main/resources/seed/(source|destination)_definitions.yaml'
              - 'docker-compose*.yaml'
              - '(charts|kube)/**'
            build:
              - '.github/**'
              - 'buildSrc/**'
              - 'tools/**'
              - '*.gradle'
            cli:
              - 'airbyte-api/**'
              - 'octavia-cli/**'
            connectors:
              - 'airbyte-cdk/**'
              - 'airbyte-protocol/**'
              - 'airbyte-integrations/**'
              - 'airbyte-commons-worker/**'
            db:
              - 'airbyte-db/**'
            frontend:
              - 'airbyte-api/src/main/openapi/config.yaml'
              - 'airbyte-webapp/**'
              - 'airbyte-webapp-e2e-tests/**'
  find_valid_pat:
    name: "Find a PAT with room for actions"
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
      pat: ${{ steps.variables.outputs.pat }}
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v3
      - name: Check PAT rate limits
        id: variables
        run: |
          ./tools/bin/find_non_rate_limited_PAT \
            ${{ secrets.AIRBYTEIO_PAT }} \
            ${{ secrets.OSS_BUILD_RUNNER_GITHUB_PAT }} \
            ${{ secrets.SUPERTOPHER_PAT }} \
            ${{ secrets.DAVINCHIA_PAT }}

  # Uncomment to debug.
  #  changes-output:
  #    name: "Debug Change Detection Logic"
  #    needs: changes
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v3
  #      - run: |
  #          echo '${{ toJSON(needs) }}'

  ## BUILDS

  start-octavia-build-runner:
    name: "Octavia CLI Build: Start EC2 Runner"
    needs:
      - changes
      - find_valid_pat
    # Because scheduled builds on master require us to skip the changes job. Use always() to force this to run on master.
    if: needs.changes.outputs.cli == 'true' || needs.changes.outputs.build == 'true' || (always() && github.ref == 'refs/heads/master')
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v2
      - name: Start AWS Runner
        id: start-ec2-runner
        uses: ./.github/actions/start-aws-runner
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          github-token: ${{ needs.find_valid_pat.outputs.pat }}

  octavia-cli-build:
    needs: 
      - changes
      - start-octavia-build-runner # required to get output from the start-runner job
    runs-on: ${{ needs.start-octavia-build-runner.outputs.label }}
    # Because scheduled builds on master require us to skip the changes job. Use always() to force this to run on master.
    if: needs.changes.outputs.cli == 'true' || needs.changes.outputs.build == 'true' || (always() && github.ref == 'refs/heads/master')
    name: "Octavia CLI: Build"
    timeout-minutes: 90
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v3

      - name: Cache Build Artifacts
        uses: ./.github/actions/cache-build-artifacts
        with:
          cache-key: ${{ secrets.CACHE_VERSION }}
          cache-python: "false"

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Set up CI Gradle Properties
        run: |
          mkdir -p ~/.gradle/
          cat > ~/.gradle/gradle.properties <<EOF
          org.gradle.jvmargs=-Xmx8g -Xss4m \
            --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED \
            --add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED
          org.gradle.workers.max=8
          org.gradle.vfs.watch=false
          EOF

      - name: Format
        run: SUB_BUILD=OCTAVIA_CLI ./gradlew format --scan --info --stacktrace

      - name: Ensure no file change
        run: ./tools/bin/check_for_file_changes

      - name: Build
        run: |
          SUB_BUILD=OCTAVIA_CLI ./gradlew :octavia-cli:build javadoc --scan

      - name: Build Platform Docker Images
        run: SUB_BUILD=PLATFORM ./gradlew --no-daemon assemble --scan

      - name: Run integration tests
        run: ./tools/bin/integration_tests_octavia.sh

  stop-octavia-build-runner:
    name: "Octavia CLI Build: Stop EC2 Runner"
    timeout-minutes: 10
    needs:
      - find_valid_pat
      - start-octavia-build-runner # required to get output from the start-runner job
      - octavia-cli-build # required to wait when the main job is done
    runs-on: ubuntu-latest
    # Always is required to stop the runner even if the previous job has errors. However always() runs even if the previous step is skipped.
    # Thus, we check for skipped here.
    if: ${{ always() && needs.start-octavia-build-runner.result != 'skipped'}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.SELF_RUNNER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SELF_RUNNER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Stop EC2 runner
        uses: supertopher/ec2-github-runner@base64v1.0.10
        with:
          mode: stop
          github-token: ${{ needs.find_valid_pat.outputs.pat }}
          label: ${{ needs.start-octavia-build-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-octavia-build-runner.outputs.ec2-instance-id }}
