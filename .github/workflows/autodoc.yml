# Autodoc Workflow
#
# This workflow automatically triggers documentation updates for community-supported connectors
# when pull requests are merged to master. It uses Devin AI to review connector changes and
# update the corresponding user documentation to ensure it stays current with code changes.
#
# Workflow triggers:
# - Only on merged PRs to master branch
# - Excludes bot-authored PRs to prevent automation loops
# - Only processes community-supported connectors

name: Autodoc

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  update-connector-documentation:
    name: Update connector documentation with AI
    runs-on: ubuntu-latest
    # Only run for merged PRs from the same repo (not forks) and exclude bot authors
    if: |
      github.event.pull_request.merged == true && 
      github.event.pull_request.head.repo.full_name == github.repository &&
      !contains(fromJSON('["airbyteio", "octavia-bot", "octavia-bot-hoard", "github-actions[bot]", "dependabot[bot]"]'), github.event.pull_request.user.login) &&
      !endsWith(github.event.pull_request.user.login, '[bot]')

    steps:
      # Step 1: Get the merged PR code
      - name: Checkout merged PR code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0 # Full history needed for comprehensive analysis

      # Step 2: Analyze what files were changed in this PR
      - name: Fetch list of changed files from PR
        id: pr-files
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Fetching files changed in PR #${{ github.event.pull_request.number }}..."
          FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '[.[].filename] | @json')

          if [ -z "$FILES" ]; then
            echo "‚ùå Error: Failed to fetch or parse PR files."
            exit 1
          fi

          echo "‚úÖ Successfully fetched changed files list"
          echo "files=$FILES" >> $GITHUB_OUTPUT

      # Step 3: Install YAML parsing tool
      - name: Install YAML parser (yq)
        run: |
          echo "üì¶ Installing yq for metadata.yaml parsing..."
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.47.2/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          echo "‚úÖ yq v4.47.2 installed successfully"

      # Step 4: Determine if this PR affects a community-supported connector
      - name: Determine if connector is community-supported
        id: check-support-level
        run: |
          echo "üîç Checking if PR contains community-supported connector changes..."

          # Look for connector metadata files in the standard location
          METADATA_FILE=$(find . -path "*/airbyte-integrations/connectors/*/metadata.yaml" | head -n 1)

          if [ -z "$METADATA_FILE" ]; then
            echo "‚ÑπÔ∏è  No connector metadata.yaml file found - this PR doesn't affect connectors"
            echo "metadata_file=false" >> $GITHUB_OUTPUT
            echo "community_support=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse the support level from the metadata
          SUPPORT_LEVEL=$(yq '.data.supportLevel' "$METADATA_FILE")
          echo "üìã Found metadata file: $METADATA_FILE"
          echo "üìã Support level: $SUPPORT_LEVEL"

          if [ "$SUPPORT_LEVEL" != "community" ]; then
            echo "‚ÑπÔ∏è  This connector is not community-supported (level: $SUPPORT_LEVEL)"
            echo "metadata_file=true" >> $GITHUB_OUTPUT
            echo "community_support=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "‚úÖ Community-supported connector detected - documentation update needed"
          echo "metadata_file=true" >> $GITHUB_OUTPUT
          echo "community_support=true" >> $GITHUB_OUTPUT

      # Step 5: Skip documentation update for non-community connectors
      - name: Skip documentation update (not community connector)
        if: steps.check-support-level.outputs.metadata_file == 'false' || steps.check-support-level.outputs.community_support == 'false'
        run: |
          echo "‚è≠Ô∏è  Skipping documentation update:"
          echo "   - Metadata file found: ${{ steps.check-support-level.outputs.metadata_file }}"
          echo "   - Community support: ${{ steps.check-support-level.outputs.community_support }}"
          echo "   - Only community-supported connectors trigger automatic documentation updates"
          exit 0

      # Step 6: Trigger AI documentation update for community connectors
      - name: Start AI documentation update session
        if: steps.check-support-level.outputs.metadata_file == 'true' && steps.check-support-level.outputs.community_support == 'true'
        env:
          PROMPT_TEXT: "The pull request to review is ${{ github.event.pull_request.number }}"
        uses: aaronsteers/devin-action@0d74d6d9ff1b16ada5966dc31af53a9d155759f4 # Pinned to specific commit for security
        with:
          devin-token: ${{ secrets.DEVIN_AI_API_KEY }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          playbook-macro: "!connectordocs" # Use the connector documentation playbook
          prompt-text: ${{ env.PROMPT_TEXT }}
          tags: |
            area/documentation
            team/documentation
