import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'application'
}

dependencies {
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-workers')

    runtimeOnly 'io.micronaut:micronaut-http-server-netty:3.6.0'

    annotationProcessor platform(libs.micronaut.bom)
    annotationProcessor libs.bundles.micronaut.annotation.processor

    implementation platform(libs.micronaut.bom)
    implementation libs.bundles.micronaut
}

mainClassName = 'io.airbyte.cron.MicronautCronRunner'

application {
    mainClass = mainClassName
    applicationDefaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
}

task copyGeneratedTar(type: Copy) {
    dependsOn copyDocker
    dependsOn distTar

    from('build/distributions') {
        include 'airbyte-cron-*.tar'
    }
    into 'build/docker/bin'
}

Task dockerBuildTask = getDockerBuildTask("cron", "$project.projectDir", "$rootProject.ext.version", "$rootProject.ext.image_tag")
dockerBuildTask.dependsOn(copyGeneratedTar)
assemble.dependsOn(dockerBuildTask)

@SuppressWarnings('GroovyAssignabilityCheck')
def Task getDockerBuildTask(String artifactName, String projectDir, String buildVersion, String buildTag) {
    return task ("buildDockerImage-$artifactName"(type: DockerBuildImage, group: "$projectDir") {
        // This is currently only used for connectors.
        def jdkVersion = System.getenv('JDK_VERSION') ?: '17.0.1'

        def arch = System.getenv('BUILD_ARCH') ?: System.getProperty("os.arch").toLowerCase()
        def isArm64 = arch == "aarch64" || arch == "arm64"

        def buildPlatform = System.getenv('DOCKER_BUILD_PLATFORM') ?: isArm64 ? 'linux/arm64' : 'linux/amd64'
        def alpineImage = System.getenv('ALPINE_IMAGE') ?: isArm64 ? 'arm64v8/alpine:3.14' : 'amd64/alpine:3.14'
        def nginxImage = System.getenv('NGINX_IMAGE') ?: isArm64 ? 'arm64v8/nginx:alpine' : 'amd64/nginx:alpine'
        def openjdkImage = System.getenv('JDK_IMAGE') ?: isArm64 ? "arm64v8/openjdk:19-slim-bullseye" : "amd64/openjdk:19-slim-bullseye"
        def buildArch = System.getenv('DOCKER_BUILD_ARCH') ?: isArm64 ? 'arm64' : 'amd64'

        inputDir = file("$projectDir/build/docker")
        platform = buildPlatform
        images.add("airbyte/$artifactName:$buildTag")
        buildArgs.put('JDK_VERSION', jdkVersion)
        buildArgs.put('DOCKER_BUILD_ARCH', buildArch)
        buildArgs.put('ALPINE_IMAGE', alpineImage)
        buildArgs.put('NGINX_IMAGE', nginxImage)
        buildArgs.put('JDK_IMAGE', openjdkImage)
        buildArgs.put('VERSION', buildVersion)
    })
}
