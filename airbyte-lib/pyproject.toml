[tool.poetry]
name = "airbyte-lib"
description = "AirbyteLib"
version = "0.1.0"
authors = ["Airbyte <contact@airbyte.io>"]
readme = "README.md"
packages = [{include = "airbyte_lib"}]

[tool.poetry.dependencies]
python = "^3.9"

airbyte-cdk = "^0.58.3"
# airbyte-protocol-models = "^1.0.1"  # Conflicts with airbyte-cdk # TODO: delete or resolve
jsonschema = "3.2.0"
orjson = "^3.9.10"
overrides = "^7.4.0"
pandas = "^2.1.4"
psycopg = {extras = ["binary", "pool"], version = "^3.1.16"}
python-ulid = "^2.2.0"
types-pyyaml = "^6.0.12.12"
ulid = "^1.1"
sqlalchemy = "1.4.51"
snowflake-connector-python = "3.6.0"
snowflake-sqlalchemy = "^1.5.1"
duckdb-engine = "^0.10.0"
requests = "^2.31.0"
pyarrow = "^14.0.2"
psycopg2 = "^2.9.9"

[tool.poetry.group.dev.dependencies]
docker = "^7.0.0"
faker = "^21.0.0"
mypy = "^1.7.1"
pandas-stubs = "^2.1.4.231218"
pdoc = "^14.3.0"
pyarrow-stubs = "^10.0.1.7"
pytest = "^7.4.3"
pytest-docker = "^2.0.1"
pytest-mypy = "^0.10.3"
pytest-postgresql = "^5.0.0"
ruff = "^0.1.11"
types-jsonschema = "^4.20.0.0"
google-cloud-secret-manager = "^2.17.0"
types-requests = "2.31.0.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# addopts = "--mypy"  # FIXME: This sometimes blocks test discovery and execution

[tool.ruff.pylint]
max-args = 8  # Relaxed from default of 5

[tool.ruff]
target-version = "py39"
select = [
    # For rules reference, see https://docs.astral.sh/ruff/rules/
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "FBT", # flake8-boolean-trap
    "BLE", # Blind except
    "C4", # flake8-comprehensions
    "C90", # mccabe (complexity)
    "COM", # flake8-commas
    "CPY", # missing copyright notice
    # "D", # pydocstyle # TODO: Re-enable when adding docstrings
    "DTZ", # flake8-datetimez
    "E", # pycodestyle (errors)
    "ERA", # flake8-eradicate (commented out code)
    "EXE", # flake8-executable
    "F", # Pyflakes
    "FA", # flake8-future-annotations
    "FIX", # flake8-fixme
    "FLY", # flynt
    "FURB", # Refurb
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "INT", # flake8-gettext
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "N", # pep8-naming
    "PD", # pandas-vet
    "PERF", # Perflint
    "PIE", # flake8-pie
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "T10", # debugger calls
    # "T20", # flake8-print # TODO: Re-enable once we have logging
    "TCH", # flake8-type-checking
    "TD", # flake8-todos
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP", # pyupgrade
    "W", # pycodestyle (warnings)
    "YTT" # flake8-2020
]
ignore = [
    # For rules reference, see https://docs.astral.sh/ruff/rules/

    # These we don't agree with or don't want to prioritize to enforce:
    "ANN003",  # kwargs missing type annotations
    "ANN101",  # Type annotations for 'self' args
    "COM812", # Because it conflicts with ruff auto-format
    "EM", # flake8-errmsgs (may reconsider later)
    "DJ", # Django linting
    "G", # flake8-logging-format
    "ISC001", # Conflicts with ruff auto-format
    "NPY", # NumPy-specific rules
    "PIE790", # Allow unnecssary 'pass' (sometimes useful for readability)
    "PERF203",  # exception handling in loop
    "S", # flake8-bandit (noisy, security related)
    "TD002", # Require author for TODOs
    "TRIO", # flake8-trio (opinionated, noisy)
    "TRY003",  # Exceptions with too-long string descriptions  # TODO: re-evaluate once we have our own exception classes
    "INP001", # Dir 'examples' is part of an implicit namespace package. Add an __init__.py.

    # TODO: Consider re-enabling these before release:
    "A003", # Class attribute 'type' is shadowing a Python builtin
    "BLE001", # Do not catch blind exception: Exception
    "ERA001", # Remove commented-out code
    "FIX002", # Allow "TODO:" until release (then switch to requiring links via TDO003)
    "PLW0603", # Using the global statement to update _cache is discouraged
    "TD003", # Require links for TODOs # TODO: Re-enable when we disable FIX002
    "TRY002", # TODO: When we have time to tackle exception management ("Create your own exception")
]
fixable = ["ALL"]
unfixable = [
    "ERA001", # Commented-out code (avoid silent loss of code)
    "T201" # print() calls (avoid silent loss of code / log messages)
]
line-length = 100
extend-exclude = ["docs", "test", "tests"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.isort]
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = ["airbyte_cdk", "airbyte_protocol"]
known-local-folder = ["airbyte_lib"]
known-third-party = []
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.mccabe]
max-complexity = 24

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
preview = false
docstring-code-format = true

[tool.mypy]
# Platform configuration
python_version = "3.9"
# imports related
ignore_missing_imports = true
follow_imports = "silent"
# None and Optional handling
no_implicit_optional = true
strict_optional = true
# Configuring warnings
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_return_any = false
# Untyped definitions and calls
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
# Disallow dynamic typing
disallow_subclassing_any = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
# Miscellaneous strictness flags
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
# Configuring error messages
show_error_context = false
show_column_numbers = false
show_error_codes = true
exclude = ["docs", "test", "tests"]

[[tool.mypy.overrides]]
module = [
    "airbyte_protocol",
    "airbyte_protocol.models"
]
ignore_missing_imports = true  # No stubs yet (ðŸ˜¢)

[tool.poetry.scripts]
generate-docs = "docs:run"
airbyte-lib-validate-source = "airbyte_lib.validate:run"
