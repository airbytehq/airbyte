{
  "openapi": "3.1.0",
  "info": {
    "title": "Sonar",
    "summary": "Airbyte's API retrieves data on behalf of your customers and feeds it to your agentic workflows.",
    "description": "\nThe API contains 3 types of endpoints:\n- `/api/v1/embedded`: end-user-facing API to collect credentials.\n- `/api/v1/sonar`: operator endpoints to fetch data from end-user data sources (apis & drives) with their configured credentials.\n- `/api/v1/integrations`: all the operator endpoints to manage configurations.\n\nIt is recommended to specify the following header in all your http requests:\n```yaml\nX-Organization-Id: organization's uuid\n```\nIt will ensure that the right organization is used for all the requests in case your user is a member of multiple organizations.\nIf you only have one organization, it will default to that one, otherwise the call will fail.\n",
    "version": "0.9.0",
    "x-logo": {
      "url": "https://cdn.prod.website-files.com/605e01bc25f7e19a82e74788/6335a39da8c96ba75520b156_Logo.svg"
    }
  },
  "servers": [
    {
      "url": "http://localhost",
      "description": "Airbyte Sonar API"
    }
  ],
  "paths": {
    "/api/v1/embedded/source-templates": {
      "post": {
        "tags": ["Embedded"],
        "summary": "List Source Templates",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nList all the available sources that the end users can connect to.",
        "operationId": "deprecated_list_embedded_source_templates",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Embedded"],
        "summary": "List Source Templates",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nList all the available sources that the end users can connect to.",
        "operationId": "list_embedded_source_templates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/source-templates/{id}": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Source Template",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nRetrieves all the details to display to the end users to configure their source.",
        "operationId": "get_embedded_source_templates_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Create Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nCreates a new source with the provided end user credentials and configurations.\nConfig should be validated before this endpoint is called.",
        "operationId": "create_embedded_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Embedded"],
        "summary": "List Sources",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nList all the sources the end user configured.",
        "operationId": "list_embedded_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list sources for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list sources for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources/check": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Run Check Config Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nTriggers a check for the setup of a new source with the provided end user credentials and configurations.",
        "operationId": "create_embedded_sources_check",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCheckConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources/check/{id}/status": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Status Check Config Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nReview the status of a check.",
        "operationId": "get_embedded_sources_check_id_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources/{id}": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nGet the details for the source the end user configured.",
        "operationId": "get_embedded_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Embedded"],
        "summary": "Update Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nUpdate an existing source with the provided end user credentials and configurations.\nConfig should be validated before this endpoint is called.",
        "operationId": "update_embedded_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Embedded"],
        "summary": "Delete Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nDelete an existing end user source.",
        "operationId": "delete_embedded_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/widget-token": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Create Widget Token",
        "description": "**Requires an Access Token as the bearer token.**\n\nGenerate a new widget token.\n\nYou can safely pass it to your front-end application to instantiate a widget instance.",
        "operationId": "create_embedded_widget_token",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetTokenCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetTokenCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/scoped-token": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Create Scoped Token",
        "description": "**Requires an Access Token as the bearer token.**\n\nGenerate a new scoped token.\n\nYou can safely share it with your end users and it will allow them to manage their configured sources.",
        "operationId": "create_embedded_scoped_token",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopedTokenCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/organizations/current-scoped": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Scoped Token Info",
        "description": "Get the organization and workspace id for a scoped token.",
        "operationId": "deprecated_get_embedded_organizations_current_scoped",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenInfoGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/scoped-token/info": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Scoped Token Info",
        "description": "Get the organization and workspace id for a scoped token.",
        "operationId": "get_embedded_scoped_token_info",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenInfoGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/scoped-token-info": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Scoped Token Info",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nReturn metadata about a scoped token (workspace, organization...).",
        "operationId": "deprecated_get_embedded_scoped_token_info",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenInfoGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/apis/{source_id}/request": {
      "post": {
        "tags": ["Sonar - APIs"],
        "summary": "Request",
        "description": "**Requires an Access Token as the bearer token.**\n\nMake a request to an API using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "create_sonar_apis_source_id_request",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The source ID to forward the request to.",
              "title": "Source Id"
            },
            "description": "The source ID to forward the request to."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationProxyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationProxyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/apis": {
      "get": {
        "tags": ["Sonar - APIs"],
        "summary": "List Sources",
        "description": "**Requires an Access Token as the bearer token.**\n\nDeprecated. Use `/api/v1/integrations/sources` instead.",
        "operationId": "deprecated_get_sonar_apis",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "description": "The maximum number of sources to return.",
              "default": 10,
              "title": "Limit"
            },
            "description": "The maximum number of sources to return."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "An opaque string with encoded pagination metadata.",
              "title": "Cursor"
            },
            "description": "An opaque string with encoded pagination metadata."
          },
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list sources for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list sources for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApisAvailableSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/list/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Files With Prefix",
        "description": "**Requires an Access Token as the bearer token.**\n\nList files at the specified path in a File Management System (Google Drive, S3...) using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "list_sonar_files_source_id_list_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to list files",
              "title": "Source Id"
            },
            "description": "source_id for which to list files"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Optional prefix to filter files",
              "title": "Path"
            },
            "description": "Optional prefix to filter files"
          },
          {
            "name": "continuation_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token for pagination",
              "title": "Continuation Token"
            },
            "description": "Token for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit for pagination",
              "default": 100,
              "title": "Limit"
            },
            "description": "Limit for pagination"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSourcesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/drives/{drive_id}/list/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Drive Files With Prefix",
        "description": "**Requires an Access Token as the bearer token.**\n\nList Drive files at the specified path in a File Management System (like Sharepoint underneath drives) using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "list_sonar_files_source_id_drives_drive_id_list_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get file",
              "title": "Source Id"
            },
            "description": "source_id for which to get file"
          },
          {
            "name": "drive_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "drive_id for which to get file",
              "title": "Drive Id"
            },
            "description": "drive_id for which to get file"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Optional path to folder within the drive",
              "title": "Path"
            },
            "description": "Optional path to folder within the drive"
          },
          {
            "name": "continuation_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token for pagination",
              "title": "Continuation Token"
            },
            "description": "Token for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit for pagination",
              "default": 100,
              "title": "Limit"
            },
            "description": "Limit for pagination"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSourcesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/get/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "Stream File",
        "description": "**Requires an Access Token as the bearer token.**\n\nRetrieve the file content at the specified path using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "get_sonar_files_source_id_get_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get file",
              "title": "Source Id"
            },
            "description": "source_id for which to get file"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Path to the file to get",
              "title": "Path"
            },
            "description": "Path to the file to get"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/drives/{drive_id}/get/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "Drive Stream File",
        "description": "**Requires an Access Token as the bearer token.**\n\nRetrieve the file content at the specified path in a drive using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "get_sonar_files_source_id_drives_drive_id_get_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get file",
              "title": "Source Id"
            },
            "description": "source_id for which to get file"
          },
          {
            "name": "drive_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "drive_id for which to get file",
              "title": "Drive Id"
            },
            "description": "drive_id for which to get file"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Path to the file to get",
              "title": "Path"
            },
            "description": "Path to the file to get"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/sources": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Sources",
        "description": "**Requires an Access Token as the bearer token.**\n\nDeprecated. Use `/api/v1/integrations/sources` instead.",
        "operationId": "get_sonar_files_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list files for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list files for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAvailableSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/drives": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Drives",
        "description": "**Requires an Access Token as the bearer token.**\n\nRetrieve the list of drives available using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "get_sonar_files_source_id_drives",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get the drives",
              "title": "Source Id"
            },
            "description": "source_id for which to get the drives"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDrivesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/workspaces": {
      "get": {
        "tags": ["Tool Wrappers - Workspaces"],
        "summary": "List Workspaces",
        "operationId": "list_tools_workspaces",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name_contains",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The name of the workspaces to list.",
              "title": "Name Contains"
            },
            "description": "The name of the workspaces to list."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The maximum number of workspaces to return.",
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of workspaces to return."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "An opaque string with encoded pagination metadata.",
              "title": "Cursor"
            },
            "description": "An opaque string with encoded pagination metadata."
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The organization ID to list workspaces for.",
              "title": "Organization Id"
            },
            "description": "The organization ID to list workspaces for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/destinations": {
      "post": {
        "tags": ["Tool Wrappers - Destinations"],
        "summary": "Tools Create Destination",
        "operationId": "create_tools_destinations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralDestinationCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralDestinationCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/destinations/{id}": {
      "patch": {
        "tags": ["Tool Wrappers - Destinations"],
        "summary": "Tools Update Destination",
        "operationId": "update_tools_destinations_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralDestinationUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralDestinationUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/sources": {
      "post": {
        "tags": ["Tool Wrappers - Sources"],
        "summary": "Tools Create Source",
        "operationId": "create_tools_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralSourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralSourceCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/sources/{id}": {
      "patch": {
        "tags": ["Tool Wrappers - Sources"],
        "summary": "Tools Update Source",
        "operationId": "update_tools_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralSourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralSourceUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/destinations/{id}": {
      "get": {
        "tags": ["Destinations Definitions"],
        "summary": "Get Destination Definition",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination connector specification.",
        "operationId": "get_integrations_definitions_destinations_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/destinations": {
      "get": {
        "tags": ["Destinations Definitions"],
        "summary": "List Destination Definitions",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination connector specification.",
        "operationId": "list_integrations_definitions_destinations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "actorDefinitionIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Filter by actor definition IDs (use repeated parameters: ?actorDefinitionIds=id1&actorDefinitionIds=id2)",
              "default": [],
              "title": "Actordefinitionids"
            },
            "description": "Filter by actor definition IDs (use repeated parameters: ?actorDefinitionIds=id1&actorDefinitionIds=id2)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationDefinitionsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources/{id}": {
      "get": {
        "tags": ["Sources Definitions"],
        "summary": "Get Source Definition",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source connector specification.",
        "operationId": "get_integrations_definitions_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources/{id}/catalog": {
      "post": {
        "tags": ["Sources Definitions"],
        "summary": "Create Source Definition Catalog",
        "description": "**Requires an Instance Admin Token as the bearer token.**\n\nCreate a catalog for a source connector specification.",
        "operationId": "create_integrations_definitions_sources_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceDefinitionCatalogCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Sources Definitions"],
        "summary": "Delete Source Definition Catalog",
        "description": "**Requires an Instance Admin Token as the bearer token.**\n\nDelete a catalog for a source connector specification.",
        "operationId": "delete_integrations_definitions_sources_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Sources Definitions"],
        "summary": "Get Source Definition Catalog",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source connector specification catalog.",
        "operationId": "get_integrations_definitions_sources_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/destinations": {
      "get": {
        "tags": ["Destinations"],
        "summary": "List Destinations",
        "description": "**Requires an Access Token as the bearer token.**\n\nList destinations.",
        "operationId": "list_integrations_destinations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The maximum number of destinations to return.",
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of destinations to return."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "An opaque string with encoded pagination metadata.",
              "title": "Cursor"
            },
            "description": "An opaque string with encoded pagination metadata."
          },
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list destinations for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list destinations for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/destinations/{id}": {
      "get": {
        "tags": ["Destinations"],
        "summary": "Get Destination",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination.",
        "operationId": "get_integrations_destinations_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources": {
      "post": {
        "tags": ["Sources"],
        "summary": "Create Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate an end user's configured source, config should be validated before.",
        "operationId": "create_integrations_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Sources"],
        "summary": "List Sources",
        "description": "**Requires an Access Token as the bearer token.**\n\nList end user's configured sources.",
        "operationId": "list_integrations_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list sources for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list sources for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}": {
      "get": {
        "tags": ["Sources"],
        "summary": "Get Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet an end user's configured source.",
        "operationId": "get_integrations_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Sources"],
        "summary": "Update Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate an end user's configured source, config should be validated before.",
        "operationId": "update_integrations_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Sources"],
        "summary": "Delete Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete an end user's configured source.",
        "operationId": "delete_integrations_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/check": {
      "post": {
        "tags": ["Sources"],
        "summary": "Run Check Config Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a source configuration check.",
        "operationId": "create_integrations_sources_check",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCheckConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/check/{id}/status": {
      "get": {
        "tags": ["Sources"],
        "summary": "Status Check Config Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source configuration check status.",
        "operationId": "get_integrations_sources_check_id_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}/discover": {
      "get": {
        "tags": ["Sources"],
        "summary": "Get Source Catalog",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source connector streams with fields.",
        "operationId": "get_integrations_sources_id_discover",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDiscoverResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections/{id}": {
      "get": {
        "tags": ["Template Connections"],
        "summary": "Get Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a connection template.",
        "operationId": "get_integrations_templates_connections_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Template Connections"],
        "summary": "Delete Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete a connection template.",
        "operationId": "delete_integrations_templates_connections_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Template Connections"],
        "summary": "Patch Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate a connection template.",
        "operationId": "update_integrations_templates_connections_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionTemplatePatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections": {
      "get": {
        "tags": ["Template Connections"],
        "summary": "List Connection Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nList connection templates.",
        "operationId": "list_integrations_templates_connections",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Template Connections"],
        "summary": "Create Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a connection template.",
        "operationId": "create_integrations_templates_connections",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionTemplateCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections/{id}/tag": {
      "post": {
        "tags": ["Template Connections"],
        "summary": "Tag Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nTag a connection template.",
        "operationId": "create_integrations_templates_connections_id_tag",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionTemplateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateTagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/tags": {
      "post": {
        "tags": ["Template Tags"],
        "summary": "Create Template Tag",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a tag.",
        "operationId": "create_integrations_templates_tags",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateTagCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Template Tags"],
        "summary": "List Template Tags",
        "description": "**Requires an Access Token as the bearer token.**\n\nList tags.",
        "operationId": "list_integrations_templates_tags",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/tags/{name}": {
      "put": {
        "tags": ["Template Tags"],
        "summary": "Update Template Tag",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate a tag.",
        "operationId": "update_integrations_templates_tags_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateTagUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Template Tags"],
        "summary": "Delete Template Tag",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete a tag.",
        "operationId": "delete_integrations_templates_tags_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Organization Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources": {
      "post": {
        "tags": ["Template Sources"],
        "summary": "Create Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a source_template.\n\nEnd users can complete this template to create a source connector.",
        "operationId": "create_integrations_templates_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SourceTemplateCreateRequest"
                  },
                  {
                    "$ref": "#/components/schemas/SourceTemplateCloneRequest"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Template Sources"],
        "summary": "List Source Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nList source templates.",
        "operationId": "list_integrations_templates_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources/{id}": {
      "patch": {
        "tags": ["Template Sources"],
        "summary": "Update Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate a source template.",
        "operationId": "update_integrations_templates_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceTemplateUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Template Sources"],
        "summary": "Get Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source template.",
        "operationId": "get_integrations_templates_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Template Sources"],
        "summary": "Delete Source Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete a source template.",
        "operationId": "delete_integrations_templates_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources/global": {
      "get": {
        "tags": ["Template Sources"],
        "summary": "List Global Source Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nList global a source template.\n\nGlobal templates are visible to all organizations and are maintained by Airbyte. You can clone them to create a local template.",
        "operationId": "list_integrations_templates_sources_global",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources/{id}/tag": {
      "post": {
        "tags": ["Template Sources"],
        "summary": "Tag Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nTag a source template.",
        "operationId": "create_integrations_templates_sources_id_tag",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceTemplateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateTagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/health/check": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "operationId": "get_internal_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations": {
      "get": {
        "tags": ["Organizations"],
        "summary": "List Organizations",
        "operationId": "list_internal_account_organizations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{id}/onboarding-progress": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Update Organization Onboarding Progress",
        "description": "Update the onboarding progress for an organization.",
        "operationId": "create_internal_account_organizations_id_onboarding_progress",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingProgressUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingProgressUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/applications": {
      "post": {
        "tags": ["Applications"],
        "summary": "Get Or Create Application",
        "operationId": "create_internal_account_applications",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/applications/token": {
      "post": {
        "tags": ["Applications"],
        "summary": "Generate Application Token",
        "operationId": "create_internal_account_applications_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/mcp/registration": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Oauth Registration",
        "operationId": "create_internal_oauth_mcp_registration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/mcp/code": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Oauth Code",
        "operationId": "create_internal_oauth_mcp_code",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/mcp/token": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Oauth Token",
        "operationId": "create_internal_oauth_mcp_token",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/sources/get_embedded_consent_url": {
      "post": {
        "tags": ["OAuth - Sources"],
        "summary": "Get Embedded Consent Url",
        "operationId": "create_internal_oauth_sources_get_embedded_consent_url",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEmbeddedSourceConsentUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmbeddedSourceConsentUrlResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/sources/complete": {
      "post": {
        "tags": ["OAuth - Sources"],
        "summary": "Complete Oauth",
        "operationId": "create_internal_oauth_sources_complete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSourceOauthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteSourceOauthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/sources/revoke": {
      "post": {
        "tags": ["OAuth - Sources"],
        "summary": "Revoke Source Oauth",
        "operationId": "create_internal_oauth_sources_revoke",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeSourceOauthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeSourceOauthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdvancedAuth": {
        "properties": {
          "auth_flow_type": {
            "type": "string",
            "title": "Auth Flow Type"
          },
          "predicate_key": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Predicate Key"
          },
          "predicate_value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Predicate Value"
          },
          "oauth_config_specification": {
            "$ref": "#/components/schemas/OAuthConfigSpecification"
          }
        },
        "type": "object",
        "required": ["auth_flow_type", "oauth_config_specification"],
        "title": "AdvancedAuth"
      },
      "ApiError": {
        "properties": {
          "field": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          }
        },
        "type": "object",
        "title": "ApiError"
      },
      "ApiErrorResponse": {
        "properties": {
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "type": "array",
            "title": "Errors",
            "default": []
          }
        },
        "type": "object",
        "title": "ApiErrorResponse"
      },
      "ApisAvailableSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          }
        },
        "type": "object",
        "required": ["id", "workspace_id", "source_type"],
        "title": "ApisAvailableSource"
      },
      "ApisAvailableSourcesResponse": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/ApisAvailableSource"
            },
            "type": "array",
            "title": "Sources"
          }
        },
        "type": "object",
        "required": ["sources"],
        "title": "ApisAvailableSourcesResponse"
      },
      "Application": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": ["id", "name", "client_id", "client_secret", "created_at"],
        "title": "Application"
      },
      "AuthenticationProxyRequest": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body"
          }
        },
        "type": "object",
        "required": ["url", "method"],
        "title": "AuthenticationProxyRequest"
      },
      "AuthenticationProxyResponse": {
        "properties": {
          "response_status_code": {
            "type": "integer",
            "title": "Response Status Code"
          },
          "response_body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Body"
          }
        },
        "type": "object",
        "required": ["response_status_code", "response_body"],
        "title": "AuthenticationProxyResponse"
      },
      "CheckStatus": {
        "type": "string",
        "enum": ["pending", "running", "cancelled", "failed", "succeeded"],
        "title": "CheckStatus"
      },
      "CompleteSourceOauthRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "redirect_url": {
            "type": "string",
            "title": "Redirect Url",
            "description": " When completing OAuth flow to gain an access token, some API sometimes requires to verify that the app re-send the redirectUrl that was used when consent was given"
          },
          "query_params": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query Params"
          },
          "o_auth_input_configuration": {
            "additionalProperties": true,
            "type": "object",
            "title": "O Auth Input Configuration",
            "description": "Required by the underlying API, but ignored in an embedded context."
          },
          "return_secret_coordinate": {
            "type": "boolean",
            "title": "Return Secret Coordinate",
            "description": "If set to true, returns a secret coordinate which references the stored tokens. By default, returns raw tokens.",
            "default": false
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id"
          }
        },
        "type": "object",
        "required": [
          "workspace_id",
          "source_definition_id",
          "redirect_url",
          "o_auth_input_configuration"
        ],
        "title": "CompleteSourceOauthRequest"
      },
      "CompleteSourceOauthResponse": {
        "properties": {
          "request_succeeded": {
            "type": "boolean",
            "title": "Request Succeeded"
          },
          "auth_payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Auth Payload"
          },
          "request_error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Error"
          }
        },
        "type": "object",
        "required": ["request_succeeded", "auth_payload"],
        "title": "CompleteSourceOauthResponse"
      },
      "ConnectionSpecification": {
        "properties": {
          "required": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Required"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object",
            "title": "Properties"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "$schema": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "$Schema"
          }
        },
        "type": "object",
        "required": ["properties", "type"],
        "title": "ConnectionSpecification"
      },
      "ConnectionTemplate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplate"
      },
      "ConnectionTemplateCreateRequest": {
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "The organization for which to create the template."
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id",
            "description": "The id of the destination definition (type of destination connector) to use for the connection."
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config",
            "description": "The configuration for the destination connector. Must match the destination definition."
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression",
            "description": "A valid Quartz cron expression describing the schedule for the connection."
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "description": "The action Airbyte should take when breaking changes are made to a source schema.",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "description": "Whether to start a sync job when the connection is created.",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateCreateRequest"
      },
      "ConnectionTemplateCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateCreateResponse"
      },
      "ConnectionTemplateDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "ConnectionTemplateDeleteResponse"
      },
      "ConnectionTemplateGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateGetResponse"
      },
      "ConnectionTemplateListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ConnectionTemplate"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ConnectionTemplateListResponse"
      },
      "ConnectionTemplatePatchRequest": {
        "properties": {
          "destination_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination Name"
          },
          "destination_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination Config"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NonBreakingChangesPreference"
              },
              {
                "type": "null"
              }
            ]
          },
          "sync_on_create": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync On Create"
          }
        },
        "type": "object",
        "title": "ConnectionTemplatePatchRequest"
      },
      "ConnectionTemplateTagRequest": {
        "properties": {
          "tag": {
            "type": "string",
            "title": "Tag"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": ["tag", "organization_id"],
        "title": "ConnectionTemplateTagRequest"
      },
      "ConnectionTemplateTagResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateTagResponse"
      },
      "ConnectorDefinition": {
        "properties": {
          "sourceDefinitionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sourcedefinitionid"
          },
          "destinationDefinitionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destinationdefinitionid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "iconUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iconurl"
          }
        },
        "type": "object",
        "required": ["name", "spec"],
        "title": "ConnectorDefinition"
      },
      "ConnectorSpecification": {
        "properties": {
          "documentationUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documentationurl"
          },
          "connectionSpecification": {
            "$ref": "#/components/schemas/ConnectionSpecification"
          },
          "supportsNormalization": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supportsnormalization"
          },
          "supportsDBT": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supportsdbt"
          },
          "advanced_auth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdvancedAuth"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["connectionSpecification"],
        "title": "ConnectorSpecification"
      },
      "CoralDestinationCreateRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          }
        },
        "type": "object",
        "required": [
          "workspace_id",
          "name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "CoralDestinationCreateRequest"
      },
      "CoralDestinationCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type",
          "destination_config",
          "created_at"
        ],
        "title": "CoralDestinationCreateResponse"
      },
      "CoralDestinationUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "configuration": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configuration"
          }
        },
        "type": "object",
        "title": "CoralDestinationUpdateRequest"
      },
      "CoralDestinationUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type",
          "destination_config",
          "created_at"
        ],
        "title": "CoralDestinationUpdateResponse"
      },
      "CoralSourceCreateRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          }
        },
        "type": "object",
        "required": [
          "workspace_id",
          "name",
          "source_definition_id",
          "source_config"
        ],
        "title": "CoralSourceCreateRequest"
      },
      "CoralSourceCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "source_config",
          "source_type",
          "created_at"
        ],
        "title": "CoralSourceCreateResponse"
      },
      "CoralSourceUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "source_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Config"
          }
        },
        "type": "object",
        "title": "CoralSourceUpdateRequest"
      },
      "CoralSourceUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "source_config",
          "source_type",
          "created_at"
        ],
        "title": "CoralSourceUpdateResponse"
      },
      "DestinationDefinitionListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "type": "string",
            "title": "Icon"
          }
        },
        "type": "object",
        "required": ["id", "name", "icon"],
        "title": "DestinationDefinitionListItem"
      },
      "DestinationDefinitionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "definition": {
            "$ref": "#/components/schemas/ConnectorDefinition"
          }
        },
        "type": "object",
        "required": ["id", "definition"],
        "title": "DestinationDefinitionResponse"
      },
      "DestinationDefinitionsListResponse": {
        "properties": {
          "destinations": {
            "items": {
              "$ref": "#/components/schemas/DestinationDefinitionListItem"
            },
            "type": "array",
            "title": "Destinations"
          }
        },
        "type": "object",
        "required": ["destinations"],
        "title": "DestinationDefinitionsListResponse"
      },
      "DestinationGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type",
          "destination_config",
          "created_at"
        ],
        "title": "DestinationGetResponse"
      },
      "DestinationListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type"
        ],
        "title": "DestinationListItem"
      },
      "DestinationListResponse": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DestinationListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "DestinationListResponse"
      },
      "DetailedSourceTemplate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "DetailedSourceTemplate"
      },
      "FieldTag": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "tag": {
            "type": "string",
            "title": "Tag"
          }
        },
        "type": "object",
        "required": ["field_name", "tag"],
        "title": "FieldTag"
      },
      "FileEntity": {
        "type": "string",
        "enum": ["file", "folder"],
        "title": "FileEntity"
      },
      "FilesAvailableSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          }
        },
        "type": "object",
        "required": ["id", "workspace_id", "source_type"],
        "title": "FilesAvailableSource"
      },
      "FilesAvailableSourcesResponse": {
        "properties": {
          "sources": {
            "items": {
              "$ref": "#/components/schemas/FilesAvailableSource"
            },
            "type": "array",
            "title": "Sources"
          }
        },
        "type": "object",
        "required": ["sources"],
        "title": "FilesAvailableSourcesResponse"
      },
      "FilesSourceListItem": {
        "properties": {
          "bytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bytes"
          },
          "relative_path": {
            "type": "string",
            "title": "Relative Path"
          },
          "modified": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified"
          },
          "source_url": {
            "type": "string",
            "title": "Source Url"
          },
          "type": {
            "$ref": "#/components/schemas/FileEntity"
          }
        },
        "type": "object",
        "required": [
          "bytes",
          "relative_path",
          "modified",
          "source_url",
          "type"
        ],
        "title": "FilesSourceListItem"
      },
      "FilesSourcesListResponse": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/FilesSourceListItem"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "FilesSourcesListResponse"
      },
      "ForeignKey": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "referenced_stream_name": {
            "type": "string",
            "title": "Referenced Stream Name"
          },
          "referenced_field_name": {
            "type": "string",
            "title": "Referenced Field Name"
          }
        },
        "type": "object",
        "required": [
          "field_name",
          "referenced_stream_name",
          "referenced_field_name"
        ],
        "title": "ForeignKey"
      },
      "GetDriveItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": ["id", "name", "url"],
        "title": "GetDriveItem"
      },
      "GetDrivesResponse": {
        "properties": {
          "drives": {
            "items": {
              "$ref": "#/components/schemas/GetDriveItem"
            },
            "type": "array",
            "title": "Drives"
          }
        },
        "type": "object",
        "required": ["drives"],
        "title": "GetDrivesResponse"
      },
      "GetEmbeddedSourceConsentUrlRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "redirect_url": {
            "type": "string",
            "title": "Redirect Url",
            "description": "The url to redirect to after getting the user consent"
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_definition_id", "redirect_url"],
        "title": "GetEmbeddedSourceConsentUrlRequest"
      },
      "GetEmbeddedSourceConsentUrlResponse": {
        "properties": {
          "consent_url": {
            "type": "string",
            "title": "Consent Url"
          }
        },
        "type": "object",
        "required": ["consent_url"],
        "title": "GetEmbeddedSourceConsentUrlResponse"
      },
      "HealthCheckGetResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "queue_information": {
            "$ref": "#/components/schemas/QueueInformation"
          }
        },
        "type": "object",
        "required": ["success", "queue_information"],
        "title": "HealthCheckGetResponse"
      },
      "HttpMethod": {
        "type": "string",
        "enum": ["GET", "POST", "PUT", "DELETE"],
        "title": "HttpMethod"
      },
      "NonBreakingChangesPreference": {
        "type": "string",
        "enum": ["ignore", "disable", "propagate_columns", "propagate_fully"],
        "title": "NonBreakingChangesPreference"
      },
      "OAuthConfigSpecification": {
        "properties": {
          "oauth_user_input_from_connector_config_specification": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Oauth User Input From Connector Config Specification"
          },
          "oauth_connector_input_specification": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Oauth Connector Input Specification"
          },
          "complete_oauth_output_specification": {
            "additionalProperties": true,
            "type": "object",
            "title": "Complete Oauth Output Specification",
            "default": {}
          },
          "complete_oauth_server_input_specification": {
            "additionalProperties": true,
            "type": "object",
            "title": "Complete Oauth Server Input Specification",
            "default": {}
          },
          "complete_oauth_server_output_specification": {
            "additionalProperties": true,
            "type": "object",
            "title": "Complete Oauth Server Output Specification",
            "default": {}
          }
        },
        "type": "object",
        "title": "OAuthConfigSpecification"
      },
      "OauthCodeRequest": {
        "properties": {
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "airbyte_client_id": {
            "type": "string",
            "title": "Airbyte Client Id"
          },
          "airbyte_client_secret": {
            "type": "string",
            "title": "Airbyte Client Secret"
          },
          "redirect_uri": {
            "type": "string",
            "title": "Redirect Uri"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "state": {
            "type": "string",
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "airbyte_client_id",
          "airbyte_client_secret",
          "redirect_uri",
          "scope",
          "state"
        ],
        "title": "OauthCodeRequest"
      },
      "OauthCodeResponse": {
        "properties": {
          "redirect_uri": {
            "type": "string",
            "title": "Redirect Uri"
          }
        },
        "type": "object",
        "required": ["redirect_uri"],
        "title": "OauthCodeResponse"
      },
      "OauthRegistrationRequest": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "client_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Name"
          },
          "grant_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Grant Types"
          },
          "response_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Response Types"
          },
          "token_endpoint_auth_method": {
            "type": "string",
            "title": "Token Endpoint Auth Method"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          }
        },
        "type": "object",
        "required": [
          "redirect_uris",
          "grant_types",
          "response_types",
          "token_endpoint_auth_method",
          "scope"
        ],
        "title": "OauthRegistrationRequest"
      },
      "OauthRegistrationResponse": {
        "properties": {
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "grant_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Grant Types"
          },
          "response_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Response Types"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "client_secret",
          "redirect_uris",
          "grant_types",
          "response_types",
          "scope"
        ],
        "title": "OauthRegistrationResponse"
      },
      "OauthTokenRequest": {
        "properties": {
          "grant_type": {
            "type": "string",
            "title": "Grant Type"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "redirect_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Uri"
          }
        },
        "type": "object",
        "required": ["grant_type", "client_id", "client_secret"],
        "title": "OauthTokenRequest"
      },
      "OauthTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"],
        "title": "OauthTokenResponse"
      },
      "OnboardingProgressUpdateRequest": {
        "properties": {
          "onboarding_status": {
            "$ref": "#/components/schemas/OnboardingStatusEnum"
          }
        },
        "type": "object",
        "required": ["onboarding_status"],
        "title": "OnboardingProgressUpdateRequest"
      },
      "OnboardingProgressUpdateResponse": {
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "onboarding_progress": {
            "$ref": "#/components/schemas/OnboardingStatusEnum"
          }
        },
        "type": "object",
        "required": ["organization_id", "onboarding_progress"],
        "title": "OnboardingProgressUpdateResponse"
      },
      "OnboardingStatusEnum": {
        "type": "string",
        "enum": [
          "NOT_STARTED",
          "DESTINATION_SETUP_COMPLETE",
          "EMBED_CODE_COPIED",
          "COMPLETED"
        ],
        "title": "OnboardingStatusEnum"
      },
      "Organization": {
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "organization_name": {
            "type": "string",
            "title": "Organization Name"
          },
          "first_workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "First Workspace Id"
          },
          "onboarding_status": {
            "$ref": "#/components/schemas/OnboardingStatusEnum"
          }
        },
        "type": "object",
        "required": [
          "organization_id",
          "organization_name",
          "first_workspace_id",
          "onboarding_status"
        ],
        "title": "Organization"
      },
      "OrganizationsListResponse": {
        "properties": {
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array",
            "title": "Organizations"
          }
        },
        "type": "object",
        "required": ["organizations"],
        "title": "OrganizationsListResponse"
      },
      "QueueInformation": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "scheduled_count": {
            "type": "integer",
            "title": "Scheduled Count"
          },
          "pending_count": {
            "type": "integer",
            "title": "Pending Count"
          }
        },
        "type": "object",
        "required": ["total", "scheduled_count", "pending_count"],
        "title": "QueueInformation"
      },
      "RevokeSourceOauthRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Id"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_definition_id", "source_id"],
        "title": "RevokeSourceOauthRequest"
      },
      "RevokeSourceOauthResponse": {
        "properties": {},
        "type": "object",
        "title": "RevokeSourceOauthResponse"
      },
      "ScopedTokenCreateRequest": {
        "properties": {
          "workspace_name": {
            "type": "string",
            "title": "Workspace Name",
            "description": "The name of the workspace to create or use."
          },
          "region_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region Id",
            "description": "The region in which to create the workspace. If not provided, the default US region will be used."
          }
        },
        "type": "object",
        "required": ["workspace_name"],
        "title": "ScopedTokenCreateRequest"
      },
      "ScopedTokenCreateResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": ["token"],
        "title": "ScopedTokenCreateResponse"
      },
      "ScopedTokenInfoGetResponse": {
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          }
        },
        "type": "object",
        "required": ["organization_id", "workspace_id"],
        "title": "ScopedTokenInfoGetResponse"
      },
      "SonarCatalogInput": {
        "properties": {
          "streams": {
            "items": {
              "$ref": "#/components/schemas/SonarStream"
            },
            "type": "array",
            "title": "Streams"
          }
        },
        "type": "object",
        "title": "SonarCatalogInput"
      },
      "SonarCatalogOutput": {
        "properties": {
          "streams": {
            "items": {
              "$ref": "#/components/schemas/SonarStream"
            },
            "type": "array",
            "title": "Streams"
          }
        },
        "type": "object",
        "title": "SonarCatalogOutput"
      },
      "SonarStream": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "suggested": {
            "type": "boolean",
            "title": "Suggested",
            "default": false
          },
          "cursor_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor Fields"
          },
          "primary_key_fields": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Primary Key Fields"
          },
          "pii_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pii Fields"
          },
          "immutable_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Immutable Fields"
          },
          "field_tags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FieldTag"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field Tags"
          },
          "parent_streams": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ForeignKey"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Streams"
          },
          "child_streams": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ForeignKey"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Child Streams"
          },
          "json_schema": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Json Schema"
          }
        },
        "type": "object",
        "title": "SonarStream"
      },
      "SourceCheckConfigRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the source."
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id",
            "description": "The workspace in which to create the source."
          },
          "source_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Template Id",
            "description": "The id of the source template to create the source from."
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config",
            "description": "The configuration for the source not already provided by the defaults in the source template (eg, credentials, bucket names). Must match the source template's User Config Spec."
          },
          "selected_connection_template_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Selected Connection Template Tags",
            "description": "Optional list of tags to filter which connection templates will be used for this source. "
          },
          "selected_connection_template_tags_mode": {
            "$ref": "#/components/schemas/TagSelectionMode",
            "description": "Tag selection mode for connection templates: 'all' (must have all tags) or 'any' (must have at least one tag). Defaults to 'any'.",
            "default": "any"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_template_id", "source_config"],
        "title": "SourceCheckConfigRequest"
      },
      "SourceCheckConfigResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "SourceCheckConfigResponse"
      },
      "SourceCheckConfigStatusResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/CheckStatus"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": ["id", "status"],
        "title": "SourceCheckConfigStatusResponse"
      },
      "SourceCreateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the source."
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id",
            "description": "The workspace in which to create the source."
          },
          "source_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Template Id",
            "description": "The id of the source template to create the source from."
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config",
            "description": "The configuration for the source not already provided by the defaults in the source template (eg, credentials, bucket names). Must match the source template's User Config Spec."
          },
          "selected_connection_template_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Selected Connection Template Tags",
            "description": "Optional list of tags to filter which connection templates will be used for this source. "
          },
          "selected_connection_template_tags_mode": {
            "$ref": "#/components/schemas/TagSelectionMode",
            "description": "Tag selection mode for connection templates: 'all' (must have all tags) or 'any' (must have at least one tag). Defaults to 'any'.",
            "default": "any"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_template_id", "source_config"],
        "title": "SourceCreateRequest"
      },
      "SourceCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_template": {
            "$ref": "#/components/schemas/DetailedSourceTemplate"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_template", "source_config"],
        "title": "SourceCreateResponse"
      },
      "SourceDefinitionCatalogCreateRequest": {
        "properties": {
          "sonar_catalog": {
            "$ref": "#/components/schemas/SonarCatalogInput"
          }
        },
        "type": "object",
        "required": ["sonar_catalog"],
        "title": "SourceDefinitionCatalogCreateRequest"
      },
      "SourceDefinitionCatalogCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "SourceDefinitionCatalogCreateResponse"
      },
      "SourceDefinitionCatalogDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "SourceDefinitionCatalogDeleteResponse"
      },
      "SourceDefinitionCatalogGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "sonar_catalog": {
            "$ref": "#/components/schemas/SonarCatalogOutput"
          }
        },
        "type": "object",
        "required": ["id", "name", "sonar_catalog"],
        "title": "SourceDefinitionCatalogGetResponse"
      },
      "SourceDefinitionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "definition": {
            "$ref": "#/components/schemas/ConnectorDefinition"
          }
        },
        "type": "object",
        "required": ["id", "definition"],
        "title": "SourceDefinitionResponse"
      },
      "SourceDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "SourceDeleteResponse"
      },
      "SourceDiscoverResponse": {
        "properties": {
          "source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Id"
          },
          "sonar_catalog": {
            "$ref": "#/components/schemas/SonarCatalogOutput"
          }
        },
        "type": "object",
        "required": ["source_id", "sonar_catalog"],
        "title": "SourceDiscoverResponse"
      },
      "SourceGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_template": {
            "$ref": "#/components/schemas/DetailedSourceTemplate"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_template", "source_config"],
        "title": "SourceGetResponse"
      },
      "SourceListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "summarized_source_template": {
            "$ref": "#/components/schemas/SummarizedSourceTemplate"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "summarized_source_template"],
        "title": "SourceListItem"
      },
      "SourceListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SourceListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "SourceListResponse"
      },
      "SourceTemplateCloneRequest": {
        "properties": {
          "original_source_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Original Source Template Id",
            "description": "ID of the source template to clone"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Optional name for the cloned template. If not provided, uses the original template's name"
          }
        },
        "type": "object",
        "required": ["original_source_template_id"],
        "title": "SourceTemplateCloneRequest",
        "description": "Request to clone an existing source template"
      },
      "SourceTemplateCreateRequest": {
        "properties": {
          "organization_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "actor_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Actor Definition Id"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config",
            "description": "A template configuration containing default values for all those fields that the end user will *not* provide. Personalized fields like resource names or secrets should not be provided here."
          }
        },
        "type": "object",
        "required": ["actor_definition_id", "partial_default_config"],
        "title": "SourceTemplateCreateRequest"
      },
      "SourceTemplateCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateCreateResponse"
      },
      "SourceTemplateDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "SourceTemplateDeleteResponse"
      },
      "SourceTemplateGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateGetResponse"
      },
      "SourceTemplateListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "icon"],
        "title": "SourceTemplateListItem"
      },
      "SourceTemplateListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SourceTemplateListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "SourceTemplateListResponse"
      },
      "SourceTemplateTagRequest": {
        "properties": {
          "tag": {
            "type": "string",
            "title": "Tag"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": ["tag", "organization_id"],
        "title": "SourceTemplateTagRequest"
      },
      "SourceTemplateTagResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateTagResponse"
      },
      "SourceTemplateUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "propagate": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Propagate",
            "default": false
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config",
            "description": "A template configuration containing default values for all those fields that the end user will *not* provide. Personalized fields like resource names or secrets should not be provided here."
          }
        },
        "type": "object",
        "required": ["partial_default_config"],
        "title": "SourceTemplateUpdateRequest"
      },
      "SourceTemplateUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateUpdateResponse"
      },
      "SourceUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "source_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Config"
          }
        },
        "type": "object",
        "title": "SourceUpdateRequest"
      },
      "SourceUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_template": {
            "$ref": "#/components/schemas/DetailedSourceTemplate"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_template", "source_config"],
        "title": "SourceUpdateResponse"
      },
      "SummarizedSourceTemplate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "icon"],
        "title": "SummarizedSourceTemplate"
      },
      "TagSelectionMode": {
        "type": "string",
        "enum": ["all", "any"],
        "title": "TagSelectionMode"
      },
      "TemplateTagCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": ["name", "organization_id"],
        "title": "TemplateTagCreateRequest"
      },
      "TemplateTagCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "organization_id"],
        "title": "TemplateTagCreateResponse"
      },
      "TemplateTagDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "TemplateTagDeleteResponse"
      },
      "TemplateTagListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "organization_id"],
        "title": "TemplateTagListItem"
      },
      "TemplateTagListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TemplateTagListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "TemplateTagListResponse"
      },
      "TemplateTagUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          }
        },
        "type": "object",
        "required": ["name", "organization_id"],
        "title": "TemplateTagUpdateRequest"
      },
      "TemplateTagUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "organization_id"],
        "title": "TemplateTagUpdateResponse"
      },
      "TokenRequest": {
        "properties": {
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": ["client_id", "client_secret"],
        "title": "TokenRequest"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          }
        },
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"],
        "title": "TokenResponse"
      },
      "WidgetTokenCreateRequest": {
        "properties": {
          "workspace_name": {
            "type": "string",
            "title": "Workspace Name",
            "description": "The name of the workspace to create or use."
          },
          "region_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region Id",
            "description": "The region in which to create the workspace. If not provided, the default US region will be used."
          },
          "allowed_origin": {
            "type": "string",
            "title": "Allowed Origin",
            "description": "The allowed origin for the widget."
          }
        },
        "type": "object",
        "required": ["workspace_name", "allowed_origin"],
        "title": "WidgetTokenCreateRequest"
      },
      "WidgetTokenCreateResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": ["token"],
        "title": "WidgetTokenCreateResponse"
      },
      "WorkspaceListItem": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["workspace_id", "name"],
        "title": "WorkspaceListItem"
      },
      "WorkspaceListResponse": {
        "properties": {
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceListItem"
            },
            "type": "array",
            "title": "Workspaces"
          },
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next"
          }
        },
        "type": "object",
        "required": ["workspaces"],
        "title": "WorkspaceListResponse"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Embedded",
      "description": "All the endpoints necessary to retrieve credentials for your end users."
    },
    {
      "name": "Sonar - APIs",
      "description": "Operator endpoints to access end user's API sources without requiring credentials."
    },
    {
      "name": "Sonar - Files",
      "description": "Operator endpoints to access end user's file sources (GDrive, Sharepoint, S3...) without requiring credentials"
    },
    {
      "name": "Sources",
      "description": "Operator endpoints to list all the configured sources."
    },
    {
      "name": "Template Connections",
      "description": "Operator endpoints to configure default connections setup."
    },
    {
      "name": "Template Sources",
      "description": "Operator endpoints to configure default source setup."
    }
  ]
}
