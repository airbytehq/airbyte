{
  "openapi": "3.1.0",
  "info": {
    "title": "Sonar",
    "summary": "Airbyte's API retrieves data on behalf of your customers and feeds it to your agentic workflows.",
    "description": "\nThe API contains 3 types of endpoints:\n- `/api/v1/embedded`: end-user-facing API to collect credentials.\n- `/api/v1/sonar`: operator endpoints to fetch data from end-user data sources (apis & drives) with their configured credentials.\n- `/api/v1/integrations`: all the operator endpoints to manage configurations.\n\nIt is recommended to specify the following header in all your http requests:\n```yaml\nX-Organization-Id: organization's uuid\n```\nIt will ensure that the right organization is used for all the requests in case your user is a member of multiple organizations.\nIf you only have one organization, it will default to that one, otherwise the call will fail.\n",
    "version": "0.9.0",
    "x-logo": {
      "url": "https://cdn.prod.website-files.com/605e01bc25f7e19a82e74788/6335a39da8c96ba75520b156_Logo.svg"
    }
  },
  "servers": [
    {
      "url": "http://localhost",
      "description": "Airbyte Sonar API"
    }
  ],
  "paths": {
    "/api/v1/account/applications/token": {
      "post": {
        "tags": ["Applications"],
        "summary": "Generate Application Token",
        "description": "Generate an application access token using client credentials. This endpoint is intentionally unauthenticated - authentication is performed via client_id and client_secret in the request body.",
        "operationId": "create_account_applications_token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/chat": {
      "post": {
        "tags": ["Agents - Chat"],
        "summary": "Post chat message",
        "description": "Post a new message to a thread",
        "operationId": "create_agents_chat",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageEvent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/chat/history/{thread_id}": {
      "get": {
        "tags": ["Agents - Chat History"],
        "summary": "Chat history by thread ID",
        "description": "Get the full chat history for an existing thread",
        "operationId": "get_agents_chat_history_thread_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/chat/schema/definitions/sources/{source_definition_id}": {
      "post": {
        "tags": ["Agents - Schema Definitions"],
        "summary": "Create Definition Chat",
        "operationId": "create_agents_chat_schema_definitions_sources_source_definition_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/chat/schema/definitions/sources/{source_definition_id}/state": {
      "get": {
        "tags": ["Agents - Schema Definitions"],
        "summary": "Get Schema Chat State",
        "operationId": "get_agents_chat_schema_definitions_sources_source_definition_id_state",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaChatAgentState"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/chat/schema/{source_id}": {
      "post": {
        "tags": ["Chat - Schema"],
        "summary": "Post Schema Chat",
        "operationId": "create_agents_chat_schema_source_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageEvent"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessageEvent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/chat/schema/{source_id}/state": {
      "get": {
        "tags": ["Chat - Schema"],
        "summary": "Get Schema Chat State",
        "operationId": "get_agents_chat_schema_source_id_state",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaChatAgentState"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/discovery": {
      "post": {
        "tags": ["Agents - Discovery"],
        "summary": "Create Discovery Agents",
        "description": "Create discovery agent jobs for all source definitions tagged with 'discovery-agent'\nthat don't have existing catalogs.",
        "operationId": "create_agents_discovery",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "annotate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to annotate the discovered catalogs using the catalog annotator agent",
              "default": false,
              "title": "Annotate"
            },
            "description": "Whether to annotate the discovered catalogs using the catalog annotator agent"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryAgentCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/agents/discovery/{source_definition_id}": {
      "post": {
        "tags": ["Agents - Discovery"],
        "summary": "Create Discovery Agent",
        "description": "Trigger discovery job for a specific source definition.\n\nThis endpoint will:\n1. Verify a source template with \"discovery-agent\" tag exists for this source definition\n2. Delete any existing catalog to force re-discovery\n3. Schedule a new discovery job\n\nThis enables re-running discovery for sources that need catalog updates.\n\nArgs:\n    source_definition_id: The source definition ID to run discovery for\n\nReturns:\n    DiscoveryAgentCreateResponse with a single job created\n\nRaises:\n    HTTPException 404: Source template not found or not tagged with \"discovery-agent\"",
        "operationId": "create_agents_discovery_source_definition_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "annotate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to annotate the discovered catalog using the catalog annotator agent",
              "default": false,
              "title": "Annotate"
            },
            "description": "Whether to annotate the discovered catalog using the catalog annotator agent"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryAgentCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/organizations/current-scoped": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Scoped Token Info",
        "description": "Get the organization and workspace id for a scoped token.",
        "operationId": "deprecated_get_embedded_organizations_current_scoped",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenInfoGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/scoped-token": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Create Scoped Token",
        "description": "**Requires an Access Token as the bearer token.**\n\nGenerate a new scoped token.\n\nYou can safely share it with your end users and it will allow them to manage their configured sources.",
        "operationId": "create_embedded_scoped_token",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopedTokenCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/scoped-token-info": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Scoped Token Info",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nReturn metadata about a scoped token (workspace, organization...).",
        "operationId": "deprecated_get_embedded_scoped_token_info",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenInfoGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/scoped-token/info": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Scoped Token Info",
        "description": "Get the organization and workspace id for a scoped token.",
        "operationId": "get_embedded_scoped_token_info",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopedTokenInfoGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/source-templates": {
      "post": {
        "tags": ["Embedded"],
        "summary": "List Source Templates",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nList all the available sources that the end users can connect to.",
        "operationId": "deprecated_list_embedded_source_templates",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Embedded"],
        "summary": "List Source Templates",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nList all the available sources that the end users can connect to.",
        "operationId": "list_embedded_source_templates",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/source-templates/{id}": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Source Template",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nRetrieves all the details to display to the end users to configure their source.",
        "operationId": "get_embedded_source_templates_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Create Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nCreates a new source with the provided end user credentials and configurations.\nConfig should be validated before this endpoint is called.",
        "operationId": "create_embedded_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Embedded"],
        "summary": "List Sources",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nList all the sources the end user configured.",
        "operationId": "list_embedded_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list sources for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list sources for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources/check": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Run Check Config Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nTriggers a check for the setup of a new source with the provided end user credentials and configurations.",
        "operationId": "create_embedded_sources_check",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCheckConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources/check/{id}/status": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Status Check Config Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nReview the status of a check.",
        "operationId": "get_embedded_sources_check_id_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/sources/{id}": {
      "get": {
        "tags": ["Embedded"],
        "summary": "Get Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nGet the details for the source the end user configured.",
        "operationId": "get_embedded_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Embedded"],
        "summary": "Update Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nUpdate an existing source with the provided end user credentials and configurations.\nConfig should be validated before this endpoint is called.",
        "operationId": "update_embedded_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Embedded"],
        "summary": "Delete Source",
        "description": "**Requires a Scoped Token as the bearer token.**\n\nDelete an existing end user source.",
        "operationId": "delete_embedded_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/embedded/widget-token": {
      "post": {
        "tags": ["Embedded"],
        "summary": "Create Widget Token",
        "description": "**Requires an Access Token as the bearer token.**\n\nGenerate a new widget token.\n\nYou can safely pass it to your front-end application to instantiate a widget instance.",
        "operationId": "create_embedded_widget_token",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetTokenCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetTokenCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/destinations": {
      "get": {
        "tags": ["Destinations Definitions"],
        "summary": "List Destination Definitions",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination connector specification.",
        "operationId": "list_integrations_definitions_destinations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "actorDefinitionIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Filter by actor definition IDs (use repeated parameters: ?actorDefinitionIds=id1&actorDefinitionIds=id2)",
              "default": [],
              "title": "Actordefinitionids"
            },
            "description": "Filter by actor definition IDs (use repeated parameters: ?actorDefinitionIds=id1&actorDefinitionIds=id2)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationDefinitionsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/destinations/{id}": {
      "get": {
        "tags": ["Destinations Definitions"],
        "summary": "Get Destination Definition",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination connector specification.",
        "operationId": "get_integrations_definitions_destinations_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources": {
      "get": {
        "tags": ["Sources Definitions"],
        "summary": "Source Definitions Get",
        "description": "**Requires an Access Token as the bearer token.**\n\nList source connector specifications.",
        "operationId": "list_integrations_definitions_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter source definitions by name (case-insensitive partial match)",
              "title": "Name"
            },
            "description": "Filter source definitions by name (case-insensitive partial match)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources/{id}": {
      "get": {
        "tags": ["Sources Definitions"],
        "summary": "Source Definition Get",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source connector specification.",
        "operationId": "get_integrations_definitions_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources/{source_definition_id}/catalog": {
      "post": {
        "tags": ["Sources Definitions"],
        "summary": "Source Definition Catalog Create",
        "description": "**Requires an Instance Admin Token as the bearer token.**\n\nCreate a catalog for a source connector specification.",
        "operationId": "create_integrations_definitions_sources_source_definition_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceDefinitionCatalogCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Sources Definitions"],
        "summary": "Delete Source Definition Catalog",
        "description": "**Requires an Instance Admin Token as the bearer token.**\n\nDelete a catalog for a source connector specification.",
        "operationId": "delete_integrations_definitions_sources_source_definition_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Sources Definitions"],
        "summary": "Get Source Definition Catalog",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source connector specification catalog.",
        "operationId": "get_integrations_definitions_sources_source_definition_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "selected",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true, only return streams listed in the catalog's selected_streams field.",
              "default": false,
              "title": "Selected"
            },
            "description": "If true, only return streams listed in the catalog's selected_streams field."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Sources Definitions"],
        "summary": "Patch Source Definition Catalog",
        "description": "Patch the source definition's catalog. This allows updating global configurations such as selected streams.",
        "operationId": "update_integrations_definitions_sources_source_definition_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceDefinitionCatalogPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogPatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources/{source_definition_id}/catalog/query": {
      "post": {
        "tags": ["Sources Definitions"],
        "summary": "Query Source Definition Catalog",
        "description": "Query the source definition's catalog using a JMESPath expression.",
        "operationId": "create_integrations_definitions_sources_source_definition_id_catalog_query",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceDefinitionCatalogQueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionCatalogQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources/{source_definition_id}/streams": {
      "post": {
        "tags": ["Sources Definitions"],
        "summary": "Create Source Definition Catalog Stream",
        "description": "Add a new stream to the source definition's catalog.",
        "operationId": "create_integrations_definitions_sources_source_definition_id_streams",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceDefinitionStreamCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionStreamCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/definitions/sources/{source_definition_id}/streams/{stream_name}": {
      "patch": {
        "tags": ["Sources Definitions"],
        "summary": "Patch Source Definition Catalog Stream",
        "description": "Patch a specific stream in the source definition's catalog. This allows updating stream configurations such as sync modes and cursor fields.",
        "operationId": "update_integrations_definitions_sources_source_definition_id_streams_stream_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "stream_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stream Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceDefinitionStreamPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionStreamPatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Sources Definitions"],
        "summary": "Delete Source Definition Catalog Stream",
        "description": "**Requires an Instance Admin Token as the bearer token.**\n\nDelete a catalog for a source connector specification.",
        "operationId": "delete_integrations_definitions_sources_source_definition_id_streams_stream_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_definition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Source Definition Id"
            }
          },
          {
            "name": "stream_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stream Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDefinitionStreamDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/destinations": {
      "get": {
        "tags": ["Destinations"],
        "summary": "List Destinations",
        "description": "**Requires an Access Token as the bearer token.**\n\nList destinations.",
        "operationId": "list_integrations_destinations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "The maximum number of destinations to return.",
              "default": 20,
              "title": "Limit"
            },
            "description": "The maximum number of destinations to return."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "An opaque string with encoded pagination metadata.",
              "title": "Cursor"
            },
            "description": "An opaque string with encoded pagination metadata."
          },
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list destinations for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list destinations for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/destinations/{id}": {
      "get": {
        "tags": ["Destinations"],
        "summary": "Get Destination",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination.",
        "operationId": "get_integrations_destinations_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources": {
      "post": {
        "tags": ["Sources"],
        "summary": "Create Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate an end user's configured source, config should be validated before.",
        "operationId": "create_integrations_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Sources"],
        "summary": "List Sources",
        "description": "**Requires an Access Token as the bearer token.**\n\nList end user's configured sources.",
        "operationId": "list_integrations_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list sources for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list sources for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/check": {
      "post": {
        "tags": ["Sources"],
        "summary": "Run Check Config Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a source configuration check.",
        "operationId": "create_integrations_sources_check",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCheckConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/check/{id}/status": {
      "get": {
        "tags": ["Sources"],
        "summary": "Status Check Config Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source configuration check status.",
        "operationId": "get_integrations_sources_check_id_status",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCheckConfigStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}": {
      "get": {
        "tags": ["Sources"],
        "summary": "Get Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet an end user's configured source.",
        "operationId": "get_integrations_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Sources"],
        "summary": "Update Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate an end user's configured source, config should be validated before.",
        "operationId": "update_integrations_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Sources"],
        "summary": "Delete Source",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete an end user's configured source.",
        "operationId": "delete_integrations_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}/catalog": {
      "patch": {
        "tags": ["Sources"],
        "summary": "Patch Source Catalog",
        "description": "Patch the source's cached catalog. This allows updating global configurations such as selected streams.",
        "operationId": "update_integrations_sources_id_catalog",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceStreamPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCatalogPatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}/catalog/query": {
      "post": {
        "tags": ["Sources"],
        "summary": "Query Source Catalog",
        "description": "Query the cached source catalog using JMESPath. Returns 404 if catalog not in cache.",
        "operationId": "create_integrations_sources_id_catalog_query",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCatalogQueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceCatalogQueryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}/discover": {
      "get": {
        "tags": ["Sources"],
        "summary": "Get Source Catalog",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source connector streams with fields.",
        "operationId": "get_integrations_sources_id_discover",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "use_cache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to use the cached catalog if available. Defaults to true. If false, results will not be cached.",
              "default": true,
              "title": "Use Cache"
            },
            "description": "Whether to use the cached catalog if available. Defaults to true. If false, results will not be cached."
          },
          {
            "name": "selected",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to only return streams marked as selected in the catalog.",
              "default": false,
              "title": "Selected"
            },
            "description": "Whether to only return streams marked as selected in the catalog."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceDiscoverResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}/streams": {
      "post": {
        "tags": ["Sources"],
        "summary": "Add Source Stream",
        "description": "Add a new stream to the source's cached catalog.",
        "operationId": "create_integrations_sources_id_streams",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceStreamCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceStreamCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/sources/{id}/streams/{stream_name}": {
      "patch": {
        "tags": ["Sources"],
        "summary": "Patch Source Stream",
        "description": "Patch a specific stream in the source's cached catalog. This allows updating stream configurations such as sync modes and cursor fields.",
        "operationId": "update_integrations_sources_id_streams_stream_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "stream_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stream Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceStreamPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceStreamPatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Sources"],
        "summary": "Delete Source Stream",
        "description": "Delete a specific stream from the source's cached catalog.",
        "operationId": "delete_integrations_sources_id_streams_stream_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "stream_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stream Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceStreamDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections": {
      "get": {
        "tags": ["Template Connections"],
        "summary": "List Connection Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nList connection templates.",
        "operationId": "list_integrations_templates_connections",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Template Connections"],
        "summary": "Create Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a connection template.",
        "operationId": "create_integrations_templates_connections",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionTemplateCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections/cron/describe": {
      "post": {
        "tags": ["Template Connections"],
        "summary": "Describe Cron Expression",
        "description": "**Requires an Access Token as the bearer token.**\n\nValidate and describe a Quartz cron expression. Returns a human-readable description of when the schedule will run.",
        "operationId": "create_integrations_templates_connections_cron_describe",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CronExpressionDescribeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CronExpressionDescribeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections/{id}": {
      "get": {
        "tags": ["Template Connections"],
        "summary": "Get Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a connection template.",
        "operationId": "get_integrations_templates_connections_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Template Connections"],
        "summary": "Delete Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete a connection template.",
        "operationId": "delete_integrations_templates_connections_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Template Connections"],
        "summary": "Patch Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate a connection template.",
        "operationId": "update_integrations_templates_connections_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionTemplatePatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections/{id}/tags": {
      "post": {
        "tags": ["Template Connections"],
        "summary": "Tag Connection Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nTag a connection template.",
        "operationId": "create_integrations_templates_connections_id_tags",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionTemplateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateTagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/connections/{id}/tags/{tag_name}": {
      "delete": {
        "tags": ["Template Connections"],
        "summary": "Untag Connection Template",
        "description": "Remove a tag from a connection template",
        "operationId": "delete_integrations_templates_connections_id_tags_tag_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionTemplateUntagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources": {
      "post": {
        "tags": ["Template Sources"],
        "summary": "Create Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a source_template.\n\nEnd users can complete this template to create a source connector.",
        "operationId": "create_integrations_templates_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SourceTemplateCreateRequest"
                  },
                  {
                    "$ref": "#/components/schemas/SourceTemplateCloneRequest"
                  }
                ],
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Template Sources"],
        "summary": "List Source Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nList source templates.",
        "operationId": "list_integrations_templates_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter templates by tags.",
              "default": [],
              "title": "Tags"
            },
            "description": "Filter templates by tags."
          },
          {
            "name": "tags_mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/TagSelectionMode",
              "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)",
              "default": "all"
            },
            "description": "Tag selection mode: 'all' (must have all tags) or 'any' (must have at least one tag)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources/global": {
      "get": {
        "tags": ["Template Sources"],
        "summary": "List Global Source Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nList global a source template.\n\nGlobal templates are visible to all organizations and are maintained by Airbyte. You can clone them to create a local template.",
        "operationId": "list_integrations_templates_sources_global",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources/{id}": {
      "patch": {
        "tags": ["Template Sources"],
        "summary": "Update Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate a source template.",
        "operationId": "update_integrations_templates_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceTemplateUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Template Sources"],
        "summary": "Get Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a source template.",
        "operationId": "get_integrations_templates_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Template Sources"],
        "summary": "Delete Source Templates",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete a source template.",
        "operationId": "delete_integrations_templates_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources/{id}/tags": {
      "post": {
        "tags": ["Template Sources"],
        "summary": "Tag Source Template",
        "description": "**Requires an Access Token as the bearer token.**\n\nTag a source template.",
        "operationId": "create_integrations_templates_sources_id_tags",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceTemplateTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateTagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/sources/{id}/tags/{tag_name}": {
      "delete": {
        "tags": ["Template Sources"],
        "summary": "Untag Source Template",
        "description": "Remove a tag from a source template",
        "operationId": "delete_integrations_templates_sources_id_tags_tag_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "tag_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tag Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceTemplateUntagResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/tags": {
      "post": {
        "tags": ["Template Tags"],
        "summary": "Create Template Tag",
        "description": "**Requires an Access Token as the bearer token.**\n\nCreate a tag.",
        "operationId": "create_integrations_templates_tags",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateTagCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Template Tags"],
        "summary": "List Template Tags",
        "description": "**Requires an Access Token as the bearer token.**\n\nList tags.",
        "operationId": "list_integrations_templates_tags",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/templates/tags/{name}": {
      "put": {
        "tags": ["Template Tags"],
        "summary": "Update Template Tag",
        "description": "**Requires an Access Token as the bearer token.**\n\nUpdate a tag.",
        "operationId": "update_integrations_templates_tags_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateTagUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Template Tags"],
        "summary": "Delete Template Tag",
        "description": "**Requires an Access Token as the bearer token.**\n\nDelete a tag.",
        "operationId": "delete_integrations_templates_tags_name",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateTagDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/applications": {
      "post": {
        "tags": ["Applications"],
        "summary": "Get Or Create Application",
        "operationId": "create_internal_account_applications",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations": {
      "get": {
        "tags": ["Organizations"],
        "summary": "List Organizations",
        "operationId": "list_internal_account_organizations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{id}/onboarding-progress": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Update Organization Onboarding Progress",
        "description": "Update the onboarding progress for an organization.",
        "operationId": "create_internal_account_organizations_id_onboarding_progress",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingProgressUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnboardingProgressUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{organization_id}": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Organization",
        "operationId": "get_internal_account_organizations_organization_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Organization ID to retrieve.",
              "title": "Organization Id"
            },
            "description": "Organization ID to retrieve."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{organization_id}/customer-portal": {
      "post": {
        "tags": ["Organizations"],
        "summary": "Get Customer Portal Link",
        "description": "Get a link to the customer portal for an organization.\n\nThe customer portal allows users to manage their billing information,\nview invoices, and update payment methods.",
        "operationId": "create_internal_account_organizations_organization_id_customer_portal",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Organization ID to get customer portal link for.",
              "title": "Organization Id"
            },
            "description": "Organization ID to get customer portal link for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPortalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPortalResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{organization_id}/info": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Organization Info",
        "operationId": "get_internal_account_organizations_organization_id_info",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Organization ID to retrieve info for.",
              "title": "Organization Id"
            },
            "description": "Organization ID to retrieve info for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{organization_id}/invoices": {
      "get": {
        "tags": ["Organizations"],
        "summary": "List Invoices",
        "operationId": "get_internal_account_organizations_organization_id_invoices",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Organization ID to retrieve invoices for.",
              "title": "Organization Id"
            },
            "description": "Organization ID to retrieve invoices for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{organization_id}/payment-information": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Payment Information",
        "operationId": "get_internal_account_organizations_organization_id_payment_information",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Organization ID to retrieve payment information for.",
              "title": "Organization Id"
            },
            "description": "Organization ID to retrieve payment information for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInformationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/account/organizations/{organization_id}/subscription": {
      "get": {
        "tags": ["Organizations"],
        "summary": "Get Organization Subscription",
        "operationId": "get_internal_account_organizations_organization_id_subscription",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Organization ID to retrieve subscription info for.",
              "title": "Organization Id"
            },
            "description": "Organization ID to retrieve subscription info for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSubscriptionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/health/check": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "operationId": "get_internal_health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/integrations/definitions/destinations/wrapped": {
      "get": {
        "tags": ["Internal Destinations Definitions"],
        "summary": "List Wrapped Destination Definitions",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination connector specification.",
        "operationId": "list_internal_integrations_definitions_destinations_wrapped",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "actorDefinitionIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "Filter by actor definition IDs (use repeated parameters: ?actorDefinitionIds=id1&actorDefinitionIds=id2)",
              "default": [],
              "title": "Actordefinitionids"
            },
            "description": "Filter by actor definition IDs (use repeated parameters: ?actorDefinitionIds=id1&actorDefinitionIds=id2)"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationDefinitionsWrappedListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/integrations/definitions/destinations/wrapped/{id}": {
      "get": {
        "tags": ["Internal Destinations Definitions"],
        "summary": "Get Wrapped Destination Definition",
        "description": "**Requires an Access Token as the bearer token.**\n\nGet a destination connector specification.",
        "operationId": "get_internal_integrations_definitions_destinations_wrapped_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/mcp/code": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Oauth Code",
        "operationId": "create_internal_oauth_mcp_code",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthCodeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/mcp/registration": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Oauth Registration",
        "operationId": "create_internal_oauth_mcp_registration",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthRegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthRegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/mcp/token": {
      "post": {
        "tags": ["OAuth"],
        "summary": "Oauth Token",
        "operationId": "create_internal_oauth_mcp_token",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OauthTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/sources/complete": {
      "post": {
        "tags": ["OAuth - Sources"],
        "summary": "Complete Oauth",
        "operationId": "create_internal_oauth_sources_complete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSourceOauthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteSourceOauthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/sources/get_embedded_consent_url": {
      "post": {
        "tags": ["OAuth - Sources"],
        "summary": "Get Embedded Consent Url",
        "operationId": "create_internal_oauth_sources_get_embedded_consent_url",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEmbeddedSourceConsentUrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEmbeddedSourceConsentUrlResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/oauth/sources/revoke": {
      "post": {
        "tags": ["OAuth - Sources"],
        "summary": "Revoke Source Oauth",
        "operationId": "create_internal_oauth_sources_revoke",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeSourceOauthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevokeSourceOauthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/internal/workspaces/sync": {
      "post": {
        "tags": ["Internal Workspaces"],
        "summary": "Sync Workspaces",
        "description": "Sync workspaces from remote to local database.\n\nFetches all workspaces for the authenticated organization and creates\nany missing workspaces in the local database.\n\nReturns statistics about the sync operation including the total number of workspaces\nfound and the number created locally.",
        "operationId": "create_internal_workspaces_sync",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceSyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/apis": {
      "get": {
        "tags": ["Sonar - APIs"],
        "summary": "List Sources",
        "description": "**Requires an Access Token as the bearer token.**\n\nDeprecated. Use `/api/v1/integrations/sources` instead.",
        "operationId": "deprecated_get_sonar_apis",
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "description": "The maximum number of sources to return.",
              "default": 10,
              "title": "Limit"
            },
            "description": "The maximum number of sources to return."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "An opaque string with encoded pagination metadata.",
              "title": "Cursor"
            },
            "description": "An opaque string with encoded pagination metadata."
          },
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list sources for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list sources for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApisAvailableSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/apis/{source_id}/request": {
      "post": {
        "tags": ["Sonar - APIs"],
        "summary": "Request",
        "description": "**Requires an Access Token as the bearer token.**\n\nMake a request to an API using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "create_sonar_apis_source_id_request",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The source ID to forward the request to.",
              "title": "Source Id"
            },
            "description": "The source ID to forward the request to."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationProxyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationProxyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/sources": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Sources",
        "description": "**Requires an Access Token as the bearer token.**\n\nDeprecated. Use `/api/v1/integrations/sources` instead.",
        "operationId": "get_sonar_files_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The workspace ID to list files for.",
              "title": "Workspace Id"
            },
            "description": "The workspace ID to list files for."
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesAvailableSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/drives": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Drives",
        "description": "**Requires an Access Token as the bearer token.**\n\nRetrieve the list of drives available using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "get_sonar_files_source_id_drives",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get the drives",
              "title": "Source Id"
            },
            "description": "source_id for which to get the drives"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDrivesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/drives/{drive_id}/get/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "Drive Stream File",
        "description": "**Requires an Access Token as the bearer token.**\n\nRetrieve the file content at the specified path in a drive using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "get_sonar_files_source_id_drives_drive_id_get_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get file",
              "title": "Source Id"
            },
            "description": "source_id for which to get file"
          },
          {
            "name": "drive_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "drive_id for which to get file",
              "title": "Drive Id"
            },
            "description": "drive_id for which to get file"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Path to the file to get",
              "title": "Path"
            },
            "description": "Path to the file to get"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/drives/{drive_id}/list/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Drive Files With Prefix",
        "description": "**Requires an Access Token as the bearer token.**\n\nList Drive files at the specified path in a File Management System (like Sharepoint underneath drives) using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "list_sonar_files_source_id_drives_drive_id_list_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get file",
              "title": "Source Id"
            },
            "description": "source_id for which to get file"
          },
          {
            "name": "drive_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "drive_id for which to get file",
              "title": "Drive Id"
            },
            "description": "drive_id for which to get file"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Optional path to folder within the drive",
              "title": "Path"
            },
            "description": "Optional path to folder within the drive"
          },
          {
            "name": "continuation_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token for pagination",
              "title": "Continuation Token"
            },
            "description": "Token for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit for pagination",
              "default": 100,
              "title": "Limit"
            },
            "description": "Limit for pagination"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSourcesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/get/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "Stream File",
        "description": "**Requires an Access Token as the bearer token.**\n\nRetrieve the file content at the specified path using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "get_sonar_files_source_id_get_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to get file",
              "title": "Source Id"
            },
            "description": "source_id for which to get file"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Path to the file to get",
              "title": "Path"
            },
            "description": "Path to the file to get"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sonar/files/{source_id}/list/{path}": {
      "get": {
        "tags": ["Sonar - Files"],
        "summary": "List Files With Prefix",
        "description": "**Requires an Access Token as the bearer token.**\n\nList files at the specified path in a File Management System (Google Drive, S3...) using the credentials and config associated with the provided source.\n\nThis API allows any system to make requests to a downstream system without ever sharing end users' credentials with the caller.",
        "operationId": "list_sonar_files_source_id_list_path_path",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "source_id for which to list files",
              "title": "Source Id"
            },
            "description": "source_id for which to list files"
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Optional prefix to filter files",
              "title": "Path"
            },
            "description": "Optional prefix to filter files"
          },
          {
            "name": "continuation_token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Token for pagination",
              "title": "Continuation Token"
            },
            "description": "Token for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Limit for pagination",
              "default": 100,
              "title": "Limit"
            },
            "description": "Limit for pagination"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSourcesListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/destinations": {
      "post": {
        "tags": ["Tool Wrappers - Destinations"],
        "summary": "Tools Create Destination",
        "operationId": "create_tools_destinations",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralDestinationCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralDestinationCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/destinations/{id}": {
      "patch": {
        "tags": ["Tool Wrappers - Destinations"],
        "summary": "Tools Update Destination",
        "operationId": "update_tools_destinations_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralDestinationUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralDestinationUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/sources": {
      "post": {
        "tags": ["Tool Wrappers - Sources"],
        "summary": "Tools Create Source",
        "operationId": "create_tools_sources",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralSourceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralSourceCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tools/sources/{id}": {
      "patch": {
        "tags": ["Tool Wrappers - Sources"],
        "summary": "Tools Update Source",
        "operationId": "update_tools_sources_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CoralSourceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoralSourceUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "List Workspaces",
        "description": "List workspaces for the authenticated organization with cursor-based pagination.\n\n- **name_contains**: Optional filter by workspace name (case-insensitive partial match)\n- **status**: Optional filter by workspace status (active or inactive). If not specified, returns all workspaces.\n- **limit**: Maximum number of workspaces to return (default: 20, max: 100)\n- **cursor**: Pagination cursor from previous response's `next` URL\n- **next**: URL for next page (null if no more results)",
        "operationId": "list_workspaces",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "name_contains",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter workspaces by name (case-insensitive partial match)",
              "title": "Name Contains"
            },
            "description": "Filter workspaces by name (case-insensitive partial match)"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WorkspaceStatus"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter workspaces by status (active or inactive). Returns all if not specified.",
              "title": "Status"
            },
            "description": "Filter workspaces by status (active or inactive). Returns all if not specified."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of workspaces to return",
              "default": 20,
              "title": "Limit"
            },
            "description": "Maximum number of workspaces to return"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Opaque pagination cursor",
              "title": "Cursor"
            },
            "description": "Opaque pagination cursor"
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/stats": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "Get Workspace Stats",
        "description": "Get workspace statistics for the authenticated organization.\n\nReturns the count of active and inactive workspaces.",
        "operationId": "get_workspaces_stats",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/workspaces/{workspace_id}": {
      "get": {
        "tags": ["Workspaces"],
        "summary": "Get Workspace",
        "description": "Get a single workspace by ID.",
        "operationId": "get_workspaces_workspace_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Workspace Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Workspaces"],
        "summary": "Update Workspace",
        "description": "Update a workspace's name and/or status.\n- Set `name` to update the workspace name\n- Set `status` to 'active' or 'inactive' to change the workspace status\n- When setting status to 'inactive', all active connections in the workspace will be automatically disabled",
        "operationId": "update_workspaces_workspace_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Workspace Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Workspaces"],
        "summary": "Delete Workspace",
        "description": "Delete a workspace in both Coral and Sonar (soft delete in Sonar).\nThis will delete the workspace from Coral and mark it as deleted in Sonar.",
        "operationId": "delete_workspaces_workspace_id",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Workspace Id"
            }
          },
          {
            "name": "x-organization-id",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Select the working organization. Necessary since users can belong to multiple organizations.",
              "title": "X-Organization-Id"
            },
            "description": "Select the working organization. Necessary since users can belong to multiple organizations."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "properties": {
          "line1": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line1"
          },
          "line2": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Line2"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State"
          },
          "postalCode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Postalcode"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          }
        },
        "type": "object",
        "title": "Address"
      },
      "AdvancedAuth": {
        "properties": {
          "auth_flow_type": {
            "type": "string",
            "title": "Auth Flow Type"
          },
          "predicate_key": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Predicate Key"
          },
          "predicate_value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Predicate Value"
          },
          "oauth_config_specification": {
            "$ref": "#/components/schemas/OAuthConfigSpecification"
          }
        },
        "type": "object",
        "required": ["auth_flow_type", "oauth_config_specification"],
        "title": "AdvancedAuth"
      },
      "AgentToolName": {
        "type": "string",
        "enum": [
          "get_current_datetime",
          "get_source_definitions",
          "get_source_definition",
          "list_source_templates",
          "get_source_template",
          "get_source_definition_catalog",
          "run_source_template_creator",
          "create_source_template",
          "query_source_catalog",
          "patch_source_catalog",
          "patch_source_catalog_stream",
          "query_source_definition_catalog",
          "patch_source_definition_catalog",
          "patch_source_definition_catalog_stream"
        ],
        "title": "AgentToolName",
        "description": "Enum of tool names available to agents.\nThis enum is automatically synced to the frontend via OpenAPI generation,\nensuring type safety when handling tool calls and responses.\nWhen adding a new tool to an agent (e.g., in app/agents/chat_agent.py),\nadd the corresponding tool name here to expose it to the frontend."
      },
      "ApiError": {
        "properties": {
          "field": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "error_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Code"
          }
        },
        "type": "object",
        "title": "ApiError"
      },
      "ApiErrorResponse": {
        "properties": {
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "type": "array",
            "title": "Errors",
            "default": []
          }
        },
        "type": "object",
        "title": "ApiErrorResponse"
      },
      "ApisAvailableSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          }
        },
        "type": "object",
        "required": ["id", "workspace_id", "source_type"],
        "title": "ApisAvailableSource"
      },
      "ApisAvailableSourcesResponse": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next",
            "description": "Next page url, empty if no more pages"
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/ApisAvailableSource"
            },
            "type": "array",
            "title": "Sources"
          }
        },
        "type": "object",
        "required": ["sources"],
        "title": "ApisAvailableSourcesResponse"
      },
      "Application": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": ["id", "name", "client_id", "client_secret", "created_at"],
        "title": "Application"
      },
      "AuthenticationProxyRequest": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Headers"
          },
          "body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Body"
          }
        },
        "type": "object",
        "required": ["url", "method"],
        "title": "AuthenticationProxyRequest"
      },
      "AuthenticationProxyResponse": {
        "properties": {
          "response_status_code": {
            "type": "integer",
            "title": "Response Status Code"
          },
          "response_body": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Body"
          }
        },
        "type": "object",
        "required": ["response_status_code", "response_body"],
        "title": "AuthenticationProxyResponse"
      },
      "ChatHistoryResponse": {
        "properties": {
          "thread_id": {
            "type": "string",
            "title": "Thread Id"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageEvent"
            },
            "type": "array",
            "title": "Messages"
          }
        },
        "type": "object",
        "required": ["thread_id", "messages"],
        "title": "ChatHistoryResponse"
      },
      "ChatMessageEvent": {
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "thread_id",
              "user",
              "assistant",
              "tool_call",
              "tool_response"
            ],
            "title": "Event"
          },
          "data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/MessageContent"
              },
              {
                "$ref": "#/components/schemas/ToolCallEvent"
              },
              {
                "$ref": "#/components/schemas/ToolResponseEvent"
              }
            ],
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["event", "data"],
        "title": "ChatMessageEvent",
        "description": "Format of chat message events sent to the browser."
      },
      "ChatPostRequest": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt"
          },
          "thread_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thread Id"
          }
        },
        "type": "object",
        "required": ["prompt"],
        "title": "ChatPostRequest"
      },
      "CheckStatus": {
        "type": "string",
        "enum": ["pending", "running", "cancelled", "failed", "succeeded"],
        "title": "CheckStatus"
      },
      "CompleteSourceOauthRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "redirect_url": {
            "type": "string",
            "title": "Redirect Url",
            "description": " When completing OAuth flow to gain an access token, some API sometimes requires to verify that the app re-send the redirectUrl that was used when consent was given"
          },
          "query_params": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query Params"
          },
          "o_auth_input_configuration": {
            "additionalProperties": true,
            "type": "object",
            "title": "O Auth Input Configuration",
            "description": "Required by the underlying API, but ignored in an embedded context."
          },
          "return_secret_coordinate": {
            "type": "boolean",
            "title": "Return Secret Coordinate",
            "description": "If set to true, returns a secret coordinate which references the stored tokens. By default, returns raw tokens.",
            "default": false
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id"
          }
        },
        "type": "object",
        "required": [
          "workspace_id",
          "source_definition_id",
          "redirect_url",
          "o_auth_input_configuration"
        ],
        "title": "CompleteSourceOauthRequest"
      },
      "CompleteSourceOauthResponse": {
        "properties": {
          "request_succeeded": {
            "type": "boolean",
            "title": "Request Succeeded"
          },
          "auth_payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Auth Payload"
          },
          "request_error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Request Error"
          }
        },
        "type": "object",
        "required": ["request_succeeded", "auth_payload"],
        "title": "CompleteSourceOauthResponse"
      },
      "ConnectionSpecification": {
        "properties": {
          "required": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Required"
          },
          "properties": {
            "additionalProperties": true,
            "type": "object",
            "title": "Properties"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "$schema": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "$Schema"
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "ConnectionSpecification"
      },
      "ConnectionTemplate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplate"
      },
      "ConnectionTemplateCreateRequest": {
        "properties": {
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id",
            "description": "The id of the destination definition (type of destination connector) to use for the connection."
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config",
            "description": "The configuration for the destination connector. Must match the destination definition."
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression",
            "description": "A valid Quartz cron expression describing the schedule for the connection."
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "description": "The action Airbyte should take when breaking changes are made to a source schema.",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "description": "Whether to start a sync job when the connection is created.",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateCreateRequest"
      },
      "ConnectionTemplateCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateCreateResponse"
      },
      "ConnectionTemplateDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "ConnectionTemplateDeleteResponse"
      },
      "ConnectionTemplateGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateGetResponse"
      },
      "ConnectionTemplateListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ConnectionTemplate"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ConnectionTemplateListResponse"
      },
      "ConnectionTemplatePatchRequest": {
        "properties": {
          "destination_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination Name"
          },
          "destination_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destination Config"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NonBreakingChangesPreference"
              },
              {
                "type": "null"
              }
            ]
          },
          "sync_on_create": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sync On Create"
          }
        },
        "type": "object",
        "title": "ConnectionTemplatePatchRequest"
      },
      "ConnectionTemplateTagRequest": {
        "properties": {
          "tag": {
            "type": "string",
            "title": "Tag"
          }
        },
        "type": "object",
        "required": ["tag"],
        "title": "ConnectionTemplateTagRequest"
      },
      "ConnectionTemplateTagResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "destination_name": {
            "type": "string",
            "title": "Destination Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "cron_expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cron Expression"
          },
          "non_breaking_changes_preference": {
            "$ref": "#/components/schemas/NonBreakingChangesPreference",
            "default": "ignore"
          },
          "sync_on_create": {
            "type": "boolean",
            "title": "Sync On Create",
            "default": true
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_id",
          "destination_name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "ConnectionTemplateTagResponse"
      },
      "ConnectionTemplateUntagResponse": {
        "properties": {
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["deleted_at"],
        "title": "ConnectionTemplateUntagResponse"
      },
      "ConnectorDefinition": {
        "properties": {
          "sourceDefinitionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sourcedefinitionid"
          },
          "destinationDefinitionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destinationdefinitionid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "iconUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iconurl"
          },
          "custom": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom"
          },
          "supportLevel": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SupportLevel"
              },
              {
                "type": "null"
              }
            ]
          },
          "spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          }
        },
        "type": "object",
        "required": ["name", "spec"],
        "title": "ConnectorDefinition"
      },
      "ConnectorDefinitionSummarized": {
        "properties": {
          "sourceDefinitionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sourcedefinitionid"
          },
          "destinationDefinitionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Destinationdefinitionid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "iconUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iconurl"
          },
          "custom": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom"
          },
          "supportLevel": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SupportLevel"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ConnectorDefinitionSummarized"
      },
      "ConnectorSpecification": {
        "properties": {
          "documentationUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documentationurl"
          },
          "connectionSpecification": {
            "$ref": "#/components/schemas/ConnectionSpecification"
          },
          "advanced_auth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdvancedAuth"
              },
              {
                "type": "null"
              }
            ]
          },
          "supported_destination_sync_modes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DestinationSyncMode"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Supported Destination Sync Modes"
          }
        },
        "type": "object",
        "required": ["connectionSpecification"],
        "title": "ConnectorSpecification"
      },
      "CoralDestinationCreateRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          }
        },
        "type": "object",
        "required": [
          "workspace_id",
          "name",
          "destination_definition_id",
          "destination_config"
        ],
        "title": "CoralDestinationCreateRequest"
      },
      "CoralDestinationCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type",
          "destination_config",
          "created_at"
        ],
        "title": "CoralDestinationCreateResponse"
      },
      "CoralDestinationUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "configuration": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configuration"
          }
        },
        "type": "object",
        "title": "CoralDestinationUpdateRequest"
      },
      "CoralDestinationUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type",
          "destination_config",
          "created_at"
        ],
        "title": "CoralDestinationUpdateResponse"
      },
      "CoralSourceCreateRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          }
        },
        "type": "object",
        "required": [
          "workspace_id",
          "name",
          "source_definition_id",
          "source_config"
        ],
        "title": "CoralSourceCreateRequest"
      },
      "CoralSourceCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "source_config",
          "source_type",
          "created_at"
        ],
        "title": "CoralSourceCreateResponse"
      },
      "CoralSourceUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "source_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Config"
          }
        },
        "type": "object",
        "title": "CoralSourceUpdateRequest"
      },
      "CoralSourceUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "source_config",
          "source_type",
          "created_at"
        ],
        "title": "CoralSourceUpdateResponse"
      },
      "CronExpressionDescribeRequest": {
        "properties": {
          "cron_expression": {
            "type": "string",
            "title": "Cron Expression",
            "description": "A Quartz cron expression to be described"
          }
        },
        "type": "object",
        "required": ["cron_expression"],
        "title": "CronExpressionDescribeRequest"
      },
      "CronExpressionDescribeResponse": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Human-readable description of the cron expression"
          },
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid",
            "description": "Whether the cron expression is valid"
          }
        },
        "type": "object",
        "required": ["description", "is_valid"],
        "title": "CronExpressionDescribeResponse"
      },
      "CustomerPortalRequest": {
        "properties": {
          "return_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Return Url",
            "description": "The URL to redirect to after the customer portal session"
          },
          "flow": {
            "type": "string",
            "enum": ["payment_method", "portal"],
            "title": "Flow",
            "default": "portal"
          }
        },
        "type": "object",
        "required": ["return_url"],
        "title": "CustomerPortalRequest",
        "description": "Request schema for customer portal link generation."
      },
      "CustomerPortalResponse": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The URL to the customer portal"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "CustomerPortalResponse",
        "description": "Response schema for customer portal link."
      },
      "DataCategory": {
        "type": "string",
        "enum": ["person", "transaction", "event", "object", "file"],
        "title": "DataCategory"
      },
      "DestinationDefinitionListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "type": "string",
            "title": "Icon"
          }
        },
        "type": "object",
        "required": ["id", "name", "icon"],
        "title": "DestinationDefinitionListItem"
      },
      "DestinationDefinitionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "definition": {
            "$ref": "#/components/schemas/ConnectorDefinition"
          }
        },
        "type": "object",
        "required": ["id", "definition"],
        "title": "DestinationDefinitionResponse"
      },
      "DestinationDefinitionsListResponse": {
        "properties": {
          "destinations": {
            "items": {
              "$ref": "#/components/schemas/DestinationDefinitionListItem"
            },
            "type": "array",
            "title": "Destinations"
          }
        },
        "type": "object",
        "required": ["destinations"],
        "title": "DestinationDefinitionsListResponse"
      },
      "DestinationDefinitionsWrappedListResponse": {
        "properties": {
          "definitions": {
            "items": {
              "$ref": "#/components/schemas/ConnectorDefinition"
            },
            "type": "array",
            "title": "Definitions"
          }
        },
        "type": "object",
        "required": ["definitions"],
        "title": "DestinationDefinitionsWrappedListResponse",
        "description": "Full definitions list response (includes full specs)."
      },
      "DestinationGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          },
          "destination_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Destination Config"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type",
          "destination_config",
          "created_at"
        ],
        "title": "DestinationGetResponse"
      },
      "DestinationListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "destination_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Destination Definition Id"
          },
          "destination_type": {
            "type": "string",
            "title": "Destination Type"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "destination_definition_id",
          "destination_type"
        ],
        "title": "DestinationListItem"
      },
      "DestinationListResponse": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next",
            "description": "Next page url, empty if no more pages"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DestinationListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "DestinationListResponse"
      },
      "DestinationSyncMode": {
        "type": "string",
        "enum": [
          "append",
          "append_dedup",
          "overwrite",
          "overwrite_dedup",
          "soft_delete",
          "update"
        ],
        "title": "DestinationSyncMode"
      },
      "DetailedSourceTemplate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "customization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceTemplateCustomization"
              },
              {
                "type": "null"
              }
            ],
            "description": "\nCustomizations for the source template. If stream_whitelist is provided, only the specified streams will be synced.\nIf stream_customizations are provided, and stream fields specified will override the default settings for only that\nfield. Where any streams fields are not specified, the default settings will be used.\n"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "DetailedSourceTemplate"
      },
      "DiscoveryAgentCreateResponse": {
        "properties": {
          "jobs_created": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryAgentJobCreated"
            },
            "type": "array",
            "title": "Jobs Created"
          }
        },
        "type": "object",
        "required": ["jobs_created"],
        "title": "DiscoveryAgentCreateResponse"
      },
      "DiscoveryAgentJobCreated": {
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "title": "Job Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          }
        },
        "type": "object",
        "required": ["job_id", "source_definition_id"],
        "title": "DiscoveryAgentJobCreated"
      },
      "FieldTag": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "tag": {
            "type": "string",
            "title": "Tag"
          }
        },
        "type": "object",
        "required": ["field_name", "tag"],
        "title": "FieldTag"
      },
      "FileEntity": {
        "type": "string",
        "enum": ["file", "folder"],
        "title": "FileEntity"
      },
      "FilesAvailableSource": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          }
        },
        "type": "object",
        "required": ["id", "workspace_id", "source_type"],
        "title": "FilesAvailableSource"
      },
      "FilesAvailableSourcesResponse": {
        "properties": {
          "sources": {
            "items": {
              "$ref": "#/components/schemas/FilesAvailableSource"
            },
            "type": "array",
            "title": "Sources"
          }
        },
        "type": "object",
        "required": ["sources"],
        "title": "FilesAvailableSourcesResponse"
      },
      "FilesSourceListItem": {
        "properties": {
          "bytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bytes"
          },
          "relative_path": {
            "type": "string",
            "title": "Relative Path"
          },
          "modified": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified"
          },
          "source_url": {
            "type": "string",
            "title": "Source Url"
          },
          "type": {
            "$ref": "#/components/schemas/FileEntity"
          }
        },
        "type": "object",
        "required": [
          "bytes",
          "relative_path",
          "modified",
          "source_url",
          "type"
        ],
        "title": "FilesSourceListItem"
      },
      "FilesSourcesListResponse": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next",
            "description": "Next page url, empty if no more pages"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/FilesSourceListItem"
            },
            "type": "array",
            "title": "Items"
          }
        },
        "type": "object",
        "required": ["items"],
        "title": "FilesSourcesListResponse"
      },
      "ForeignKey": {
        "properties": {
          "field_name": {
            "type": "string",
            "title": "Field Name"
          },
          "referenced_stream_name": {
            "type": "string",
            "title": "Referenced Stream Name"
          },
          "referenced_field_name": {
            "type": "string",
            "title": "Referenced Field Name"
          }
        },
        "type": "object",
        "required": [
          "field_name",
          "referenced_stream_name",
          "referenced_field_name"
        ],
        "title": "ForeignKey"
      },
      "GetDriveItem": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "url": {
            "type": "string",
            "title": "Url"
          }
        },
        "type": "object",
        "required": ["id", "name", "url"],
        "title": "GetDriveItem"
      },
      "GetDrivesResponse": {
        "properties": {
          "drives": {
            "items": {
              "$ref": "#/components/schemas/GetDriveItem"
            },
            "type": "array",
            "title": "Drives"
          }
        },
        "type": "object",
        "required": ["drives"],
        "title": "GetDrivesResponse"
      },
      "GetEmbeddedSourceConsentUrlRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "redirect_url": {
            "type": "string",
            "title": "Redirect Url",
            "description": "The url to redirect to after getting the user consent"
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id"
          },
          "oauth_input_configuration": {
            "additionalProperties": true,
            "type": "object",
            "title": "Oauth Input Configuration"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_definition_id", "redirect_url"],
        "title": "GetEmbeddedSourceConsentUrlRequest"
      },
      "GetEmbeddedSourceConsentUrlResponse": {
        "properties": {
          "consent_url": {
            "type": "string",
            "title": "Consent Url"
          }
        },
        "type": "object",
        "required": ["consent_url"],
        "title": "GetEmbeddedSourceConsentUrlResponse"
      },
      "HealthCheckGetResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "queue_information": {
            "$ref": "#/components/schemas/QueueInformation"
          }
        },
        "type": "object",
        "required": ["success", "queue_information"],
        "title": "HealthCheckGetResponse"
      },
      "HttpMethod": {
        "type": "string",
        "enum": ["GET", "POST", "PUT", "DELETE"],
        "title": "HttpMethod"
      },
      "Invoice": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "invoiceDate": {
            "type": "integer",
            "title": "Invoicedate"
          },
          "status": {
            "type": "string",
            "enum": ["draft", "open", "paid", "uncollectible", "void"],
            "title": "Status"
          },
          "pdfUrl": {
            "type": "string",
            "title": "Pdfurl"
          },
          "invoiceUrl": {
            "type": "string",
            "title": "Invoiceurl"
          },
          "number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Number"
          }
        },
        "type": "object",
        "required": [
          "id",
          "total",
          "currency",
          "invoiceDate",
          "status",
          "pdfUrl",
          "invoiceUrl"
        ],
        "title": "Invoice"
      },
      "InvoicesResponse": {
        "properties": {
          "invoices": {
            "items": {
              "$ref": "#/components/schemas/Invoice"
            },
            "type": "array",
            "title": "Invoices"
          },
          "hasMore": {
            "type": "boolean",
            "title": "Hasmore"
          }
        },
        "type": "object",
        "required": ["invoices", "hasMore"],
        "title": "InvoicesResponse"
      },
      "MessageContent": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          }
        },
        "type": "object",
        "required": ["content"],
        "title": "MessageContent",
        "description": "Content of a chat message."
      },
      "NonBreakingChangesPreference": {
        "type": "string",
        "enum": ["ignore", "disable", "propagate_columns", "propagate_fully"],
        "title": "NonBreakingChangesPreference"
      },
      "OAuthConfigSpecification": {
        "properties": {
          "oauth_user_input_from_connector_config_specification": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Oauth User Input From Connector Config Specification"
          },
          "oauth_connector_input_specification": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Oauth Connector Input Specification"
          },
          "complete_oauth_output_specification": {
            "additionalProperties": true,
            "type": "object",
            "title": "Complete Oauth Output Specification",
            "default": {}
          },
          "complete_oauth_server_input_specification": {
            "additionalProperties": true,
            "type": "object",
            "title": "Complete Oauth Server Input Specification",
            "default": {}
          },
          "complete_oauth_server_output_specification": {
            "additionalProperties": true,
            "type": "object",
            "title": "Complete Oauth Server Output Specification",
            "default": {}
          }
        },
        "type": "object",
        "title": "OAuthConfigSpecification"
      },
      "OauthCodeRequest": {
        "properties": {
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "airbyte_client_id": {
            "type": "string",
            "title": "Airbyte Client Id"
          },
          "airbyte_client_secret": {
            "type": "string",
            "title": "Airbyte Client Secret"
          },
          "redirect_uri": {
            "type": "string",
            "title": "Redirect Uri"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "state": {
            "type": "string",
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "airbyte_client_id",
          "airbyte_client_secret",
          "redirect_uri",
          "scope",
          "state"
        ],
        "title": "OauthCodeRequest"
      },
      "OauthCodeResponse": {
        "properties": {
          "redirect_uri": {
            "type": "string",
            "title": "Redirect Uri"
          }
        },
        "type": "object",
        "required": ["redirect_uri"],
        "title": "OauthCodeResponse"
      },
      "OauthRegistrationRequest": {
        "properties": {
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "client_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Name"
          },
          "grant_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Grant Types"
          },
          "response_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Response Types"
          },
          "token_endpoint_auth_method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Endpoint Auth Method"
          },
          "scope": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope"
          }
        },
        "type": "object",
        "required": ["redirect_uris", "grant_types", "response_types"],
        "title": "OauthRegistrationRequest"
      },
      "OauthRegistrationResponse": {
        "properties": {
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Redirect Uris"
          },
          "grant_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Grant Types"
          },
          "response_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Response Types"
          },
          "scope": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope"
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "client_secret",
          "redirect_uris",
          "grant_types",
          "response_types"
        ],
        "title": "OauthRegistrationResponse"
      },
      "OauthTokenRequest": {
        "properties": {
          "grant_type": {
            "type": "string",
            "title": "Grant Type"
          },
          "code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Code"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          },
          "redirect_uri": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirect Uri"
          }
        },
        "type": "object",
        "required": ["grant_type", "client_id", "client_secret"],
        "title": "OauthTokenRequest"
      },
      "OauthTokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          },
          "refresh_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refresh Token"
          }
        },
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"],
        "title": "OauthTokenResponse"
      },
      "OnboardingProgressUpdateRequest": {
        "properties": {
          "onboarding_status": {
            "$ref": "#/components/schemas/OnboardingStatusEnum"
          }
        },
        "type": "object",
        "required": ["onboarding_status"],
        "title": "OnboardingProgressUpdateRequest"
      },
      "OnboardingProgressUpdateResponse": {
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "onboarding_progress": {
            "$ref": "#/components/schemas/OnboardingStatusEnum"
          }
        },
        "type": "object",
        "required": ["organization_id", "onboarding_progress"],
        "title": "OnboardingProgressUpdateResponse"
      },
      "OnboardingStatusEnum": {
        "type": "string",
        "enum": [
          "NOT_STARTED",
          "DESTINATION_SETUP_COMPLETE",
          "EMBED_CODE_COPIED",
          "COMPLETED"
        ],
        "title": "OnboardingStatusEnum"
      },
      "Organization": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "organization_name": {
            "type": "string",
            "title": "Organization Name"
          },
          "first_workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "First Workspace Id"
          },
          "onboarding_status": {
            "$ref": "#/components/schemas/OnboardingStatusEnum"
          }
        },
        "type": "object",
        "required": [
          "id",
          "organization_name",
          "first_workspace_id",
          "onboarding_status"
        ],
        "title": "Organization"
      },
      "OrganizationBillingInfo": {
        "properties": {
          "paymentStatus": {
            "type": "string",
            "enum": [
              "disabled",
              "grace_period",
              "locked",
              "manual",
              "okay",
              "uninitialized"
            ],
            "title": "Paymentstatus"
          },
          "subscriptionStatus": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["pre_subscription", "subscribed", "unsubscribed"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Subscriptionstatus"
          },
          "accountType": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["free", "internal"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Accounttype"
          },
          "gracePeriodEndsAt": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Graceperiodendsat"
          }
        },
        "type": "object",
        "required": ["paymentStatus"],
        "title": "OrganizationBillingInfo"
      },
      "OrganizationDetailResponse": {
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid",
            "title": "Organizationid"
          },
          "organizationName": {
            "type": "string",
            "title": "Organizationname"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          }
        },
        "type": "object",
        "required": ["organizationId", "organizationName"],
        "title": "OrganizationDetailResponse"
      },
      "OrganizationInfoResponse": {
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid",
            "title": "Organizationid"
          },
          "organizationName": {
            "type": "string",
            "title": "Organizationname"
          },
          "sso": {
            "type": "boolean",
            "title": "Sso"
          },
          "billing": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationBillingInfo"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["organizationId", "organizationName", "sso"],
        "title": "OrganizationInfoResponse"
      },
      "OrganizationSubscriptionCreditBlock": {
        "properties": {
          "amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Amount"
          },
          "expiryDate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expirydate"
          }
        },
        "type": "object",
        "title": "OrganizationSubscriptionCreditBlock"
      },
      "OrganizationSubscriptionCredits": {
        "properties": {
          "balance": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Balance"
          },
          "blocks": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/OrganizationSubscriptionCreditBlock"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blocks"
          }
        },
        "type": "object",
        "title": "OrganizationSubscriptionCredits"
      },
      "OrganizationSubscriptionResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "selfServeSubscription": {
            "type": "boolean",
            "title": "Selfservesubscription"
          },
          "balanceHidden": {
            "type": "boolean",
            "title": "Balancehidden"
          },
          "cancellationDate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancellationdate"
          },
          "upcomingInvoice": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscriptionUpcomingInvoice"
              },
              {
                "type": "null"
              }
            ]
          },
          "credits": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscriptionCredits"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["name", "selfServeSubscription", "balanceHidden"],
        "title": "OrganizationSubscriptionResponse"
      },
      "OrganizationSubscriptionUpcomingInvoice": {
        "properties": {
          "currency": {
            "type": "string",
            "title": "Currency"
          },
          "amount": {
            "type": "string",
            "title": "Amount"
          },
          "dueDate": {
            "type": "string",
            "format": "date",
            "title": "Duedate"
          }
        },
        "type": "object",
        "required": ["currency", "amount", "dueDate"],
        "title": "OrganizationSubscriptionUpcomingInvoice"
      },
      "OrganizationsListResponse": {
        "properties": {
          "organizations": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array",
            "title": "Organizations"
          }
        },
        "type": "object",
        "required": ["organizations"],
        "title": "OrganizationsListResponse"
      },
      "PatchOp": {
        "properties": {
          "op": {
            "type": "string",
            "title": "Op"
          },
          "path": {
            "type": "string",
            "title": "Path"
          },
          "value": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "required": ["op", "path"],
        "title": "PatchOp"
      },
      "PaymentInformationCustomer": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "customerAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "shippingAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              },
              {
                "type": "null"
              }
            ]
          },
          "defaultPaymentMethod": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "PaymentInformationCustomer"
      },
      "PaymentInformationResponse": {
        "properties": {
          "customer": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentInformationCustomer"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "PaymentInformationResponse"
      },
      "PaymentMethod": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "cardBrand": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardbrand"
          },
          "cardLastDigits": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardlastdigits"
          },
          "cardExpireMonth": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardexpiremonth"
          },
          "cardExpireYear": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cardexpireyear"
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "PaymentMethod"
      },
      "QueueInformation": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "scheduled_count": {
            "type": "integer",
            "title": "Scheduled Count"
          },
          "pending_count": {
            "type": "integer",
            "title": "Pending Count"
          }
        },
        "type": "object",
        "required": ["total", "scheduled_count", "pending_count"],
        "title": "QueueInformation"
      },
      "RevokeSourceOauthRequest": {
        "properties": {
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Id"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_definition_id", "source_id"],
        "title": "RevokeSourceOauthRequest"
      },
      "RevokeSourceOauthResponse": {
        "properties": {},
        "type": "object",
        "title": "RevokeSourceOauthResponse"
      },
      "SchemaChatAgentState": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/SchemaChatAgentStateType"
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "source_definition_name": {
            "type": "string",
            "title": "Source Definition Name"
          },
          "schema_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SonarCatalogSchemaType"
              },
              {
                "type": "null"
              }
            ]
          },
          "catalog": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SonarCatalogOutput"
              },
              {
                "type": "null"
              }
            ]
          },
          "thread_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thread Id"
          }
        },
        "type": "object",
        "required": ["state", "source_definition_id", "source_definition_name"],
        "title": "SchemaChatAgentState"
      },
      "SchemaChatAgentStateType": {
        "type": "string",
        "enum": [
          "unsupported_source",
          "first_session",
          "returning",
          "admin_session"
        ],
        "title": "SchemaChatAgentStateType"
      },
      "ScopedTokenCreateRequest": {
        "properties": {
          "workspace_name": {
            "type": "string",
            "title": "Workspace Name",
            "description": "The name of the workspace to create or use."
          },
          "region_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region Id",
            "description": "The region in which to create the workspace. If not provided, the default US region will be used. US region: 645a183f-b12b-4c6e-8ad3-99e165603450, EU region: b9e48d61-f082-4a14-a8d0-799a907938cb.",
            "examples": [
              "645a183f-b12b-4c6e-8ad3-99e165603450",
              "b9e48d61-f082-4a14-a8d0-799a907938cb"
            ]
          }
        },
        "type": "object",
        "required": ["workspace_name"],
        "title": "ScopedTokenCreateRequest"
      },
      "ScopedTokenCreateResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": ["token"],
        "title": "ScopedTokenCreateResponse"
      },
      "ScopedTokenInfoGetResponse": {
        "properties": {
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id"
          }
        },
        "type": "object",
        "required": ["organization_id", "workspace_id"],
        "title": "ScopedTokenInfoGetResponse"
      },
      "SonarCatalogInput": {
        "properties": {
          "streams": {
            "items": {
              "$ref": "#/components/schemas/SonarStream"
            },
            "type": "array",
            "title": "Streams"
          },
          "selected_streams": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Selected Streams"
          }
        },
        "type": "object",
        "title": "SonarCatalogInput"
      },
      "SonarCatalogOutput": {
        "properties": {
          "streams": {
            "items": {
              "$ref": "#/components/schemas/SonarStream"
            },
            "type": "array",
            "title": "Streams"
          },
          "selected_streams": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Selected Streams"
          }
        },
        "type": "object",
        "title": "SonarCatalogOutput"
      },
      "SonarCatalogSchemaType": {
        "type": "string",
        "enum": ["structured", "unstructured", "dynamic", "customizable"],
        "title": "SonarCatalogSchemaType"
      },
      "SonarStream": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "data_category": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DataCategory"
              },
              {
                "type": "null"
              }
            ]
          },
          "suggested": {
            "type": "boolean",
            "title": "Suggested",
            "default": false
          },
          "cursor_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor Fields"
          },
          "primary_key_fields": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Primary Key Fields"
          },
          "pii_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pii Fields"
          },
          "immutable_fields": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Immutable Fields"
          },
          "field_tags": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FieldTag"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Field Tags"
          },
          "parent_streams": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ForeignKey"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Streams"
          },
          "child_streams": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ForeignKey"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Child Streams"
          },
          "json_schema": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Json Schema"
          }
        },
        "type": "object",
        "title": "SonarStream"
      },
      "SourceCatalogPatchResponse": {
        "properties": {
          "catalog": {
            "$ref": "#/components/schemas/SonarCatalogOutput"
          }
        },
        "type": "object",
        "required": ["catalog"],
        "title": "SourceCatalogPatchResponse"
      },
      "SourceCatalogQueryRequest": {
        "properties": {
          "jmes_query": {
            "type": "string",
            "title": "Jmes Query",
            "description": "JMESPath query to execute on the cached source catalog"
          }
        },
        "type": "object",
        "required": ["jmes_query"],
        "title": "SourceCatalogQueryRequest"
      },
      "SourceCatalogQueryResponse": {
        "properties": {
          "result": {
            "title": "Result",
            "description": "The result of the JMESPath query on the cached source catalog"
          }
        },
        "type": "object",
        "required": ["result"],
        "title": "SourceCatalogQueryResponse"
      },
      "SourceCheckConfigRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the source."
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id",
            "description": "The workspace in which to create the source."
          },
          "source_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Template Id",
            "description": "The id of the source template to create the source from."
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config",
            "description": "The configuration for the source not already provided by the defaults in the source template (eg, credentials, bucket names). Must match the source template's User Config Spec."
          },
          "selected_connection_template_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Selected Connection Template Tags",
            "description": "Optional list of tags to filter which connection templates will be used for this source. "
          },
          "selected_connection_template_tags_mode": {
            "$ref": "#/components/schemas/TagSelectionMode",
            "description": "Tag selection mode for connection templates: 'all' (must have all tags) or 'any' (must have at least one tag). Defaults to 'any'.",
            "default": "any"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_template_id", "source_config"],
        "title": "SourceCheckConfigRequest"
      },
      "SourceCheckConfigResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "SourceCheckConfigResponse"
      },
      "SourceCheckConfigStatusResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "status": {
            "$ref": "#/components/schemas/CheckStatus"
          },
          "error_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Message"
          }
        },
        "type": "object",
        "required": ["id", "status"],
        "title": "SourceCheckConfigStatusResponse"
      },
      "SourceCreateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the source."
          },
          "workspace_id": {
            "type": "string",
            "format": "uuid",
            "title": "Workspace Id",
            "description": "The workspace in which to create the source."
          },
          "source_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Template Id",
            "description": "The id of the source template to create the source from."
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config",
            "description": "The configuration for the source not already provided by the defaults in the source template (eg, credentials, bucket names). Must match the source template's User Config Spec."
          },
          "selected_connection_template_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Selected Connection Template Tags",
            "description": "Optional list of tags to filter which connection templates will be used for this source. "
          },
          "selected_connection_template_tags_mode": {
            "$ref": "#/components/schemas/TagSelectionMode",
            "description": "Tag selection mode for connection templates: 'all' (must have all tags) or 'any' (must have at least one tag). Defaults to 'any'.",
            "default": "any"
          }
        },
        "type": "object",
        "required": ["workspace_id", "source_template_id", "source_config"],
        "title": "SourceCreateRequest"
      },
      "SourceCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_template": {
            "$ref": "#/components/schemas/DetailedSourceTemplate"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_template", "source_config"],
        "title": "SourceCreateResponse"
      },
      "SourceDefinitionCatalogCreateRequest": {
        "properties": {
          "sonar_catalog": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SonarCatalogInput"
              },
              {
                "type": "null"
              }
            ]
          },
          "catalog_type": {
            "$ref": "#/components/schemas/SonarCatalogSchemaType"
          }
        },
        "type": "object",
        "required": ["catalog_type"],
        "title": "SourceDefinitionCatalogCreateRequest"
      },
      "SourceDefinitionCatalogCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "SourceDefinitionCatalogCreateResponse"
      },
      "SourceDefinitionCatalogDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "SourceDefinitionCatalogDeleteResponse"
      },
      "SourceDefinitionCatalogGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "sonar_catalog": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SonarCatalogOutput"
              },
              {
                "type": "null"
              }
            ]
          },
          "catalog_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SonarCatalogSchemaType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": ["id", "name", "source_definition_id"],
        "title": "SourceDefinitionCatalogGetResponse"
      },
      "SourceDefinitionCatalogPatchRequest": {
        "properties": {
          "patch_ops": {
            "items": {
              "$ref": "#/components/schemas/PatchOp"
            },
            "type": "array",
            "title": "Patch Ops",
            "description": "List of JSON Patch (RFC 6902) operations to apply to the catalog."
          }
        },
        "type": "object",
        "required": ["patch_ops"],
        "title": "SourceDefinitionCatalogPatchRequest"
      },
      "SourceDefinitionCatalogPatchResponse": {
        "properties": {
          "catalog": {
            "$ref": "#/components/schemas/SonarCatalogOutput"
          }
        },
        "type": "object",
        "required": ["catalog"],
        "title": "SourceDefinitionCatalogPatchResponse"
      },
      "SourceDefinitionCatalogQueryRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query",
            "description": "JMESPath query to filter the catalog. Example: `streams[].name` (names only) or `streams[?name=='users']` (users stream only)."
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "SourceDefinitionCatalogQueryRequest"
      },
      "SourceDefinitionCatalogQueryResponse": {
        "properties": {
          "result": {
            "title": "Result",
            "description": "The result of the JMESPath query on the source definition's catalog"
          }
        },
        "type": "object",
        "required": ["result"],
        "title": "SourceDefinitionCatalogQueryResponse"
      },
      "SourceDefinitionListResponse": {
        "properties": {
          "definitions": {
            "items": {
              "$ref": "#/components/schemas/ConnectorDefinitionSummarized"
            },
            "type": "array",
            "title": "Definitions"
          }
        },
        "type": "object",
        "required": ["definitions"],
        "title": "SourceDefinitionListResponse"
      },
      "SourceDefinitionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "definition": {
            "$ref": "#/components/schemas/ConnectorDefinition"
          }
        },
        "type": "object",
        "required": ["id", "definition"],
        "title": "SourceDefinitionResponse"
      },
      "SourceDefinitionStreamCreateRequest": {
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/SonarStream",
            "description": "The stream to add to the catalog."
          }
        },
        "type": "object",
        "required": ["stream"],
        "title": "SourceDefinitionStreamCreateRequest"
      },
      "SourceDefinitionStreamCreateResponse": {
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/SonarStream"
          }
        },
        "type": "object",
        "required": ["stream"],
        "title": "SourceDefinitionStreamCreateResponse"
      },
      "SourceDefinitionStreamDeleteResponse": {
        "properties": {
          "stream_name": {
            "type": "string",
            "title": "Stream Name"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["stream_name", "deleted_at"],
        "title": "SourceDefinitionStreamDeleteResponse"
      },
      "SourceDefinitionStreamPatchRequest": {
        "properties": {
          "patch_ops": {
            "items": {
              "$ref": "#/components/schemas/PatchOp"
            },
            "type": "array",
            "title": "Patch Ops",
            "description": "List of JSON Patch (RFC 6902) operations to apply to the stream."
          }
        },
        "type": "object",
        "required": ["patch_ops"],
        "title": "SourceDefinitionStreamPatchRequest"
      },
      "SourceDefinitionStreamPatchResponse": {
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/SonarStream"
          }
        },
        "type": "object",
        "required": ["stream"],
        "title": "SourceDefinitionStreamPatchResponse"
      },
      "SourceDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "SourceDeleteResponse"
      },
      "SourceDiscoverResponse": {
        "properties": {
          "source_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Id"
          },
          "sonar_catalog": {
            "$ref": "#/components/schemas/SonarCatalogOutput"
          }
        },
        "type": "object",
        "required": ["source_id", "sonar_catalog"],
        "title": "SourceDiscoverResponse"
      },
      "SourceGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_template": {
            "$ref": "#/components/schemas/DetailedSourceTemplate"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_template", "source_config"],
        "title": "SourceGetResponse"
      },
      "SourceListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "summarized_source_template": {
            "$ref": "#/components/schemas/SummarizedSourceTemplate"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "summarized_source_template"],
        "title": "SourceListItem"
      },
      "SourceListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SourceListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "SourceListResponse"
      },
      "SourceStreamCreateRequest": {
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/SonarStream",
            "description": "The stream to add to the catalog."
          }
        },
        "type": "object",
        "required": ["stream"],
        "title": "SourceStreamCreateRequest"
      },
      "SourceStreamCreateResponse": {
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/SonarStream"
          }
        },
        "type": "object",
        "required": ["stream"],
        "title": "SourceStreamCreateResponse"
      },
      "SourceStreamDeleteResponse": {
        "properties": {
          "stream_name": {
            "type": "string",
            "title": "Stream Name"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["stream_name", "deleted_at"],
        "title": "SourceStreamDeleteResponse"
      },
      "SourceStreamPatchRequest": {
        "properties": {
          "patch_ops": {
            "items": {
              "$ref": "#/components/schemas/PatchOp"
            },
            "type": "array",
            "title": "Patch Ops",
            "description": "List of JSON Patch (RFC 6902) operations to apply to the stream."
          }
        },
        "type": "object",
        "required": ["patch_ops"],
        "title": "SourceStreamPatchRequest"
      },
      "SourceStreamPatchResponse": {
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/SonarStream"
          }
        },
        "type": "object",
        "required": ["stream"],
        "title": "SourceStreamPatchResponse"
      },
      "SourceTemplateCloneRequest": {
        "properties": {
          "original_source_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Original Source Template Id",
            "description": "ID of the source template to clone"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Optional name for the cloned template. If not provided, uses the original template's name"
          }
        },
        "type": "object",
        "required": ["original_source_template_id"],
        "title": "SourceTemplateCloneRequest",
        "description": "Request to clone an existing source template"
      },
      "SourceTemplateCreateRequest": {
        "properties": {
          "actor_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Actor Definition Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name for the template."
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config",
            "description": "A template configuration containing default values for all those fields that the end user will *not* provide. Personalized fields like resource names or secrets should not be provided here."
          },
          "customization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceTemplateCustomization"
              },
              {
                "type": "null"
              }
            ],
            "description": "\nCustomizations for the source template. If stream_whitelist is provided, only the specified streams will be synced.\nIf stream_customizations are provided, and stream fields specified will override the default settings for only that\nfield. Where any streams fields are not specified, the default settings will be used.\n"
          }
        },
        "type": "object",
        "required": ["actor_definition_id", "partial_default_config"],
        "title": "SourceTemplateCreateRequest"
      },
      "SourceTemplateCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "customization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceTemplateCustomization"
              },
              {
                "type": "null"
              }
            ],
            "description": "\nCustomizations for the source template. If stream_whitelist is provided, only the specified streams will be synced.\nIf stream_customizations are provided, and stream fields specified will override the default settings for only that\nfield. Where any streams fields are not specified, the default settings will be used.\n"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateCreateResponse"
      },
      "SourceTemplateCustomization": {
        "properties": {
          "stream_selection_mode": {
            "$ref": "#/components/schemas/StreamSelectionMode",
            "description": "Strategy for selecting streams when creating connections",
            "default": "suggested"
          },
          "stream_whitelist": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream Whitelist"
          },
          "stream_customizations": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/StreamCustomization"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream Customizations"
          }
        },
        "type": "object",
        "title": "SourceTemplateCustomization"
      },
      "SourceTemplateDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "SourceTemplateDeleteResponse"
      },
      "SourceTemplateGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "customization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceTemplateCustomization"
              },
              {
                "type": "null"
              }
            ],
            "description": "\nCustomizations for the source template. If stream_whitelist is provided, only the specified streams will be synced.\nIf stream_customizations are provided, and stream fields specified will override the default settings for only that\nfield. Where any streams fields are not specified, the default settings will be used.\n"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateGetResponse"
      },
      "SourceTemplateListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "icon"],
        "title": "SourceTemplateListItem"
      },
      "SourceTemplateListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/SourceTemplateListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "SourceTemplateListResponse"
      },
      "SourceTemplateTagRequest": {
        "properties": {
          "tag": {
            "type": "string",
            "title": "Tag"
          }
        },
        "type": "object",
        "required": ["tag"],
        "title": "SourceTemplateTagRequest"
      },
      "SourceTemplateTagResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "customization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceTemplateCustomization"
              },
              {
                "type": "null"
              }
            ],
            "description": "\nCustomizations for the source template. If stream_whitelist is provided, only the specified streams will be synced.\nIf stream_customizations are provided, and stream fields specified will override the default settings for only that\nfield. Where any streams fields are not specified, the default settings will be used.\n"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateTagResponse"
      },
      "SourceTemplateUntagResponse": {
        "properties": {
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["deleted_at"],
        "title": "SourceTemplateUntagResponse"
      },
      "SourceTemplateUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "propagate": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Propagate",
            "default": false
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config",
            "description": "A template configuration containing default values for all those fields that the end user will *not* provide. Personalized fields like resource names or secrets should not be provided here."
          }
        },
        "type": "object",
        "required": ["partial_default_config"],
        "title": "SourceTemplateUpdateRequest"
      },
      "SourceTemplateUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "source_definition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Source Definition Id"
          },
          "user_config_spec": {
            "$ref": "#/components/schemas/ConnectorSpecification"
          },
          "partial_default_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Partial Default Config"
          },
          "customization": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SourceTemplateCustomization"
              },
              {
                "type": "null"
              }
            ],
            "description": "\nCustomizations for the source template. If stream_whitelist is provided, only the specified streams will be synced.\nIf stream_customizations are provided, and stream fields specified will override the default settings for only that\nfield. Where any streams fields are not specified, the default settings will be used.\n"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "source_definition_id",
          "user_config_spec",
          "partial_default_config"
        ],
        "title": "SourceTemplateUpdateResponse"
      },
      "SourceUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "source_config": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Config"
          }
        },
        "type": "object",
        "title": "SourceUpdateRequest"
      },
      "SourceUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "source_template": {
            "$ref": "#/components/schemas/DetailedSourceTemplate"
          },
          "source_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Source Config"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "source_template", "source_config"],
        "title": "SourceUpdateResponse"
      },
      "StreamCustomization": {
        "properties": {
          "primary_key_fields": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Primary Key Fields"
          },
          "cursor_field": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cursor Field"
          }
        },
        "type": "object",
        "title": "StreamCustomization"
      },
      "StreamSelectionMode": {
        "type": "string",
        "enum": ["all", "suggested", "whitelist"],
        "title": "StreamSelectionMode"
      },
      "SummarizedSourceTemplate": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Icon"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "icon"],
        "title": "SummarizedSourceTemplate"
      },
      "SupportLevel": {
        "type": "string",
        "enum": ["archived", "certified", "community", "none"],
        "title": "SupportLevel"
      },
      "TagSelectionMode": {
        "type": "string",
        "enum": ["all", "any"],
        "title": "TagSelectionMode"
      },
      "TemplateTagCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "TemplateTagCreateRequest"
      },
      "TemplateTagCreateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "organization_id"],
        "title": "TemplateTagCreateResponse"
      },
      "TemplateTagDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "TemplateTagDeleteResponse"
      },
      "TemplateTagListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "organization_id"],
        "title": "TemplateTagListItem"
      },
      "TemplateTagListResponse": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/TemplateTagListItem"
            },
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "TemplateTagListResponse"
      },
      "TemplateTagUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "TemplateTagUpdateRequest"
      },
      "TemplateTagUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "name", "organization_id"],
        "title": "TemplateTagUpdateResponse"
      },
      "TokenRequest": {
        "properties": {
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": ["client_id", "client_secret"],
        "title": "TokenRequest"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          },
          "expires_in": {
            "type": "integer",
            "title": "Expires In"
          }
        },
        "type": "object",
        "required": ["access_token", "token_type", "expires_in"],
        "title": "TokenResponse"
      },
      "ToolCallEvent": {
        "properties": {
          "tool_name": {
            "$ref": "#/components/schemas/AgentToolName"
          },
          "args": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Args"
          }
        },
        "type": "object",
        "required": ["tool_name", "args"],
        "title": "ToolCallEvent",
        "description": "Format of tool call events sent to the browser."
      },
      "ToolResponseEvent": {
        "properties": {
          "tool_name": {
            "$ref": "#/components/schemas/AgentToolName"
          },
          "response": {
            "title": "Response"
          }
        },
        "type": "object",
        "required": ["tool_name", "response"],
        "title": "ToolResponseEvent",
        "description": "Format of tool response events sent to the browser."
      },
      "WidgetTokenCreateRequest": {
        "properties": {
          "workspace_name": {
            "type": "string",
            "title": "Workspace Name",
            "description": "The name of the workspace to create or use."
          },
          "region_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Region Id",
            "description": "The region in which to create the workspace. If not provided, the default US region will be used. US region: 645a183f-b12b-4c6e-8ad3-99e165603450, EU region: b9e48d61-f082-4a14-a8d0-799a907938cb.",
            "examples": [
              "645a183f-b12b-4c6e-8ad3-99e165603450",
              "b9e48d61-f082-4a14-a8d0-799a907938cb"
            ]
          },
          "allowed_origin": {
            "type": "string",
            "title": "Allowed Origin",
            "description": "The allowed origin for the widget."
          },
          "selected_source_template_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Selected Source Template Tags",
            "description": "Optional list of tags to filter which source templates will be available in the widget."
          },
          "selected_source_template_tags_mode": {
            "$ref": "#/components/schemas/TagSelectionMode",
            "description": "Tag selection mode for source templates: 'all' (must have all tags) or 'any' (must have at least one tag). Defaults to 'any'.",
            "default": "any"
          },
          "selected_connection_template_tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Selected Connection Template Tags",
            "description": "Optional list of tags to filter which connection templates will be available in the widget."
          },
          "selected_connection_template_tags_mode": {
            "$ref": "#/components/schemas/TagSelectionMode",
            "description": "Tag selection mode for connection templates: 'all' (must have all tags) or 'any' (must have at least one tag). Defaults to 'any'.",
            "default": "any"
          }
        },
        "type": "object",
        "required": ["workspace_name", "allowed_origin"],
        "title": "WidgetTokenCreateRequest"
      },
      "WidgetTokenCreateResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          }
        },
        "type": "object",
        "required": ["token"],
        "title": "WidgetTokenCreateResponse"
      },
      "WorkspaceDeleteResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier of the deleted workspace"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Deleted At",
            "description": "Timestamp when the workspace was deleted"
          }
        },
        "type": "object",
        "required": ["id", "deleted_at"],
        "title": "WorkspaceDeleteResponse"
      },
      "WorkspaceGetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier for the workspace"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the workspace"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "Organization that owns this workspace"
          },
          "status": {
            "$ref": "#/components/schemas/WorkspaceStatus",
            "description": "The status of the workspace (active or inactive)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Timestamp when the workspace was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp when the workspace was last updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "organization_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "WorkspaceGetResponse"
      },
      "WorkspaceListItem": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier for the workspace"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the workspace"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "Organization that owns this workspace"
          },
          "status": {
            "$ref": "#/components/schemas/WorkspaceStatus",
            "description": "The status of the workspace (active or inactive)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Timestamp when the workspace was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp when the workspace was last updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "organization_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "WorkspaceListItem"
      },
      "WorkspaceListResponse": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next",
            "description": "Next page url, empty if no more pages"
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceListItem"
            },
            "type": "array",
            "title": "Data",
            "description": "List of workspaces matching the query"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "WorkspaceListResponse"
      },
      "WorkspaceStatsResponse": {
        "properties": {
          "active_count": {
            "type": "integer",
            "title": "Active Count",
            "description": "Number of active workspaces"
          },
          "inactive_count": {
            "type": "integer",
            "title": "Inactive Count",
            "description": "Number of inactive workspaces"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count",
            "description": "Total number of workspaces"
          }
        },
        "type": "object",
        "required": ["active_count", "inactive_count", "total_count"],
        "title": "WorkspaceStatsResponse"
      },
      "WorkspaceStatus": {
        "type": "string",
        "enum": ["active", "inactive"],
        "title": "WorkspaceStatus"
      },
      "WorkspaceSyncResponse": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count",
            "description": "Total number of workspaces found"
          },
          "created_count": {
            "type": "integer",
            "title": "Created Count",
            "description": "Number of workspaces created locally"
          },
          "created_workspace_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Created Workspace Ids",
            "description": "IDs of workspaces created"
          }
        },
        "type": "object",
        "required": ["total_count", "created_count", "created_workspace_ids"],
        "title": "WorkspaceSyncResponse"
      },
      "WorkspaceUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "New name for the workspace"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WorkspaceStatus"
              },
              {
                "type": "null"
              }
            ],
            "description": "Set status to active or inactive"
          }
        },
        "type": "object",
        "title": "WorkspaceUpdateRequest"
      },
      "WorkspaceUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Unique identifier for the workspace"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the workspace"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "title": "Organization Id",
            "description": "Organization that owns this workspace"
          },
          "status": {
            "$ref": "#/components/schemas/WorkspaceStatus",
            "description": "The status of the workspace (active or inactive)"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Timestamp when the workspace was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "Timestamp when the workspace was last updated"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "organization_id",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "WorkspaceUpdateResponse"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "Embedded",
      "description": "All the endpoints necessary to retrieve credentials for your end users."
    },
    {
      "name": "Sonar - APIs",
      "description": "Operator endpoints to access end user's API sources without requiring credentials."
    },
    {
      "name": "Sonar - Files",
      "description": "Operator endpoints to access end user's file sources (GDrive, Sharepoint, S3...) without requiring credentials"
    },
    {
      "name": "Sources",
      "description": "Operator endpoints to list all the configured sources."
    },
    {
      "name": "Template Connections",
      "description": "Operator endpoints to configure default connections setup."
    },
    {
      "name": "Template Sources",
      "description": "Operator endpoints to configure default source setup."
    }
  ]
}
