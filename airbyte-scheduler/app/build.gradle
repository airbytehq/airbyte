plugins {
    id 'application'
}

dependencies {
    implementation 'io.fabric8:kubernetes-client:5.9.0'
    implementation 'io.temporal:temporal-sdk:1.6.0'

    implementation project(':airbyte-analytics')
    implementation project(':airbyte-api')
    implementation project(':airbyte-config:models')
    implementation project(':airbyte-config:persistence')
    implementation project(':airbyte-db:lib')
    implementation project(':airbyte-json-validation')
    implementation project(':airbyte-metrics')
    implementation project(':airbyte-protocol:models')
    implementation project(':airbyte-scheduler:models')
    implementation project(':airbyte-scheduler:persistence')
    implementation project(':airbyte-workers')

    testImplementation "org.testcontainers:postgresql:1.15.3"
}

application {
    applicationName = "airbyte-scheduler"
    mainClass = 'io.airbyte.scheduler.app.SchedulerApp'
    applicationDefaultJvmArgs = ['-XX:MaxRAMPercentage=75.0']
}

Properties env = new Properties()
rootProject.file('.env.dev').withInputStream { env.load(it) }

run {
    // default for running on local machine.
    environment "DATABASE_USER", env.DATABASE_USER
    environment "DATABASE_PASSWORD", env.DATABASE_PASSWORD

    environment "CONFIG_DATABASE_USER", env.CONFIG_DATABASE_USER
    environment "CONFIG_DATABASE_PASSWORD", env.CONFIG_DATABASE_PASSWORD

    // we map the docker pg db to port 5433 so it does not conflict with other pg instances.
    environment "DATABASE_URL", "jdbc:postgresql://localhost:5433/${env.DATABASE_DB}"
    environment "CONFIG_DATABASE_URL", "jdbc:postgresql://localhost:5433/${env.CONFIG_DATABASE_DB}"

    environment "RUN_DATABASE_MIGRATION_ON_STARTUP", env.RUN_DATABASE_MIGRATION_ON_STARTUP

    environment "WORKSPACE_ROOT", env.WORKSPACE_ROOT
    environment "WORKSPACE_DOCKER_MOUNT", env.WORKSPACE_DOCKER_MOUNT
    environment "LOCAL_DOCKER_MOUNT", env.LOCAL_DOCKER_MOUNT
    environment "CONFIG_ROOT", "/tmp/airbyte_config"
    environment "TRACKING_STRATEGY", env.TRACKING_STRATEGY
    environment "AIRBYTE_VERSION", env.VERSION
    environment "AIRBYTE_ROLE", System.getenv('AIRBYTE_ROLE')
    environment "TEMPORAL_HOST", "localhost:7233"

}

task copyGeneratedTar(type: Copy) {
    dependsOn copyDocker
    dependsOn distTar

    from('build/distributions') {
        include 'airbyte-scheduler-*.tar'
    }
    into 'build/docker/bin'
}

Task dockerBuildTask = getDockerBuildTask("scheduler",  "$project.projectDir")
dockerBuildTask.dependsOn(copyGeneratedTar)
assemble.dependsOn(dockerBuildTask)
