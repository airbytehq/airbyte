import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.jsonschema2pojo.SourceType

plugins {
    id 'application'
    id 'com.github.eirnym.js2p' version '1.0'
    id 'airbyte-integration-test-java'
}

configurations {
    jdbc
}

dependencies {
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.4.0'
    implementation 'com.auth0:java-jwt:3.19.2'
    implementation 'io.fabric8:kubernetes-client:5.12.2'
    implementation 'io.temporal:temporal-sdk:1.8.1'
    implementation 'org.apache.ant:ant:1.10.10'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.eclipse.jetty:jetty-server:9.4.31.v20200723'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.31.v20200723'
    implementation 'org.quartz-scheduler:quartz:2.3.2'
    implementation libs.flyway.core
    implementation libs.micrometer.statsd

    implementation project(':airbyte-analytics')
    implementation project(':airbyte-api')
    implementation project(':airbyte-commons-docker')
    implementation project(':airbyte-config:config-models')
    implementation project(':airbyte-config:config-persistence')
    implementation project(':airbyte-db:jooq')
    implementation project(':airbyte-db:db-lib')
    implementation project(':airbyte-metrics:metrics-lib')
    implementation project(':airbyte-json-validation')
    implementation project(':airbyte-protocol:protocol-models')
    implementation project(':airbyte-scheduler:scheduler-persistence')
    implementation project(':airbyte-scheduler:scheduler-models')
    implementation project(':airbyte-api')

    testImplementation 'io.temporal:temporal-testing:1.8.1'
    testImplementation 'com.jayway.jsonpath:json-path:2.7.0'
    testImplementation libs.flyway.core
    testImplementation 'org.mockito:mockito-inline:4.0.0'
    testImplementation libs.postgresql
    testImplementation libs.platform.testcontainers
    testImplementation libs.platform.testcontainers.postgresql

    testImplementation project(':airbyte-commons-docker')
    testImplementation project(':airbyte-test-utils')

    integrationTestJavaImplementation project(':airbyte-workers')
}

jsonSchema2Pojo {
    sourceType = SourceType.YAMLSCHEMA
    source = files("${sourceSets.main.output.resourcesDir}/workers_models")
    targetDirectory = new File(project.buildDir, 'generated/src/gen/java/')
    removeOldOutput = true

    targetPackage = 'io.airbyte.scheduler.models'

    useLongIntegers = true
    generateBuilders = true
    includeConstructors = false
    includeSetters = true
}

mainClassName = 'io.airbyte.workers.WorkerApp'

application {
    mainClass = mainClassName
    applicationDefaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
}

task copyGeneratedTar(type: Copy) {
    dependsOn copyDocker
    dependsOn distTar

    from('build/distributions') {
        include 'airbyte-workers-*.tar'
    }
    into 'build/docker/bin'
}

Task dockerBuildTask = getDockerBuildTask("worker", "$project.projectDir", "$rootProject.ext.version", "$rootProject.ext.image_tag")
dockerBuildTask.dependsOn(copyGeneratedTar)
assemble.dependsOn(dockerBuildTask)

task cloudStorageIntegrationTest(type: Test) {
    useJUnitPlatform {
        includeTags cloudStorageTestTagName
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

Task publishArtifactsTask = getPublishArtifactsTask("$rootProject.ext.version", project)

@SuppressWarnings('GroovyAssignabilityCheck')
def Task getDockerBuildTask(String artifactName, String projectDir, String buildVersion, String buildTag) {
    return task ("buildDockerImage-$artifactName"(type: DockerBuildImage, group: "$projectDir") {
        // This is currently only used for connectors.
        def jdkVersion = System.getenv('JDK_VERSION') ?: '17.0.1'

        def arch = System.getenv('BUILD_ARCH') ?: System.getProperty("os.arch").toLowerCase()
        def isArm64 = arch == "aarch64" || arch == "arm64"

        def buildPlatform = System.getenv('DOCKER_BUILD_PLATFORM') ?: isArm64 ? 'linux/arm64' : 'linux/amd64'
        def alpineImage = System.getenv('ALPINE_IMAGE') ?: isArm64 ? 'arm64v8/alpine:3.14' : 'amd64/alpine:3.14'
        def nginxImage = System.getenv('NGINX_IMAGE') ?: isArm64 ? 'arm64v8/nginx:alpine' : 'amd64/nginx:alpine'
        def openjdkImage = System.getenv('JDK_IMAGE') ?: isArm64 ? "arm64v8/openjdk:19-slim-bullseye" : "amd64/openjdk:19-slim-bullseye"
        def buildArch = System.getenv('DOCKER_BUILD_ARCH') ?: isArm64 ? 'arm64' : 'amd64'

        inputDir = file("$projectDir/build/docker")
        platform = buildPlatform
        images.add("airbyte/$artifactName:$buildTag")
        buildArgs.put('JDK_VERSION', jdkVersion)
        buildArgs.put('DOCKER_BUILD_ARCH', buildArch)
        buildArgs.put('ALPINE_IMAGE', alpineImage)
        buildArgs.put('NGINX_IMAGE', nginxImage)
        buildArgs.put('JDK_IMAGE', openjdkImage)
        buildArgs.put('VERSION', buildVersion)
    })
}