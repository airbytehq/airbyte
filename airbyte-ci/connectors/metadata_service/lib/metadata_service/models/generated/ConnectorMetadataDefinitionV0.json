{
  "title": "ConnectorMetadataDefinitionV0",
  "type": "object",
  "properties": {
    "metadataSpecVersion": {
      "title": "Metadataspecversion",
      "type": "string"
    },
    "data": {
      "$ref": "#/definitions/Data"
    }
  },
  "required": [
    "metadataSpecVersion",
    "data"
  ],
  "additionalProperties": false,
  "definitions": {
    "ConnectorBuildOptions": {
      "title": "ConnectorBuildOptions",
      "type": "object",
      "properties": {
        "baseImage": {
          "title": "Baseimage",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SecretStore": {
      "title": "SecretStore",
      "type": "object",
      "properties": {
        "alias": {
          "title": "Alias",
          "description": "The alias of the secret store which can map to its actual secret address",
          "type": "string"
        },
        "type": {
          "title": "Type",
          "description": "The type of the secret store",
          "enum": [
            "GSM"
          ],
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Secret": {
      "title": "Secret",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The secret name in the secret store",
          "type": "string"
        },
        "fileName": {
          "title": "Filename",
          "description": "The name of the file to which the secret value would be persisted",
          "type": "string"
        },
        "secretStore": {
          "$ref": "#/definitions/SecretStore"
        }
      },
      "required": [
        "name",
        "secretStore"
      ],
      "additionalProperties": false
    },
    "TestConnections": {
      "title": "TestConnections",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "description": "The connection name",
          "type": "string"
        },
        "id": {
          "title": "Id",
          "description": "The connection ID",
          "type": "string"
        }
      },
      "required": [
        "name",
        "id"
      ],
      "additionalProperties": false
    },
    "ConnectorTestSuiteOptions": {
      "title": "ConnectorTestSuiteOptions",
      "type": "object",
      "properties": {
        "suite": {
          "title": "Suite",
          "description": "Name of the configured test suite",
          "enum": [
            "unitTests",
            "integrationTests",
            "acceptanceTests",
            "liveTests"
          ],
          "type": "string"
        },
        "testSecrets": {
          "title": "Testsecrets",
          "description": "List of secrets required to run the test suite",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Secret"
          }
        },
        "testConnections": {
          "title": "Testconnections",
          "description": "List of sandbox cloud connections that tests can be run against",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TestConnections"
          }
        }
      },
      "required": [
        "suite"
      ],
      "additionalProperties": false
    },
    "ReleaseStage": {
      "title": "ReleaseStage",
      "description": "enum that describes a connector's release stage",
      "enum": [
        "alpha",
        "beta",
        "generally_available",
        "custom"
      ],
      "type": "string"
    },
    "SupportLevel": {
      "title": "SupportLevel",
      "description": "enum that describes a connector's release stage",
      "enum": [
        "community",
        "certified",
        "archived"
      ],
      "type": "string"
    },
    "AllowedHosts": {
      "title": "AllowedHosts",
      "type": "object",
      "properties": {
        "hosts": {
          "title": "Hosts",
          "description": "An array of hosts that this connector can connect to.  AllowedHosts not being present for the source or destination means that access to all hosts is allowed.  An empty list here means that no network access is granted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NormalizationDestinationDefinitionConfig": {
      "title": "NormalizationDestinationDefinitionConfig",
      "type": "object",
      "properties": {
        "normalizationRepository": {
          "title": "Normalizationrepository",
          "description": "a field indicating the name of the repository to be used for normalization. If the value of the flag is NULL - normalization is not used.",
          "type": "string"
        },
        "normalizationTag": {
          "title": "Normalizationtag",
          "description": "a field indicating the tag of the docker repository to be used for normalization.",
          "type": "string"
        },
        "normalizationIntegrationType": {
          "title": "Normalizationintegrationtype",
          "description": "a field indicating the type of integration dialect to use for normalization.",
          "type": "string"
        }
      },
      "required": [
        "normalizationRepository",
        "normalizationTag",
        "normalizationIntegrationType"
      ]
    },
    "SuggestedStreams": {
      "title": "SuggestedStreams",
      "type": "object",
      "properties": {
        "streams": {
          "title": "Streams",
          "description": "An array of streams that this connector suggests the average user will want.  SuggestedStreams not being present for the source means that all streams are suggested.  An empty list here means that no streams are suggested.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceRequirements": {
      "title": "ResourceRequirements",
      "type": "object",
      "properties": {
        "cpu_request": {
          "title": "Cpu Request",
          "type": "string"
        },
        "cpu_limit": {
          "title": "Cpu Limit",
          "type": "string"
        },
        "memory_request": {
          "title": "Memory Request",
          "type": "string"
        },
        "memory_limit": {
          "title": "Memory Limit",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "JobType": {
      "title": "JobType",
      "description": "enum that describes the different types of jobs that the platform runs.",
      "enum": [
        "get_spec",
        "check_connection",
        "discover_schema",
        "sync",
        "reset_connection",
        "connection_updater",
        "replicate"
      ],
      "type": "string"
    },
    "JobTypeResourceLimit": {
      "title": "JobTypeResourceLimit",
      "type": "object",
      "properties": {
        "jobType": {
          "$ref": "#/definitions/JobType"
        },
        "resourceRequirements": {
          "$ref": "#/definitions/ResourceRequirements"
        }
      },
      "required": [
        "jobType",
        "resourceRequirements"
      ],
      "additionalProperties": false
    },
    "ActorDefinitionResourceRequirements": {
      "title": "ActorDefinitionResourceRequirements",
      "type": "object",
      "properties": {
        "default": {
          "title": "Default",
          "description": "if set, these are the requirements that should be set for ALL jobs run for this actor definition.",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceRequirements"
            }
          ]
        },
        "jobSpecific": {
          "title": "Jobspecific",
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobTypeResourceLimit"
          }
        }
      },
      "additionalProperties": false
    },
    "RegistryOverrides": {
      "title": "RegistryOverrides",
      "type": "object",
      "properties": {
        "enabled": {
          "title": "Enabled",
          "type": "boolean"
        },
        "name": {
          "title": "Name",
          "type": "string"
        },
        "dockerRepository": {
          "title": "Dockerrepository",
          "type": "string"
        },
        "dockerImageTag": {
          "title": "Dockerimagetag",
          "type": "string"
        },
        "supportsDbt": {
          "title": "Supportsdbt",
          "type": "boolean"
        },
        "supportsNormalization": {
          "title": "Supportsnormalization",
          "type": "boolean"
        },
        "license": {
          "title": "License",
          "type": "string"
        },
        "documentationUrl": {
          "title": "Documentationurl",
          "minLength": 1,
          "maxLength": 65536,
          "format": "uri",
          "type": "string"
        },
        "connectorSubtype": {
          "title": "Connectorsubtype",
          "type": "string"
        },
        "allowedHosts": {
          "$ref": "#/definitions/AllowedHosts"
        },
        "normalizationConfig": {
          "$ref": "#/definitions/NormalizationDestinationDefinitionConfig"
        },
        "suggestedStreams": {
          "$ref": "#/definitions/SuggestedStreams"
        },
        "resourceRequirements": {
          "$ref": "#/definitions/ActorDefinitionResourceRequirements"
        }
      },
      "required": [
        "enabled"
      ],
      "additionalProperties": false
    },
    "RegistryOverride": {
      "title": "RegistryOverride",
      "type": "object",
      "properties": {
        "oss": {
          "$ref": "#/definitions/RegistryOverrides"
        },
        "cloud": {
          "$ref": "#/definitions/RegistryOverrides"
        }
      },
      "additionalProperties": false
    },
    "RolloutConfiguration": {
      "title": "RolloutConfiguration",
      "type": "object",
      "properties": {
        "enableProgressiveRollout": {
          "title": "Enableprogressiverollout",
          "description": "Whether to enable progressive rollout for the connector.",
          "default": false,
          "type": "boolean"
        },
        "initialPercentage": {
          "title": "Initialpercentage",
          "description": "The percentage of users that should receive the new version initially.",
          "default": 0,
          "minimum": 0,
          "maximum": 100,
          "type": "integer"
        },
        "maxPercentage": {
          "title": "Maxpercentage",
          "description": "The percentage of users who should receive the release candidate during the test phase before full rollout.",
          "default": 50,
          "minimum": 0,
          "maximum": 100,
          "type": "integer"
        },
        "advanceDelayMinutes": {
          "title": "Advancedelayminutes",
          "description": "The number of minutes to wait before advancing the rollout percentage.",
          "default": 10,
          "minimum": 10,
          "type": "integer"
        }
      },
      "additionalProperties": false
    },
    "StreamBreakingChangeScope": {
      "title": "StreamBreakingChangeScope",
      "type": "object",
      "properties": {
        "scopeType": {
          "title": "Scopetype",
          "default": "stream",
          "const": "stream"
        },
        "impactedScopes": {
          "title": "Impactedscopes",
          "description": "List of streams that are impacted by the breaking change.",
          "minItems": 1,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "impactedScopes"
      ],
      "additionalProperties": false
    },
    "BreakingChangeScope": {
      "title": "BreakingChangeScope",
      "description": "A scope that can be used to limit the impact of a breaking change.",
      "allOf": [
        {
          "$ref": "#/definitions/StreamBreakingChangeScope"
        }
      ]
    },
    "VersionBreakingChange": {
      "title": "VersionBreakingChange",
      "type": "object",
      "properties": {
        "upgradeDeadline": {
          "title": "Upgradedeadline",
          "description": "The deadline by which to upgrade before the breaking change takes effect.",
          "type": "string",
          "format": "date"
        },
        "message": {
          "title": "Message",
          "description": "Descriptive message detailing the breaking change.",
          "type": "string"
        },
        "deadlineAction": {
          "title": "Deadlineaction",
          "description": "Action to do when the deadline is reached.",
          "enum": [
            "auto_upgrade",
            "disable"
          ],
          "type": "string"
        },
        "migrationDocumentationUrl": {
          "title": "Migrationdocumentationurl",
          "description": "URL to documentation on how to migrate to the current version. Defaults to ${documentationUrl}-migrations#${version}",
          "minLength": 1,
          "maxLength": 65536,
          "format": "uri",
          "type": "string"
        },
        "scopedImpact": {
          "title": "Scopedimpact",
          "description": "List of scopes that are impacted by the breaking change. If not specified, the breaking change cannot be scoped to reduce impact via the supported scope types.",
          "minItems": 1,
          "type": "array",
          "items": {
            "$ref": "#/definitions/BreakingChangeScope"
          }
        }
      },
      "required": [
        "upgradeDeadline",
        "message"
      ],
      "additionalProperties": false
    },
    "ConnectorBreakingChanges": {
      "title": "ConnectorBreakingChanges",
      "description": "Each entry denotes a breaking change in a specific version of a connector that requires user action to upgrade.",
      "type": "object",
      "patternProperties": {
        "^\\d+\\.\\d+\\.\\d+$": {
          "$ref": "#/definitions/VersionBreakingChange"
        }
      },
      "additionalProperties": false
    },
    "ConnectorReleases": {
      "title": "ConnectorReleases",
      "type": "object",
      "properties": {
        "rolloutConfiguration": {
          "$ref": "#/definitions/RolloutConfiguration"
        },
        "breakingChanges": {
          "$ref": "#/definitions/ConnectorBreakingChanges"
        },
        "migrationDocumentationUrl": {
          "title": "Migrationdocumentationurl",
          "description": "URL to documentation on how to migrate from the previous version to the current version. Defaults to ${documentationUrl}-migrations",
          "minLength": 1,
          "maxLength": 65536,
          "format": "uri",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "AirbyteInternal": {
      "title": "AirbyteInternal",
      "type": "object",
      "properties": {
        "sl": {
          "title": "Sl",
          "enum": [
            0,
            100,
            200,
            300
          ],
          "type": "integer"
        },
        "ql": {
          "title": "Ql",
          "enum": [
            0,
            100,
            200,
            300,
            400,
            500,
            600
          ],
          "type": "integer"
        },
        "isEnterprise": {
          "title": "Isenterprise",
          "default": false,
          "type": "boolean"
        },
        "requireVersionIncrementsInPullRequests": {
          "title": "Requireversionincrementsinpullrequests",
          "description": "When false, version increment checks will be skipped for this connector",
          "default": true,
          "type": "boolean"
        }
      }
    },
    "PyPi": {
      "title": "PyPi",
      "type": "object",
      "properties": {
        "enabled": {
          "title": "Enabled",
          "type": "boolean"
        },
        "packageName": {
          "title": "Packagename",
          "description": "The name of the package on PyPi.",
          "type": "string"
        }
      },
      "required": [
        "enabled",
        "packageName"
      ],
      "additionalProperties": false
    },
    "RemoteRegistries": {
      "title": "RemoteRegistries",
      "type": "object",
      "properties": {
        "pypi": {
          "$ref": "#/definitions/PyPi"
        }
      },
      "additionalProperties": false
    },
    "GitInfo": {
      "title": "GitInfo",
      "type": "object",
      "properties": {
        "commit_sha": {
          "title": "Commit Sha",
          "description": "The git commit sha of the last commit that modified this file.",
          "type": "string"
        },
        "commit_timestamp": {
          "title": "Commit Timestamp",
          "description": "The git commit timestamp of the last commit that modified this file.",
          "type": "string",
          "format": "date-time"
        },
        "commit_author": {
          "title": "Commit Author",
          "description": "The git commit author of the last commit that modified this file.",
          "type": "string"
        },
        "commit_author_email": {
          "title": "Commit Author Email",
          "description": "The git commit author email of the last commit that modified this file.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SourceFileInfo": {
      "title": "SourceFileInfo",
      "type": "object",
      "properties": {
        "metadata_etag": {
          "title": "Metadata Etag",
          "type": "string"
        },
        "metadata_file_path": {
          "title": "Metadata File Path",
          "type": "string"
        },
        "metadata_bucket_name": {
          "title": "Metadata Bucket Name",
          "type": "string"
        },
        "metadata_last_modified": {
          "title": "Metadata Last Modified",
          "type": "string"
        },
        "registry_entry_generated_at": {
          "title": "Registry Entry Generated At",
          "type": "string"
        }
      }
    },
    "ConnectorMetrics": {
      "title": "ConnectorMetrics",
      "type": "object",
      "properties": {
        "all": {
          "title": "All"
        },
        "cloud": {
          "title": "Cloud"
        },
        "oss": {
          "title": "Oss"
        }
      }
    },
    "GeneratedFields": {
      "title": "GeneratedFields",
      "type": "object",
      "properties": {
        "git": {
          "$ref": "#/definitions/GitInfo"
        },
        "source_file_info": {
          "$ref": "#/definitions/SourceFileInfo"
        },
        "metrics": {
          "$ref": "#/definitions/ConnectorMetrics"
        },
        "sbomUrl": {
          "title": "Sbomurl",
          "description": "URL to the SBOM file",
          "type": "string"
        }
      }
    },
    "ConnectorIPCDataChannel": {
      "title": "ConnectorIPCDataChannel",
      "type": "object",
      "properties": {
        "version": {
          "title": "Version",
          "description": "Version of the data channel specification",
          "type": "string"
        },
        "supportedSerialization": {
          "title": "Supportedserialization",
          "type": "array",
          "items": {
            "enum": [
              "JSONL",
              "PROTOBUF",
              "FLATBUFFERS"
            ],
            "type": "string"
          }
        },
        "supportedTransport": {
          "title": "Supportedtransport",
          "type": "array",
          "items": {
            "enum": [
              "STDIO",
              "SOCKET"
            ],
            "type": "string"
          }
        }
      },
      "required": [
        "version",
        "supportedSerialization",
        "supportedTransport"
      ]
    },
    "ConnectorIPCOptions": {
      "title": "ConnectorIPCOptions",
      "type": "object",
      "properties": {
        "dataChannel": {
          "$ref": "#/definitions/ConnectorIPCDataChannel"
        }
      },
      "required": [
        "dataChannel"
      ]
    },
    "Data": {
      "title": "Data",
      "type": "object",
      "properties": {
        "name": {
          "title": "Name",
          "type": "string"
        },
        "icon": {
          "title": "Icon",
          "type": "string"
        },
        "definitionId": {
          "title": "Definitionid",
          "type": "string",
          "format": "uuid"
        },
        "connectorBuildOptions": {
          "$ref": "#/definitions/ConnectorBuildOptions"
        },
        "connectorTestSuitesOptions": {
          "title": "Connectortestsuitesoptions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorTestSuiteOptions"
          }
        },
        "connectorType": {
          "title": "Connectortype",
          "enum": [
            "destination",
            "source"
          ],
          "type": "string"
        },
        "dockerRepository": {
          "title": "Dockerrepository",
          "type": "string"
        },
        "dockerImageTag": {
          "title": "Dockerimagetag",
          "type": "string"
        },
        "supportsDbt": {
          "title": "Supportsdbt",
          "type": "boolean"
        },
        "supportsNormalization": {
          "title": "Supportsnormalization",
          "type": "boolean"
        },
        "license": {
          "title": "License",
          "type": "string"
        },
        "documentationUrl": {
          "title": "Documentationurl",
          "minLength": 1,
          "maxLength": 65536,
          "format": "uri",
          "type": "string"
        },
        "githubIssueLabel": {
          "title": "Githubissuelabel",
          "type": "string"
        },
        "maxSecondsBetweenMessages": {
          "title": "Maxsecondsbetweenmessages",
          "description": "Maximum delay between 2 airbyte protocol messages, in second. The source will timeout if this delay is reached",
          "type": "integer"
        },
        "releaseDate": {
          "title": "Releasedate",
          "description": "The date when this connector was first released, in yyyy-mm-dd format.",
          "type": "string",
          "format": "date"
        },
        "protocolVersion": {
          "title": "Protocolversion",
          "description": "the Airbyte Protocol version supported by the connector",
          "type": "string"
        },
        "erdUrl": {
          "title": "Erdurl",
          "description": "The URL where you can visualize the ERD",
          "type": "string"
        },
        "connectorSubtype": {
          "title": "Connectorsubtype",
          "enum": [
            "api",
            "database",
            "datalake",
            "file",
            "custom",
            "message_queue",
            "unknown",
            "vectorstore"
          ],
          "type": "string"
        },
        "releaseStage": {
          "$ref": "#/definitions/ReleaseStage"
        },
        "supportLevel": {
          "$ref": "#/definitions/SupportLevel"
        },
        "tags": {
          "title": "Tags",
          "description": "An array of tags that describe the connector. E.g: language:python, keyword:rds, etc.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "registryOverrides": {
          "$ref": "#/definitions/RegistryOverride"
        },
        "allowedHosts": {
          "$ref": "#/definitions/AllowedHosts"
        },
        "releases": {
          "$ref": "#/definitions/ConnectorReleases"
        },
        "normalizationConfig": {
          "$ref": "#/definitions/NormalizationDestinationDefinitionConfig"
        },
        "suggestedStreams": {
          "$ref": "#/definitions/SuggestedStreams"
        },
        "resourceRequirements": {
          "$ref": "#/definitions/ActorDefinitionResourceRequirements"
        },
        "ab_internal": {
          "$ref": "#/definitions/AirbyteInternal"
        },
        "remoteRegistries": {
          "$ref": "#/definitions/RemoteRegistries"
        },
        "supportsRefreshes": {
          "title": "Supportsrefreshes",
          "default": false,
          "type": "boolean"
        },
        "generated": {
          "$ref": "#/definitions/GeneratedFields"
        },
        "supportsFileTransfer": {
          "title": "Supportsfiletransfer",
          "default": false,
          "type": "boolean"
        },
        "supportsDataActivation": {
          "title": "Supportsdataactivation",
          "default": false,
          "type": "boolean"
        },
        "connectorIPCOptions": {
          "title": "Connectoripcoptions",
          "description": "Advanced options related to connector's inter-process communication",
          "allOf": [
            {
              "$ref": "#/definitions/ConnectorIPCOptions"
            }
          ]
        }
      },
      "required": [
        "name",
        "definitionId",
        "connectorType",
        "dockerRepository",
        "dockerImageTag",
        "license",
        "documentationUrl",
        "githubIssueLabel",
        "connectorSubtype",
        "releaseStage"
      ],
      "additionalProperties": false
    }
  }
}