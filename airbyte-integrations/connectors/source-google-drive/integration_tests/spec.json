{
  "documentationUrl": "https://docs.airbyte.com/integrations/sources/google-drive",
  "connectionSpecification": {
    "title": "Google Drive Source Spec",
    "description": "Used during spec; allows the developer to configure the cloud provider specific options\nthat are needed when users configure a file-based source.",
    "type": "object",
    "properties": {
      "start_date": {
        "title": "Start Date",
        "description": "UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.",
        "examples": ["2021-01-01T00:00:00.000000Z"],
        "format": "date-time",
        "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{6}Z$",
        "pattern_descriptor": "YYYY-MM-DDTHH:mm:ss.SSSSSSZ",
        "order": 1,
        "type": "string"
      },
      "streams": {
        "title": "The list of streams to sync",
        "description": "Each instance of this configuration defines a <a href=\"https://docs.airbyte.com/cloud/core-concepts#stream\">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.",
        "order": 10,
        "type": "array",
        "items": {
          "title": "FileBasedStreamConfig",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "description": "The name of the stream.",
              "type": "string"
            },
            "globs": {
              "title": "Globs",
              "default": ["**"],
              "order": 1,
              "description": "The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href=\"https://en.wikipedia.org/wiki/Glob_(programming)\">here</a>.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "validation_policy": {
              "title": "Validation Policy",
              "description": "The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema.",
              "default": "Emit Record",
              "enum": ["Emit Record", "Skip Record", "Wait for Discover"]
            },
            "input_schema": {
              "title": "Input Schema",
              "description": "The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.",
              "type": "string"
            },
            "primary_key": {
              "title": "Primary Key",
              "description": "The column or columns (for a composite key) that serves as the unique identifier of a record.",
              "type": "string"
            },
            "days_to_sync_if_history_is_full": {
              "title": "Days To Sync If History Is Full",
              "description": "When the state history of the file store is full, syncs will only read files that were last modified in the provided day range.",
              "default": 3,
              "type": "integer"
            },
            "format": {
              "title": "Format",
              "description": "The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.",
              "type": "object",
              "oneOf": [
                {
                  "title": "Avro Format",
                  "type": "object",
                  "properties": {
                    "filetype": {
                      "title": "Filetype",
                      "default": "avro",
                      "const": "avro",
                      "type": "string"
                    },
                    "double_as_string": {
                      "title": "Convert Double Fields to Strings",
                      "description": "Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers.",
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "required": ["filetype"]
                },
                {
                  "title": "CSV Format",
                  "type": "object",
                  "properties": {
                    "filetype": {
                      "title": "Filetype",
                      "default": "csv",
                      "const": "csv",
                      "type": "string"
                    },
                    "delimiter": {
                      "title": "Delimiter",
                      "description": "The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\\t'.",
                      "default": ",",
                      "type": "string"
                    },
                    "quote_char": {
                      "title": "Quote Character",
                      "description": "The character used for quoting CSV values. To disallow quoting, make this field blank.",
                      "default": "\"",
                      "type": "string"
                    },
                    "escape_char": {
                      "title": "Escape Character",
                      "description": "The character used for escaping special characters. To disallow escaping, leave this field blank.",
                      "type": "string"
                    },
                    "encoding": {
                      "title": "Encoding",
                      "description": "The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\" target=\"_blank\">list of python encodings</a> for allowable options.",
                      "default": "utf8",
                      "type": "string"
                    },
                    "double_quote": {
                      "title": "Double Quote",
                      "description": "Whether two quotes in a quoted CSV value denote a single quote in the data.",
                      "default": true,
                      "type": "boolean"
                    },
                    "null_values": {
                      "title": "Null Values",
                      "description": "A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.",
                      "default": [],
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    },
                    "strings_can_be_null": {
                      "title": "Strings Can Be Null",
                      "description": "Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself.",
                      "default": true,
                      "type": "boolean"
                    },
                    "skip_rows_before_header": {
                      "title": "Skip Rows Before Header",
                      "description": "The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field.",
                      "default": 0,
                      "type": "integer"
                    },
                    "skip_rows_after_header": {
                      "title": "Skip Rows After Header",
                      "description": "The number of rows to skip after the header row.",
                      "default": 0,
                      "type": "integer"
                    },
                    "header_definition": {
                      "title": "CSV Header Definition",
                      "description": "How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.",
                      "default": {
                        "header_definition_type": "From CSV"
                      },
                      "oneOf": [
                        {
                          "title": "From CSV",
                          "type": "object",
                          "properties": {
                            "header_definition_type": {
                              "title": "Header Definition Type",
                              "default": "From CSV",
                              "const": "From CSV",
                              "type": "string"
                            }
                          },
                          "required": ["header_definition_type"]
                        },
                        {
                          "title": "Autogenerated",
                          "type": "object",
                          "properties": {
                            "header_definition_type": {
                              "title": "Header Definition Type",
                              "default": "Autogenerated",
                              "const": "Autogenerated",
                              "type": "string"
                            }
                          },
                          "required": ["header_definition_type"]
                        },
                        {
                          "title": "User Provided",
                          "type": "object",
                          "properties": {
                            "header_definition_type": {
                              "title": "Header Definition Type",
                              "default": "User Provided",
                              "const": "User Provided",
                              "type": "string"
                            },
                            "column_names": {
                              "title": "Column Names",
                              "description": "The column names that will be used while emitting the CSV records",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": ["column_names", "header_definition_type"]
                        }
                      ],
                      "type": "object"
                    },
                    "true_values": {
                      "title": "True Values",
                      "description": "A set of case-sensitive strings that should be interpreted as true values.",
                      "default": ["y", "yes", "t", "true", "on", "1"],
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    },
                    "false_values": {
                      "title": "False Values",
                      "description": "A set of case-sensitive strings that should be interpreted as false values.",
                      "default": ["n", "no", "f", "false", "off", "0"],
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  },
                  "required": ["filetype"]
                },
                {
                  "title": "Jsonl Format",
                  "type": "object",
                  "properties": {
                    "filetype": {
                      "title": "Filetype",
                      "default": "jsonl",
                      "const": "jsonl",
                      "type": "string"
                    }
                  },
                  "required": ["filetype"]
                },
                {
                  "title": "Parquet Format",
                  "type": "object",
                  "properties": {
                    "filetype": {
                      "title": "Filetype",
                      "default": "parquet",
                      "const": "parquet",
                      "type": "string"
                    },
                    "decimal_as_float": {
                      "title": "Convert Decimal Fields to Floats",
                      "description": "Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended.",
                      "default": false,
                      "type": "boolean"
                    }
                  },
                  "required": ["filetype"]
                },
                {
                  "title": "Document File Type Format (Experimental)",
                  "type": "object",
                  "properties": {
                    "filetype": {
                      "title": "Filetype",
                      "default": "unstructured",
                      "const": "unstructured",
                      "type": "string"
                    },
                    "skip_unprocessable_file_types": {
                      "type": "boolean",
                      "default": true,
                      "title": "Skip Unprocessable File Types",
                      "description": "If true, skip files that cannot be parsed because of their file type and log a warning. If false, fail the sync. Corrupted files with valid file types will still result in a failed sync.",
                      "always_show": true
                    }
                  },
                  "description": "Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.",
                  "required": ["filetype"]
                }
              ]
            },
            "schemaless": {
              "title": "Schemaless",
              "description": "When enabled, syncs will not validate or structure records against the stream's schema.",
              "default": false,
              "type": "boolean"
            }
          },
          "required": ["name", "format"]
        }
      },
      "folder_url": {
        "title": "Folder Url",
        "description": "URL for the folder you want to sync. Using individual streams and glob patterns, it's possible to only sync a subset of all files located in the folder.",
        "examples": [
          "https://drive.google.com/drive/folders/1Xaz0vXXXX2enKnNYU5qSt9NS70gvMyYn"
        ],
        "order": 0,
        "pattern": "^https://drive.google.com/.+",
        "pattern_descriptor": "https://drive.google.com/drive/folders/MY-FOLDER-ID",
        "type": "string"
      },
      "credentials": {
        "title": "Authentication",
        "description": "Credentials for connecting to the Google Drive API",
        "type": "object",
        "oneOf": [
          {
            "title": "Authenticate via Google (OAuth)",
            "type": "object",
            "properties": {
              "auth_type": {
                "title": "Auth Type",
                "default": "Client",
                "const": "Client",
                "enum": ["Client"],
                "type": "string"
              },
              "client_id": {
                "title": "Client ID",
                "description": "Client ID for the Google Drive API",
                "airbyte_secret": true,
                "type": "string"
              },
              "client_secret": {
                "title": "Client Secret",
                "description": "Client Secret for the Google Drive API",
                "airbyte_secret": true,
                "type": "string"
              },
              "refresh_token": {
                "title": "Refresh Token",
                "description": "Refresh Token for the Google Drive API",
                "airbyte_secret": true,
                "type": "string"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "refresh_token",
              "auth_type"
            ]
          },
          {
            "title": "Service Account Key Authentication",
            "type": "object",
            "properties": {
              "auth_type": {
                "title": "Auth Type",
                "default": "Service",
                "const": "Service",
                "enum": ["Service"],
                "type": "string"
              },
              "service_account_info": {
                "title": "Service Account Information",
                "description": "The JSON key of the service account to use for authorization. Read more <a href=\"https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys\">here</a>.",
                "airbyte_secret": true,
                "type": "string"
              }
            },
            "required": ["service_account_info", "auth_type"]
          }
        ]
      }
    },
    "required": ["streams", "folder_url", "credentials"]
  },
  "advanced_auth": {
    "auth_flow_type": "oauth2.0",
    "predicate_key": ["credentials", "auth_type"],
    "predicate_value": "Client",
    "oauth_config_specification": {
      "complete_oauth_output_specification": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "refresh_token": {
            "type": "string",
            "path_in_connector_config": ["credentials", "refresh_token"]
          }
        }
      },
      "complete_oauth_server_input_specification": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          }
        }
      },
      "complete_oauth_server_output_specification": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "client_id": {
            "type": "string",
            "path_in_connector_config": ["credentials", "client_id"]
          },
          "client_secret": {
            "type": "string",
            "path_in_connector_config": ["credentials", "client_secret"]
          }
        }
      }
    }
  }
}
