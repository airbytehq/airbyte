{
  "documentationUrl": "https://docs.airbyte.com/integrations/sources/postgres",
  "connectionSpecification": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Postgres Source Spec",
    "type": "object",
    "additionalProperties": true,
    "properties": {
      "host": {
        "type": "string",
        "description": "Hostname of the database.",
        "title": "Host",
        "order": 1
      },
      "port": {
        "type": "integer",
        "default": 5432,
        "description": "Port of the database. Defaults to 5432.",
        "title": "Port",
        "order": 2,
        "minimum": 0,
        "maximum": 65536
      },
      "username": {
        "type": "string",
        "description": "The username which is used to access the database.",
        "title": "User",
        "order": 4
      },
      "password": {
        "type": "string",
        "description": "The password associated with the username.",
        "title": "Password",
        "order": 5,
        "always_show": true,
        "airbyte_secret": true
      },
      "schemas": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "The list of schemas to sync from. Defaults to public. Case sensitive.",
        "title": "Schemas",
        "order": 6,
        "always_show": true,
        "uniqueItems": true
      },
      "jdbc_url_params": {
        "type": "string",
        "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).",
        "title": "JDBC URL Params",
        "order": 7
      },
      "tunnel_method": {
        "oneOf": [
          {
            "title": "No Tunnel",
            "type": "object",
            "additionalProperties": true,
            "description": "No ssh tunnel needed to connect to database",
            "properties": {
              "tunnel_method": {
                "type": "string",
                "enum": ["NO_TUNNEL"],
                "default": "NO_TUNNEL"
              }
            },
            "required": ["tunnel_method"]
          },
          {
            "title": "SSH Key Authentication",
            "type": "object",
            "additionalProperties": true,
            "description": "Connect through a jump server tunnel host using username and ssh key",
            "properties": {
              "tunnel_method": {
                "type": "string",
                "enum": ["SSH_KEY_AUTH"],
                "default": "SSH_KEY_AUTH"
              },
              "tunnel_host": {
                "type": "string",
                "description": "Hostname of the jump server host that allows inbound ssh tunnel.",
                "title": "SSH Tunnel Jump Server Host",
                "order": 1
              },
              "tunnel_port": {
                "type": "integer",
                "default": 22,
                "description": "Port on the proxy/jump server that accepts inbound ssh connections.",
                "title": "SSH Connection Port",
                "order": 2,
                "minimum": 0,
                "maximum": 65536
              },
              "tunnel_user": {
                "type": "string",
                "description": "OS-level username for logging into the jump server host",
                "title": "SSH Login Username",
                "order": 3
              },
              "ssh_key": {
                "type": "string",
                "description": "OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )",
                "title": "SSH Private Key",
                "order": 4,
                "multiline": true,
                "airbyte_secret": true
              }
            },
            "required": [
              "tunnel_method",
              "tunnel_host",
              "tunnel_port",
              "tunnel_user",
              "ssh_key"
            ]
          },
          {
            "title": "Password Authentication",
            "type": "object",
            "additionalProperties": true,
            "description": "Connect through a jump server tunnel host using username and password authentication",
            "properties": {
              "tunnel_method": {
                "type": "string",
                "enum": ["SSH_PASSWORD_AUTH"],
                "default": "SSH_PASSWORD_AUTH"
              },
              "tunnel_host": {
                "type": "string",
                "description": "Hostname of the jump server host that allows inbound ssh tunnel.",
                "title": "SSH Tunnel Jump Server Host",
                "order": 1
              },
              "tunnel_port": {
                "type": "integer",
                "default": 22,
                "description": "Port on the proxy/jump server that accepts inbound ssh connections.",
                "title": "SSH Connection Port",
                "order": 2,
                "minimum": 0,
                "maximum": 65536
              },
              "tunnel_user": {
                "type": "string",
                "description": "OS-level username for logging into the jump server host",
                "title": "SSH Login Username",
                "order": 3
              },
              "tunnel_user_password": {
                "type": "string",
                "description": "OS-level password for logging into the jump server host",
                "title": "Password",
                "order": 4,
                "airbyte_secret": true
              }
            },
            "required": [
              "tunnel_method",
              "tunnel_host",
              "tunnel_port",
              "tunnel_user",
              "tunnel_user_password"
            ]
          }
        ],
        "description": "Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.",
        "title": "SSH Tunnel Method",
        "order": 9,
        "type": "object"
      },
      "cursor": {
        "oneOf": [
          {
            "title": "Scan Changes with User Defined Cursor",
            "type": "object",
            "additionalProperties": true,
            "description": "Incrementally detects new inserts and updates using the <a href=\"https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor\">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).",
            "properties": {
              "cursor_method": {
                "type": "string",
                "enum": ["user_defined"],
                "default": "user_defined"
              }
            },
            "required": ["cursor_method"]
          },
          {
            "title": "Read Changes using Change Data Capture (CDC)",
            "type": "object",
            "additionalProperties": true,
            "description": "<i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using Postgres's <a href=\"https://docs.airbyte.com/integrations/connectors/source-postgres#getting-started\"> change data capture feature</a>. This must be enabled on your database.",
            "properties": {
              "cursor_method": {
                "type": "string",
                "enum": ["cdc"],
                "default": "cdc"
              },
              "invalid_cdc_cursor_position_behavior": {
                "type": "string",
                "default": "Fail sync",
                "description": "Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss.",
                "title": "Invalid CDC Position Behavior (Advanced)",
                "order": 1,
                "enum": ["Fail sync", "Re-sync data"],
                "always_show": true
              },
              "initial_load_timeout_hours": {
                "type": "integer",
                "default": 8,
                "description": "The amount of time an initial load is allowed to continue for before catching up on CDC events.",
                "title": "Initial Load Timeout in Hours (Advanced)",
                "order": 2,
                "min": 4,
                "max": 24,
                "always_show": true
              },
              "debezium_shutdown_timeout_seconds": {
                "type": "integer",
                "default": 60,
                "description": "The amount of time to allow the Debezium Engine to shut down, in seconds.",
                "title": "Debezium Engine Shutdown Timeout in Seconds (Advanced)",
                "order": 3,
                "min": 1,
                "max": 3600,
                "always_show": true
              }
            },
            "required": ["cursor_method"]
          }
        ],
        "description": "Configures how data is extracted from the database.",
        "title": "Update Method",
        "order": 10,
        "display_type": "radio",
        "type": "object"
      },
      "database": {
        "type": "string",
        "description": "The name of the database to connect to.",
        "title": "Database Name",
        "order": 3
      },
      "checkpoint_target_interval_seconds": {
        "type": "integer",
        "default": 300,
        "description": "How often (in seconds) a stream should checkpoint, when possible.",
        "title": "Checkpoint Target Time Interval",
        "order": 11
      },
      "max_db_connections": {
        "type": "integer",
        "description": "Maximum number of concurrent queries to the database. Leave empty to let Airbyte optimize performance.",
        "title": "Max Concurrent Queries to Database",
        "order": 12
      },
      "check_privileges": {
        "type": "boolean",
        "default": true,
        "description": "When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature.",
        "title": "Check Table and Column Access Privileges",
        "order": 13
      },
      "ssl_mode": {
        "oneOf": [
          {
            "title": "disable",
            "type": "object",
            "additionalProperties": true,
            "description": "To force communication without encryption.",
            "properties": {
              "mode": {
                "type": "string",
                "enum": ["disable"],
                "default": "disable"
              }
            },
            "required": ["mode"]
          },
          {
            "title": "allow",
            "type": "object",
            "additionalProperties": true,
            "description": "To allow encrypted communication, but not require it.",
            "properties": {
              "mode": {
                "type": "string",
                "enum": ["allow"],
                "default": "allow"
              }
            },
            "required": ["mode"]
          },
          {
            "title": "prefer",
            "type": "object",
            "additionalProperties": true,
            "description": "To allow unencrypted communication only when the source doesn't support encryption.",
            "properties": {
              "mode": {
                "type": "string",
                "enum": ["prefer"],
                "default": "prefer"
              }
            },
            "required": ["mode"]
          },
          {
            "title": "require",
            "type": "object",
            "additionalProperties": true,
            "description": "To always require encryption. Note: The connection will fail if the source doesn't support encryption.",
            "properties": {
              "mode": {
                "type": "string",
                "enum": ["require"],
                "default": "require"
              }
            },
            "required": ["mode"]
          },
          {
            "title": "verify_ca",
            "type": "object",
            "additionalProperties": true,
            "description": "To always require encryption and verify that the source has a valid SSL certificate.",
            "properties": {
              "mode": {
                "type": "string",
                "enum": ["verify_ca"],
                "default": "verify_ca"
              },
              "ca_certificate": {
                "type": "string",
                "description": "CA certificate",
                "title": "CA certificate",
                "airbyte_secret": true,
                "multiline": true
              },
              "client_certificate": {
                "type": "string",
                "description": "Client certificate (this is not a required field, but if you want to use it, you will need to add the Client key as well)",
                "title": "Client certificate File",
                "airbyte_secret": true,
                "multiline": true
              },
              "client_key": {
                "type": "string",
                "description": "Client key (this is not a required field, but if you want to use it, you will need to add the Client certificate as well)",
                "title": "Client Key",
                "airbyte_secret": true,
                "multiline": true
              },
              "client_key_password": {
                "type": "string",
                "description": "Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.",
                "title": "Client key password",
                "airbyte_secret": true,
                "multiline": true
              }
            },
            "required": ["mode", "ca_certificate"]
          },
          {
            "title": "verify_full",
            "type": "object",
            "additionalProperties": true,
            "description": "To always require encryption and verify that the source has a valid SSL certificate.",
            "properties": {
              "mode": {
                "type": "string",
                "enum": ["verify_full"],
                "default": "verify_full"
              },
              "ca_certificate": {
                "type": "string",
                "description": "CA certificate",
                "title": "CA certificate",
                "airbyte_secret": true,
                "multiline": true
              },
              "client_certificate": {
                "type": "string",
                "description": "Client certificate (this is not a required field, but if you want to use it, you will need to add the Client key as well)",
                "title": "Client certificate File",
                "airbyte_secret": true,
                "multiline": true
              },
              "client_key": {
                "type": "string",
                "description": "Client key (this is not a required field, but if you want to use it, you will need to add the Client certificate as well)",
                "title": "Client Key",
                "airbyte_secret": true,
                "multiline": true
              },
              "client_key_password": {
                "type": "string",
                "description": "Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.",
                "title": "Client key password",
                "airbyte_secret": true,
                "multiline": true
              }
            },
            "required": ["mode", "ca_certificate"]
          }
        ],
        "description": "The encryption method which is used when communicating with the database.",
        "title": "Encryption",
        "order": 8,
        "default": "require",
        "type": "object"
      }
    },
    "required": [
      "host",
      "port",
      "username",
      "tunnel_method",
      "cursor",
      "database"
    ]
  },
  "supportsNormalization": false,
  "supportsDBT": false,
  "supported_destination_sync_modes": []
}
