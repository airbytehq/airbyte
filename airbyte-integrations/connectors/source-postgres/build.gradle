import org.jsonschema2pojo.SourceType

plugins {
    id 'application'
    id 'airbyte-java-connector'
    id "org.jsonschema2pojo" version "1.2.1"
}

java {
    compileJava {
        options.compilerArgs += "-Xlint:-try,-rawtypes,-unchecked"
    }
}

airbyteJavaConnector {
    cdkVersionRequired = '0.4.8'
    features = ['db-sources']
    useLocalCdk = false
}

airbyteJavaConnector.addCdkDependencies()

application {
    mainClass = 'io.airbyte.integrations.source.postgres.PostgresSource'
    applicationDefaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
}

// Add a configuration for our migrations tasks defined below to encapsulate their dependencies
configurations {
    migrations.extendsFrom implementation
}

configurations.all {
    resolutionStrategy {
        force 'org.jooq:jooq:3.13.4'
    }
}

dependencies {
    testImplementation libs.jooq
    testImplementation libs.hikaricp

    migrations libs.testcontainers.postgresql
    migrations sourceSets.main.output

    // Lombok
    implementation libs.lombok
    annotationProcessor libs.lombok

    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation libs.postgresql
    implementation libs.bundles.datadog

    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation libs.testcontainers.jdbc
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.junit.jupiter.system.stubs
}

jsonSchema2Pojo {
    sourceType = SourceType.YAMLSCHEMA
    source = files("${sourceSets.main.output.resourcesDir}/internal_models")
    targetDirectory = new File(project.buildDir, 'generated/src/gen/java/')
    removeOldOutput = true

    targetPackage = 'io.airbyte.integrations.source.postgres.internal.models'

    useLongIntegers = true
    generateBuilders = true
    includeConstructors = false
    includeSetters = true
}
