/*
 * Copyright (c) 2022 Airbyte, Inc., all rights reserved.
 */

package io.airbyte.integrations.source.relationaldb.state;

import io.airbyte.integrations.source.relationaldb.models.DbState;
import io.airbyte.protocol.models.AirbyteStateMessage;
import io.airbyte.protocol.models.ConfiguredAirbyteCatalog;

/**
 * Variant of the {@link LegacyStateManager} that ensures that the state type is set on any state
 * message generated by this manager. <br />
 * <p>
 * This manager exists to handle the case of a connector that has been updated to use this code, but
 * has not yet been migrated to use the new per-stream state mechanics. This is a temporary state
 * and this class will be removed once all connectors have been updated AND migrated to the new
 * state management mechanism.
 * </p>
 * <br />
 * <p>
 * <b>N.B.</b> This case is different from connectors who have not yet been released with code at or
 * beyond the point at which this class was introduced. In that case, those connectors will continue
 * to use the {@link LegacyStateManager}, as they will continue to receive the legacy state JSON as
 * input.
 * </p>
 *
 * @deprecated This manager may be removed in the future if/once all connectors support per-stream
 *             state management.
 */
@Deprecated(forRemoval = true)
public class LegacyAdapterStateManager extends LegacyStateManager {

  /**
   * Constructs a new {@link LegacyStateManager} that is seeded with the provided {@link DbState}
   * instance.
   *
   * @param dbState The initial state represented as an {@link DbState} instance.
   * @param catalog The {@link ConfiguredAirbyteCatalog} for the connector associated with this state
   *        manager.
   */
  public LegacyAdapterStateManager(final DbState dbState, final ConfiguredAirbyteCatalog catalog) {
    super(dbState, catalog);
  }

  @Override
  public AirbyteStateMessage toState() {
    final AirbyteStateMessage airbyteStateMessage = super.toState();
    // TOD add the legacy state type once available.
    // return airbyteStateMessage.withStateType(AirbyteStateType.LEGACY);
    return airbyteStateMessage;
  }

}
