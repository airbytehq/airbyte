#
# Copyright (c) 2021 Airbyte, Inc., all rights reserved.
#


import json
from datetime import datetime
from typing import Dict, Generator

import boto3
from airbyte_cdk.logger import AirbyteLogger
from airbyte_cdk.models import (
    AirbyteCatalog,
    AirbyteConnectionStatus,
    AirbyteMessage,
    AirbyteRecordMessage,
    AirbyteStream,
    ConfiguredAirbyteCatalog,
    Status,
    Type,
)
from airbyte_cdk.sources import Source
from botocore.exceptions import ClientError


class SourceAmazonSqs(Source):

    def parse_queue_name(self, url: str) -> str:
        return url.rsplit('/', 1)[-1] 


    def check(self, logger: AirbyteLogger, config: json) -> AirbyteConnectionStatus:
        """
        Tests if we can create a connection to the SQS Queue.
        Also validates configuration inputs

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
        the properties of the spec.json file

        :return: AirbyteConnectionStatus indicating a Success or Failure
        """
        try:

            optional_properties = ["MAX_BATCH_SIZE", "MAX_WAIT_TIME", "ATTRIBUTES_TO_RETURN"]
            if "MAX_BATCH_SIZE" in config:
                # Max batch size must be between 1 and 10
                if config["MAX_BATCH_SIZE"] > 10 or config["MAX_BATCH_SIZE"] < 1:
                    raise Exception("MAX_BATCH_SIZE must be between 1 and 10")
            if "MAX_WAIT_TIME" in config:
                # Max wait time must be between 1 and 20
                if config["MAX_WAIT_TIME"] > 20 or config["MAX_WAIT_TIME"] < 1:
                    raise Exception("MAX_WAIT_TIME must be between 1 and 20")

            # Required propeties
            queue_url = config["QUEUE_URL"]
            queue_region = config["REGION"]
            # Senstive Properties
            access_key = config["ACCESS_KEY"]
            secret_key = config["SECRET_KEY"]

            session = boto3.Session(aws_access_key_id=access_key, aws_secret_access_key=secret_key, region_name=queue_region)
            sqs = session.resource("sqs")
            queue = sqs.Queue(url=queue_url)
            attrs = queue.attributes # This will fail if we are not connected to the Queue (AWS.SimpleQueueService.NonExistentQueue)
            return AirbyteConnectionStatus(status=Status.SUCCEEDED)
        except Exception as e:
            return AirbyteConnectionStatus(status=Status.FAILED, message=f"An exception occurred: {str(e)}")

    def discover(self, logger: AirbyteLogger, config: json) -> AirbyteCatalog:
        """
        Returns an AirbyteCatalog representing the available streams and fields in this integration.
        For example, given valid credentials to a Postgres database,
        returns an Airbyte catalog where each postgres table is a stream, and each table column is a field.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
        the properties of the spec.json file

        :return: AirbyteCatalog is an object describing a list of all available streams in this source.
            A stream is an AirbyteStream object that includes:
            - its stream name (or table name in the case of Postgres)
            - json_schema providing the specifications of expected schema for this stream (a list of columns described
            by their names and types)
        """
        streams = []

        # Get the queue name by getting substring after last /
        stream_name = self.parse_queue_name(config["QUEUE_URL"])

        json_schema = {
            "$schema": "http://json-schema.org/draft-07/schema#",
            "type": "object",
            "properties": {"id": {"type": "integer"}, "body": {"type": "string"}, "attributes": {"type": "object"}},
        }
        streams.append(AirbyteStream(name=stream_name, json_schema=json_schema))
        return AirbyteCatalog(streams=streams)

    def read(
        self, logger: AirbyteLogger, config: json, catalog: ConfiguredAirbyteCatalog, state: Dict[str, any]
    ) -> Generator[AirbyteMessage, None, None]:
        """
        Returns a generator of the AirbyteMessages generated by reading the source with the given configuration,
        catalog, and state.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
            the properties of the spec.json file
        :param catalog: The input catalog is a ConfiguredAirbyteCatalog which is almost the same as AirbyteCatalog
            returned by discover(), but
        in addition, it's been configured in the UI! For each particular stream and field, there may have been provided
        with extra modifications such as: filtering streams and/or columns out, renaming some entities, etc
        :param state: When a Airbyte reads data from a source, it might need to keep a checkpoint cursor to resume
            replication in the future from that saved checkpoint.
            This is the object that is provided with state from previous runs and avoid replicating the entire set of
            data everytime.

        :return: A generator that produces a stream of AirbyteRecordMessage contained in AirbyteMessage object.
        """
        stream_name = self.parse_queue_name(config["QUEUE_URL"])

        # Required propeties
        queue_url = config["QUEUE_URL"]
        queue_region = config["REGION"]

        # Optional Properties
        max_batch_size = config.get("MAX_BATCH_SIZE", 10)
        max_wait_time = config.get("MAX_WAIT_TIME", 20)
        attributes_to_return = config.get("ATTRIBUTES_TO_RETURN")
        if attributes_to_return is None:
            attributes_to_return = ["All"]
        else:
            attributes_to_return = attributes_to_return.split(",")

        # Senstive Properties
        access_key = config["ACCESS_KEY"]
        secret_key = config["SECRET_KEY"]

        session = boto3.Session(aws_access_key_id=access_key, aws_secret_access_key=secret_key, region_name=queue_region)
        sqs = session.resource("sqs")
        queue = sqs.Queue(url=queue_url)

        try:
            messages = queue.receive_messages(
                MessageAttributeNames=attributes_to_return, MaxNumberOfMessages=max_batch_size, WaitTimeSeconds=max_wait_time
            )
            for msg in messages:
                data = {
                    "id": msg.message_id,
                    "body": msg.body,
                    "attributes": msg.message_attributes,
                }
                yield AirbyteMessage(
                    type=Type.RECORD,
                    record=AirbyteRecordMessage(stream=stream_name, data=data, emitted_at=int(datetime.now().timestamp()) * 1000),
                )
        except ClientError as error:
            print("Couldn't receive messages from queue: %s", queue)
            raise error
        else:
            return messages
