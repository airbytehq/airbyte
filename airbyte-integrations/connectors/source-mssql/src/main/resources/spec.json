{
  "documentationUrl": "https://docs.airbyte.com/integrations/destinations/mssql",
  "connectionSpecification": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MSSQL Source Spec",
    "type": "object",
    "required": ["host", "port", "database", "username"],
    "properties": {
      "host": {
        "description": "The hostname of the database.",
        "title": "Host",
        "type": "string",
        "order": 0
      },
      "port": {
        "description": "The port of the database.",
        "title": "Port",
        "type": "integer",
        "minimum": 0,
        "maximum": 65536,
        "examples": ["1433"],
        "order": 1
      },
      "database": {
        "description": "The name of the database.",
        "title": "Database",
        "type": "string",
        "examples": ["master"],
        "order": 2
      },
      "schemas": {
        "title": "Schemas",
        "description": "The list of schemas to sync from. Defaults to user. Case sensitive.",
        "type": "array",
        "items": {
          "type": "string"
        },
        "minItems": 0,
        "uniqueItems": true,
        "default": ["dbo"],
        "order": 3
      },
      "username": {
        "description": "The username which is used to access the database.",
        "title": "Username",
        "type": "string",
        "order": 4
      },
      "password": {
        "description": "The password associated with the username.",
        "title": "Password",
        "type": "string",
        "airbyte_secret": true,
        "order": 5
      },
      "jdbc_url_params": {
        "title": "JDBC URL Params",
        "description": "Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).",
        "type": "string",
        "order": 6
      },
      "ssl_method": {
        "title": "SSL Method",
        "type": "object",
        "description": "The encryption method which is used when communicating with the database.",
        "order": 7,
        "oneOf": [
          {
            "title": "Unencrypted",
            "description": "Data transfer will not be encrypted.",
            "required": ["ssl_method"],
            "properties": {
              "ssl_method": {
                "type": "string",
                "const": "unencrypted"
              }
            }
          },
          {
            "title": "Encrypted (trust server certificate)",
            "description": "Use the certificate provided by the server without verification. (For testing purposes only!)",
            "required": ["ssl_method"],
            "properties": {
              "ssl_method": {
                "type": "string",
                "const": "encrypted_trust_server_certificate"
              }
            }
          },
          {
            "title": "Encrypted (verify certificate)",
            "description": "Verify and use the certificate provided by the server.",
            "required": ["ssl_method", "trustStoreName", "trustStorePassword"],
            "properties": {
              "ssl_method": {
                "type": "string",
                "const": "encrypted_verify_certificate"
              },
              "hostNameInCertificate": {
                "title": "Host Name In Certificate",
                "type": "string",
                "description": "Specifies the host name of the server. The value of this property must match the subject property of the certificate.",
                "order": 7
              }
            }
          }
        ]
      },
      "replication_method": {
        "type": "object",
        "title": "Replication Method",
        "description": "The replication method used for extracting data from the database. STANDARD replication requires no setup on the DB side but will not be able to represent deletions incrementally. CDC uses {TBC} to detect inserts, updates, and deletes. This needs to be configured on the source database itself.",
        "default": "STANDARD",
        "order": 8,
        "oneOf": [
          {
            "title": "Standard",
            "description": "Standard replication requires no setup on the DB side but will not be able to represent deletions incrementally.",
            "required": ["method"],
            "properties": {
              "method": {
                "type": "string",
                "const": "STANDARD",
                "order": 0
              }
            }
          },
          {
            "title": "Logical Replication (CDC)",
            "description": "CDC uses {TBC} to detect inserts, updates, and deletes. This needs to be configured on the source database itself.",
            "required": ["method"],
            "properties": {
              "method": {
                "type": "string",
                "const": "CDC",
                "order": 0
              },
              "data_to_sync": {
                "title": "Data to Sync",
                "type": "string",
                "default": "Existing and New",
                "enum": ["Existing and New", "New Changes Only"],
                "description": "What data should be synced under the CDC. \"Existing and New\" will read existing data as a snapshot, and sync new changes through CDC. \"New Changes Only\" will skip the initial snapshot, and only sync new changes through CDC.",
                "order": 1
              },
              "snapshot_isolation": {
                "title": "Initial Snapshot Isolation Level",
                "type": "string",
                "default": "Snapshot",
                "enum": ["Snapshot", "Read Committed"],
                "description": "Existing data in the database are synced through an initial snapshot. This parameter controls the isolation level that will be used during the initial snapshotting. If you choose the \"Snapshot\" level, you must enable the <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/snapshot-isolation-in-sql-server\">snapshot isolation mode</a> on the database.",
                "order": 2
              },
              "initial_waiting_seconds": {
                "type": "integer",
                "title": "Initial Waiting Time in Seconds (Advanced)",
                "description": "The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 1200 seconds. Read about <a href=\"https://docs.airbyte.com/integrations/sources/mysql/#change-data-capture-cdc\">initial waiting time</a>.",
                "default": 300,
                "min": 120,
                "max": 1200,
                "order": 3
              }
            }
          }
        ]
      }
    }
  }
}
