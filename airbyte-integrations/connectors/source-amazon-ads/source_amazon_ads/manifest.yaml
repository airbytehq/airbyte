version: 6.1.0

type: DeclarativeSource

check:
  type: CheckStream
  stream_names:
    - streams

definitions:
  sponsored_product_ad_group_error_handler:
    type: DefaultErrorHandler
    #    max_retries: 5
    response_filters:
      - http_codes: [400]
        action: IGNORE
        error_message: "Skip current AdGroup because it does not support request {response.request.url} for current profile"
      - http_codes: [422]
        action: IGNORE
        error_message: "Skip current AdGroup because the ad group {json.loads(response.request.body)['adGroupId']} does not have any asins"
      - http_codes: [404]
        action: IGNORE
        error_message: "Skip current AdGroup because the specified ad group has no associated bid"

  basic_error_handler:
    type: DefaultErrorHandler
    response_filters:
      - predicate: "{{ 'message' in response }}"
        action: FAIL
        error_message: "{{ response.message }}"
      - predicate: "{{ 'code' in response and 'details' in response }}"
        action: IGNORE
        error_message: "{{ response.code }}; {{ response.details }}"

  oauth_authenticator:
    type: OAuthAuthenticator
    refresh_request_body: {}
    token_refresh_endpoint: "https://api.amazon.com/auth/o2/token"
    grant_type: refresh_token
    client_id: '{{ config["client_id"] }}'
    client_secret: '{{ config["client_secret"] }}'
    refresh_token: '{{ config["refresh_token"] }}'
  base_requester:
    type: HttpRequester
    url_base: >-
      {%- set URL_MAPPING = {
          "NA": "https://advertising-api.amazon.com/",
          "EU": "https://advertising-api-eu.amazon.com/",
          "FE": "https://advertising-api-fe.amazon.com/"
      } -%}
      {{ URL_MAPPING[config["region"]] }}
    authenticator: "#/definitions/oauth_authenticator"
    request_headers:
      Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
  offset_paginator:
    type: "DefaultPaginator"
    pagination_strategy:
      type: OffsetIncrement
      page_size: 100
    page_size_option:
      type: RequestOption
      inject_into: request_parameter
      field_name: count
    page_token_option:
      type: RequestOption
      field_name: startIndex
      inject_into: request_parameter
  streams:
    profiles:
      type: DeclarativeStream
      name: profiles
      primary_key:
        - profileId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: v2/profiles?profileTypeFilter=seller,vendor
          http_method: GET
          use_cache: true
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          type: NoPagination

    profiles_filtered:
      type: DeclarativeStream
      name: profiles
      primary_key:
        - profileId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: v2/profiles?profileTypeFilter=seller,vendor
          http_method: GET
          use_cache: true
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
          record_filter:
            condition: >-
              {%- set requested_profiles = config.get("profiles", []) -%}
              {%- set requested_marketplace_ids = config.get("marketplace_ids", []) -%}
              {{ record["profileId"] in requested_profiles or record["accountInfo"]["marketplaceStringId"] in requested_marketplace_ids if requested_profiles or requested_marketplace_ids else False }}
        paginator:
          type: NoPagination
    portfolios:
      type: DeclarativeStream
      name: portfolios
      primary_key:
        - portfolioId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: v2/portfolios/extended
          http_method: GET
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          type: NoPagination

    sponsored_display_campaigns:
      type: DeclarativeStream
      name: sponsored_display_campaigns
      primary_key:
        - campaignId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          path: sd/campaigns
          http_method: GET
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
          request_params:
            stateFilter: "{{ ','.join(config['state_filter']) }}"
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          $ref: "#/definitions/offset_paginator"
    sponsored_display_ad_groups:
      type: DeclarativeStream
      name: sponsored_display_ad_groups
      primary_key:
        - adGroupId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sd/adGroups
          http_method: GET
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          $ref: "#/definitions/offset_paginator"
    sponsored_display_product_ads:
      type: DeclarativeStream
      name: sponsored_display_product_ads
      primary_key:
        - adId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sd/productAds
          http_method: GET
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          $ref: "#/definitions/offset_paginator"
    sponsored_display_targetings:
      type: DeclarativeStream
      name: sponsored_display_targetings
      primary_key:
        - targetId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sd/targets
          http_method: GET
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          $ref: "#/definitions/offset_paginator"
    sponsored_display_creatives:
      type: DeclarativeStream
      name: sponsored_display_creatives
      primary_key:
        - creativeId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sd/creatives
          http_method: GET
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          $ref: "#/definitions/offset_paginator"
    sponsored_display_budget_rules:
      type: DeclarativeStream
      name: sponsored_display_budget_rules
      primary_key:
        - ruleId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          #    Important: API docs contains incorrect endpoint path:
          #        sd/budgetRules - endpoint from API docs which always returns empty results
          #        sp/budgetRules - working endpoint
          path: sp/budgetRules # TODO: check/rename stream during next breaking changes
          http_method: GET
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["budgetRulesForAdvertiserResponse"]
        paginator:
          type: "DefaultPaginator"
          pagination_strategy:
            type: OffsetIncrement
            page_size: 30
          page_size_option:
            type: RequestOption
            inject_into: request_parameter
            field_name: pageSize
          page_token_option:
            type: RequestOption
            field_name: startIndex
            inject_into: request_parameter

    sponsored_brands_keywords:
      type: DeclarativeStream
      name: sponsored_brands_keywords
      primary_key:
        - adGroupId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sb/keywords
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          http_method: GET
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          $ref: "#/definitions/offset_paginator"
    sponsored_brands_campaigns:
      type: DeclarativeStream
      name: sponsored_brands_campaigns
      primary_key:
        - campaignId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sb/v4/campaigns/list
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.sbcampaignresource.v4+json
            Content-Type: application/vnd.sbcampaignresource.v4+json
          request_body_json:
            stateFilter: " {{ {'include': ','.join(config['state_filter'])} if config['state_filter'] else None }} "
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["campaigns"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
    sponsored_brands_ad_groups:
      type: DeclarativeStream
      name: sponsored_brands_ad_groups
      primary_key:
        - adGroupId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler:
            $ref: "#/definitions/basic_error_handler"
          path: sb/v4/adGroups/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.sbadgroupresource.v4+json
            Content-Type: application/vnd.sbadgroupresource.v4+json
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["adGroups"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"

    sponsored_product_campaigns:
      type: DeclarativeStream
      name: sponsored_product_campaigns
      primary_key:
        - campaignId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sp/campaigns/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spCampaign.v3+json
            Content-Type: application/vnd.spCampaign.v3+json
          request_body_json:
            stateFilter: " {{ {'include': ','.join(config['state_filter'])} if config['state_filter'] else None }} "
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["campaigns"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
    sponsored_product_ad_groups:
      type: DeclarativeStream
      name: sponsored_product_ad_groups
      primary_key:
        - adGroupId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: /sp/adGroups/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spAdGroup.v3+json
            Content-Type: application/vnd.spAdGroup.v3+json
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["adGroups"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
    sponsored_product_keywords:
      type: DeclarativeStream
      name: sponsored_product_keywords
      primary_key:
        - keywordId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sp/keywords/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spKeyword.v3+json
            Content-Type: application/vnd.spKeyword.v3+json
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["keywords"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
    sponsored_product_negative_keywords:
      type: DeclarativeStream
      name: sponsored_product_negative_keywords
      primary_key:
        - keywordId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sp/negativeKeywords/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spNegativeKeyword.v3+json
            Content-Type: application/vnd.spNegativeKeyword.v3+json
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["negativeKeywords"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
    sponsored_product_campaign_negative_keywords:
      type: DeclarativeStream
      name: sponsored_product_campaign_negative_keywords
      primary_key:
        - keywordId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sp/campaignNegativeKeywords/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spCampaignNegativeKeyword.v3+json
            Content-Type: application/vnd.spCampaignNegativeKeyword.v3+json
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["campaignNegativeKeywords"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
    sponsored_product_ads:
      type: DeclarativeStream
      name: sponsored_product_ads
      primary_key:
        - adId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sp/productAds/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spProductAd.v3+json
            Content-Type: application/vnd.spProductAd.v3+json
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["productAds"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
    sponsored_product_targetings:
      type: DeclarativeStream
      name: sponsored_product_targetings
      primary_key:
        - targetId
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          path: sp/targets/list
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spTargetingClause.v3+json
            Content-Type: application/vnd.spTargetingClause.v3+json
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["targetingClauses"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"

    sponsored_product_ad_group_bid_recommendations:
      type: DeclarativeStream
      name: sponsored_product_ad_group_bid_recommendations
      primary_key: []
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler: "#/definitions/sponsored_product_ad_group_error_handler"
          path: /sp/targets/bid/recommendations
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice.parent_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
            Accept: application/vnd.spthemebasedbidrecommendation.v4+json
            Content-Type: application/vnd.spthemebasedbidrecommendation.v4+json
          request_body_json:
            targetingExpressions:
              - type: CLOSE_MATCH
              - type: LOOSE_MATCH
              - type: SUBSTITUTES
              - type: COMPLEMENTS
            adGroupId: '{{ stream_slice["adGroupId"] }}'
            campaignId: '{{ stream_slice.extra_fields["campaignId"] }}'
            recommendationType: BIDS_FOR_EXISTING_AD_GROUP
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "adGroupId"
              stream: "#/definitions/streams/sponsored_product_ad_groups"
              partition_field: "adGroupId"
              extra_fields:
                - ["campaignId"]
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: nextToken
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: maxResults
          pagination_strategy:
            type: CursorPagination
            page_size: 100
            cursor_value: "{{ response.nextToken }}"
      transformations:
        - type: AddFields
          fields:
            - path: ["adGroupId"]
              value: '{{ stream_slice["adGroupId"] }}'
              value_type: string
            - path: ["campaignId"]
              value: '{{ stream_slice.extra_fields["campaignId"] }}'
              value_type: string

    sponsored_product_ad_group_suggested_keywords:
      type: DeclarativeStream
      name: sponsored_product_ad_group_suggested_keywords
      primary_key: []
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler: "#/definitions/sponsored_product_ad_group_error_handler"
          path: "v2/sp/adGroups/{{ stream_slice['adGroupId'] }}/suggested/keywords"
          http_method: GET
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice.parent_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
          request_params:
            maxNumSuggestions: 100
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "adGroupId"
              stream: "#/definitions/streams/sponsored_product_ad_groups"
              partition_field: "adGroupId"
              extra_fields:
                - ["campaignId"]
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: []
        paginator:
          type: NoPagination

    attribution_report_products:
      type: DeclarativeStream
      name: attribution_report_products
      primary_key: []
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler:
            type: DefaultErrorHandler
            response_filters:
              - predicate: '{{ response.message == "This profileID is not authorized to use Amazon Attribution" }}'
                action: IGNORE
                error_message: "{{ response }}"
              - predicate: "{{ 'message' in response }}"
                action: FAIL
                error_message: "{{ response.message }}"
              - predicate: "{{ 'code' in response and 'details' in response }}"
                action: IGNORE
                error_message: "{{ response.code }}; {{ response.details }}"
          path: /attribution/report
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
          request_body_json:
            reportType: "PRODUCTS"
            metrics: |
              {{
                ','.join([
                'attributedDetailPageViewsClicks14d',
                'attributedAddToCartClicks14d',
                'attributedPurchases14d',
                'unitsSold14d',
                'attributedSales14d',
                'brandHaloDetailPageViewsClicks14d',
                'brandHaloAttributedAddToCartClicks14d',
                'brandHaloAttributedPurchases14d',
                'brandHaloUnitsSold14d',
                'brandHaloAttributedSales14d',
                'attributedNewToBrandPurchases14d',
                'attributedNewToBrandUnitsSold14d',
                'attributedNewToBrandSales14d',
                'brandHaloNewToBrandPurchases14d',
                'brandHaloNewToBrandUnitsSold14d',
                'brandHaloNewToBrandSales14d',
                ])
              }}
            startDate: >-
              {%- set _start_date = config.get("start_date") -%}
              {%- set start_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              {%- set end_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              "{{ start_date.strftime("%Y%m%d") if not config.get("start_date") else max(format_datetime(config['start_date'], "%Y%m%d"), (end_date - duration("P90D")).strftime("%Y%m%d")) | string }}"
            endDate: >-
              "{{ format_datetime(today_with_timezone(stream_slice.extra_fields['timezone']).strftime('%Y%m%d'), '%Y%m%d', '%Y%m%d') }}"
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
              extra_fields:
                - ["timezone"]
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["reports"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: cursorId
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: count
          pagination_strategy:
            type: CursorPagination
            page_size: 300
            cursor_value: "{{ response.cursorId }}"

    attribution_report_performance_adgroup:
      type: DeclarativeStream
      name: attribution_report_performance_adgroup
      primary_key: []
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler:
            type: DefaultErrorHandler
            response_filters:
              - http_codes: [400]
                action: IGNORE
                error_message: "{{ response }}"
              - predicate: "{{ 'message' in response }}"
                action: FAIL
                error_message: "{{ response.message }}"
          path: /attribution/report
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
          request_body_json:
            reportType: "PERFORMANCE"
            groupBy: "ADGROUP"
            metrics: |
              {{
                ','.join([
                'Click-throughs',
                'attributedDetailPageViewsClicks14d',
                'attributedAddToCartClicks14d',
                'attributedPurchases14d',
                'unitsSold14d',
                'attributedSales14d',
                'attributedTotalDetailPageViewsClicks14d',
                'attributedTotalAddToCartClicks14d',
                'attributedTotalPurchases14d',
                'totalUnitsSold14d',
                'totalAttributedSales14d',
                'brb_bonus_amount'
                ])
              }}
            startDate: >-
              {%- set _start_date = config.get("start_date") -%}
              {%- set start_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              {%- set end_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              "{{ start_date.strftime("%Y%m%d") if not config.get("start_date") else max(format_datetime(config['start_date'], "%Y%m%d"), (end_date - duration("P90D")).strftime("%Y%m%d")) | string }}"
            endDate: >-
              "{{ format_datetime(today_with_timezone(stream_slice.extra_fields['timezone']).strftime('%Y%m%d'), '%Y%m%d', '%Y%m%d') }}"
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
              extra_fields:
                - ["timezone"]
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["reports"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: cursorId
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: count
          pagination_strategy:
            type: CursorPagination
            page_size: 300
            cursor_value: "{{ response.cursorId }}"

    attribution_report_performance_campaign:
      type: DeclarativeStream
      name: attribution_report_performance_campaign
      primary_key: []
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler:
            type: DefaultErrorHandler
            response_filters:
              - http_codes: [400]
                action: IGNORE
                error_message: "{{ response }}"
              - predicate: "{{ 'message' in response }}"
                action: FAIL
                error_message: "{{ response.message }}"
          path: /attribution/report
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
          request_body_json:
            reportType: "PERFORMANCE"
            groupBy: "CAMPAIGN"
            metrics: |
              {{
                ','.join([
                'Click-throughs',
                'attributedDetailPageViewsClicks14d',
                'attributedAddToCartClicks14d',
                'attributedPurchases14d',
                'unitsSold14d',
                'attributedSales14d',
                'attributedTotalDetailPageViewsClicks14d',
                'attributedTotalAddToCartClicks14d',
                'attributedTotalPurchases14d',
                'totalUnitsSold14d',
                'totalAttributedSales14d',
                'brb_bonus_amount'
                ])
              }}
            startDate: >-
              {%- set _start_date = config.get("start_date") -%}
              {%- set start_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              {%- set end_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              "{{ start_date.strftime("%Y%m%d") if not config.get("start_date") else max(format_datetime(config['start_date'], "%Y%m%d"), (end_date - duration("P90D")).strftime("%Y%m%d")) | string }}"
            endDate: >-
              "{{ format_datetime(today_with_timezone(stream_slice.extra_fields['timezone']).strftime('%Y%m%d'), '%Y%m%d', '%Y%m%d') }}"
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
              extra_fields:
                - ["timezone"]
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["reports"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: cursorId
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: count
          pagination_strategy:
            type: CursorPagination
            page_size: 300
            cursor_value: "{{ response.cursorId }}"

    attribution_report_performance_creative:
      type: DeclarativeStream
      name: attribution_report_performance_creative
      primary_key: []
      retriever:
        type: SimpleRetriever
        requester:
          $ref: "#/definitions/base_requester"
          error_handler:
            type: DefaultErrorHandler
            response_filters:
              - http_codes: [400]
                action: IGNORE
                error_message: "{{ response }}"
              - predicate: "{{ 'message' in response }}"
                action: FAIL
                error_message: "{{ response.message }}"
          path: /attribution/report
          http_method: POST
          request_headers:
            Amazon-Advertising-API-Scope: "{{ stream_slice['profileId'] }}"
            Amazon-Advertising-API-ClientId: '{{ config["client_id"] }}'
          request_body_json:
            reportType: "PERFORMANCE"
            groupBy: "CREATIVE"
            metrics: |
              {{
                ','.join([
                'Click-throughs',
                'attributedDetailPageViewsClicks14d',
                'attributedAddToCartClicks14d',
                'attributedPurchases14d',
                'unitsSold14d',
                'attributedSales14d',
                'attributedTotalDetailPageViewsClicks14d',
                'attributedTotalAddToCartClicks14d',
                'attributedTotalPurchases14d',
                'totalUnitsSold14d',
                'totalAttributedSales14d',
                ])
              }}
            startDate: >-
              {%- set _start_date = config.get("start_date") -%}
              {%- set start_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              {%- set end_date = today_with_timezone(stream_slice.extra_fields["timezone"]) -%}
              "{{ start_date.strftime("%Y%m%d") if not config.get("start_date") else max(format_datetime(config['start_date'], "%Y%m%d"), (end_date - duration("P90D")).strftime("%Y%m%d")) | string }}"
            endDate: >-
              "{{ format_datetime(today_with_timezone(stream_slice.extra_fields['timezone']).strftime('%Y%m%d'), '%Y%m%d', '%Y%m%d') }}"
        partition_router:
          type: SubstreamPartitionRouter
          parent_stream_configs:
            - type: ParentStreamConfig
              parent_key: "profileId"
              stream: "#/definitions/streams/profiles_filtered"
              partition_field: "profileId"
              extra_fields:
                - ["timezone"]
        record_selector:
          type: RecordSelector
          extractor:
            type: DpathExtractor
            field_path: ["reports"]
        paginator:
          type: DefaultPaginator
          page_token_option:
            type: RequestOption
            inject_into: body_json
            field_name: cursorId
          page_size_option:
            type: RequestOption
            inject_into: body_json
            field_name: count
          pagination_strategy:
            type: CursorPagination
            page_size: 300
            cursor_value: "{{ response.cursorId }}"

streams:
  - $ref: "#/definitions/streams/profiles"
  - $ref: "#/definitions/streams/portfolios"

  - $ref: "#/definitions/streams/sponsored_display_campaigns"
  - $ref: "#/definitions/streams/sponsored_display_ad_groups"
  - $ref: "#/definitions/streams/sponsored_display_product_ads"
  - $ref: "#/definitions/streams/sponsored_display_targetings"
  - $ref: "#/definitions/streams/sponsored_display_creatives"
  - $ref: "#/definitions/streams/sponsored_display_budget_rules"

  - $ref: "#/definitions/streams/sponsored_brands_keywords"
  - $ref: "#/definitions/streams/sponsored_brands_campaigns"
  - $ref: "#/definitions/streams/sponsored_brands_ad_groups"

  - $ref: "#/definitions/streams/sponsored_product_campaigns"
  - $ref: "#/definitions/streams/sponsored_product_ad_groups"
  - $ref: "#/definitions/streams/sponsored_product_keywords"
  - $ref: "#/definitions/streams/sponsored_product_negative_keywords"
  - $ref: "#/definitions/streams/sponsored_product_campaign_negative_keywords"
  - $ref: "#/definitions/streams/sponsored_product_ads"
  - $ref: "#/definitions/streams/sponsored_product_targetings"

  - $ref: "#/definitions/streams/sponsored_product_ad_group_bid_recommendations"
  - $ref: "#/definitions/streams/sponsored_product_ad_group_suggested_keywords"

  - $ref: "#/definitions/streams/attribution_report_products"
  - $ref: "#/definitions/streams/attribution_report_performance_adgroup"
  - $ref: "#/definitions/streams/attribution_report_performance_campaign"
  - $ref: "#/definitions/streams/attribution_report_performance_creative"

concurrency_level:
  type: ConcurrencyLevel
  default_concurrency: 10
  max_concurrency: 10
