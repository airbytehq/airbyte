import pytest
from destination_mockapi.schemas.users import map_to_user_schema, validate_user_data
from destination_mockapi.schemas.deals import map_to_deal_schema, validate_deal_data

class TestUserSchema:
    
    def test_map_user_basic_fields(self):
        """Test mapping user with basic fields matching MockAPI structure"""
        input_record = {
            "name": "John Doe",
            "avatar": "https://example.com/avatar.jpg"
        }
        
        result = map_to_user_schema(input_record)
        
        assert result["name"] == "John Doe"
        assert result["avatar"] == "https://example.com/avatar.jpg"
        # Note: id and createdAt are auto-generated by MockAPI
    
    def test_map_user_alternative_field_names(self):
        """Test mapping with alternative field names"""
        input_record = {
            "full_name": "Jane Smith",
            "profile_picture": "https://example.com/jane.jpg"
        }
        
        result = map_to_user_schema(input_record)
        
        assert result["name"] == "Jane Smith"
        assert result["avatar"] == "https://example.com/jane.jpg"
    
    def test_map_user_first_last_name(self):
        """Test mapping with separate first/last names"""
        input_record = {
            "first_name": "John",
            "last_name": "Doe"
        }
        
        result = map_to_user_schema(input_record)
        
        assert result["name"] == "John Doe"
    
    def test_map_user_fallback_to_email(self):
        """Test fallback to email when no name provided"""
        input_record = {
            "email": "john@example.com"
        }
        
        result = map_to_user_schema(input_record)
        
        assert result["name"] == "john@example.com"
    
    def test_map_user_default_name(self):
        """Test default name when nothing available"""
        input_record = {
            "some_field": "value"
        }
        
        result = map_to_user_schema(input_record)
        
        assert result["name"] == "Unknown User"
    
    def test_validate_user_data_valid(self):
        """Test user data validation with valid data"""
        valid_user = {"name": "John Doe"}
        assert validate_user_data(valid_user) is True
    
    def test_validate_user_data_invalid(self):
        """Test user data validation with invalid data"""
        invalid_user = {"avatar": "https://example.com/avatar.jpg"}  # No name
        assert validate_user_data(invalid_user) is False

class TestDealSchema:
    
    def test_map_deal_basic_fields(self):
        """Test mapping deal with basic fields matching MockAPI structure"""
        input_record = {
            "name": "Big Deal",
            "avatar": "https://example.com/deal.jpg"
        }
        
        result = map_to_deal_schema(input_record)
        
        assert result["name"] == "Big Deal"
        assert result["avatar"] == "https://example.com/deal.jpg"
    
    def test_map_deal_title_to_name(self):
        """Test mapping title field to name (MockAPI uses 'name' not 'title')"""
        input_record = {
            "title": "Important Deal",
            "image": "https://example.com/deal.png"
        }
        
        result = map_to_deal_schema(input_record)
        
        assert result["name"] == "Important Deal"
        assert result["avatar"] == "https://example.com/deal.png"
    
    def test_map_deal_alternative_names(self):
        """Test mapping with alternative field names"""
        input_record = {
            "deal_name": "Another Deal",
            "logo": "https://example.com/logo.jpg"
        }
        
        result = map_to_deal_schema(input_record)
        
        assert result["name"] == "Another Deal"
        assert result["avatar"] == "https://example.com/logo.jpg"
    
    def test_map_deal_default_name(self):
        """Test default name when nothing available"""
        input_record = {
            "amount": 1000
        }
        
        result = map_to_deal_schema(input_record)
        
        assert result["name"] == "Unknown Deal"
    
    def test_validate_deal_data_valid(self):
        """Test deal data validation with valid data"""
        valid_deal = {"name": "Test Deal"}
        assert validate_deal_data(valid_deal) is True
    
    def test_validate_deal_data_invalid(self):
        """Test deal data validation with invalid data"""
        invalid_deal = {"avatar": "https://example.com/avatar.jpg"}  # No name
        assert validate_deal_data(invalid_deal) is False