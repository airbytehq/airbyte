from typing import Dict, Any, Optional

def map_to_user_schema(record: Dict[str, Any]) -> Dict[str, Any]:
    """
    Map incoming record to MockAPI user schema
    MockAPI user structure: {id, createdAt, name, avatar}
    """
    mapped_user = {}
    
    # Map name (required field)
    if "name" in record:
        mapped_user["name"] = str(record["name"])
    elif "full_name" in record:
        mapped_user["name"] = str(record["full_name"])
    elif "first_name" in record and "last_name" in record:
        mapped_user["name"] = f"{record['first_name']} {record['last_name']}"
    elif "email" in record:
        # Fallback: use email as name if no name provided
        mapped_user["name"] = str(record["email"])
    else:
        # Default name if nothing else available
        mapped_user["name"] = "Unknown User"
    
    # Map avatar (profile picture)
    if "avatar" in record:
        mapped_user["avatar"] = str(record["avatar"])
    elif "profile_picture" in record:
        mapped_user["avatar"] = str(record["profile_picture"])
    elif "photo" in record:
        mapped_user["avatar"] = str(record["photo"])
    elif "image" in record:
        mapped_user["avatar"] = str(record["image"])
    # Note: createdAt and id will be auto-generated by MockAPI
    
    return mapped_user

def validate_user_data(user_data: Dict[str, Any]) -> bool:
    """
    Validate user data before sending to API
    MockAPI requires at least a name field
    """
    return bool(user_data.get("name"))