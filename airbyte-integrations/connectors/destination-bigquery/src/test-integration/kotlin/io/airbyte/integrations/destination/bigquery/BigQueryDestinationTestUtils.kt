/*
 * Copyright (c) 2023 Airbyte, Inc., all rights reserved.
 */
package io.airbyte.integrations.destination.bigquery

import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.node.ObjectNode
import io.airbyte.cdk.load.util.Jsons
import io.airbyte.integrations.destination.bigquery.BigQueryUtils.getLoadingMethod
import io.airbyte.integrations.destination.bigquery.spec.BigqueryConfiguration
import io.airbyte.integrations.destination.bigquery.spec.BigqueryConfigurationFactory
import io.airbyte.integrations.destination.bigquery.spec.BigquerySpecification
import java.io.IOException
import java.nio.file.Files
import java.nio.file.Path
import java.util.*
import org.slf4j.Logger
import org.slf4j.LoggerFactory

object BigQueryDestinationTestUtils {
    private val LOGGER: Logger = LoggerFactory.getLogger(BigQueryDestinationTestUtils::class.java)

    val standardInsertRawOverrideConfig =
        createConfig(
            configFile = Path.of("secrets/credentials-1s1t-standard-raw-override.json"),
            datasetId = DEFAULT_NAMESPACE_PLACEHOLDER,
            stagingPath = "test_path/$DEFAULT_NAMESPACE_PLACEHOLDER",
        )
    val standardInsertConfig =
        createConfig(
            configFile = Path.of("secrets/credentials-1s1t-standard.json"),
            datasetId = DEFAULT_NAMESPACE_PLACEHOLDER,
            stagingPath = "test_path/$DEFAULT_NAMESPACE_PLACEHOLDER",
        )

    /**
     * Parse the config file and replace dataset with rawNamespace and stagingPath randomly
     * generated by the test.
     *
     * @param configFile Path to the config file
     * @param datasetId Dataset id to use in the test. Should be randomized per test case.
     * @param stagingPath Staging GCS path to use in the test, or null if the test is running in
     * standard inserts mode. Should be randomized per test case.
     */
    @Throws(IOException::class)
    fun createConfig(
        configFile: Path?,
        datasetId: String?,
        stagingPath: String?,
        rawDatasetId: String? = null,
    ): ObjectNode {
        LOGGER.info("Setting default dataset to {}", datasetId)
        val tmpConfigAsString = Files.readString(configFile)
        val config = Jsons.readTree(tmpConfigAsString) as ObjectNode
        config.put(BigQueryConsts.CONFIG_DATASET_ID, datasetId)
        rawDatasetId?.let { config.put(BigQueryConsts.RAW_DATA_DATASET, rawDatasetId) }

        // This is sort of a hack. Ideally tests shouldn't interfere with each other even when using
        // the
        // same staging path.
        // Most likely there's a real bug in the connector - but we should investigate that and
        // write a real
        // test case,
        // rather than relying on tests randomly failing to indicate that bug.
        // See https://github.com/airbytehq/airbyte/issues/28372.
        if (stagingPath != null && getLoadingMethod(config) == UploadingMethod.GCS) {
            val loadingMethodNode = config[BigQueryConsts.LOADING_METHOD] as ObjectNode
            loadingMethodNode.put(BigQueryConsts.GCS_BUCKET_PATH, stagingPath)
        }
        return config
    }

    fun parseConfig(config: JsonNode): BigqueryConfiguration {
        val spec = Jsons.treeToValue(config, BigquerySpecification::class.java)
        return BigqueryConfigurationFactory().make(spec)
    }
}
