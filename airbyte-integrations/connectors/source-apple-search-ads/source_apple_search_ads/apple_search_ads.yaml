version: "0.1.0"

definitions:
  requester:
    url_base: "https://api.searchads.apple.com/api/v4"
    http_method: "GET"
    authenticator:
      type: "OAuthAuthenticator"
      token_refresh_endpoint: "https://appleid.apple.com/auth/oauth2/token?grant_type=client_credentials&scope=searchadsorg"
      client_id: "{{ config['client_id'] }}"
      client_secret: "{{ config['client_secret'] }}"
      refresh_token: ""
    request_options_provider:
      request_headers:
        X-AP-Context: "orgId={{ config['org_id'] }}"
  retriever:
    requester:
      $ref: "*ref(definitions.requester)"
      error_handler:
        response_filters:
          - http_codes: [ 500 ]
            action: RETRY

  base_stream:
    selector:
      extractor:
        field_pointer: [ "data" ]
    retriever:
      $ref: "*ref(definitions.retriever)"
      record_selector:
        $ref: "*ref(definitions.base_stream.selector)"
      paginator:
        type: DefaultPaginator
        pagination_strategy:
          type: OffsetIncrement
          page_size: 1000
        page_size_option:
          inject_into: request_parameter
          field_name: limit
        page_token_option:
          field_name: offset
          inject_into: request_parameter
        url_base: "*ref(definitions.requester.url_base)"

  campaigns_stream:
    $ref: "*ref(definitions.base_stream)"
    $options:
      name: "campaigns"
      primary_key: "id"
      path: "/campaigns"

  stream_slicer_campaign:
    type: SubstreamSlicer
    parent_stream_configs:
      - stream: "*ref(definitions.campaigns_stream)"
        parent_key: "id"
        stream_slice_field: "campaign_id"

  adgroups_stream:
    $ref: "*ref(definitions.base_stream)"
    $options:
      name: "adgroups"
      primary_key: "id"
    retriever:
      $ref: "*ref(definitions.base_stream.retriever)"
      requester:
        $ref: "*ref(definitions.requester)"
        path: "/campaigns/{{ stream_slice.campaign_id }}/adgroups"
      stream_slicer:
        type: CartesianProductStreamSlicer
        stream_slicers:
          - "*ref(definitions.stream_slicer_campaign)"

  stream_slicer_adgroup:
    type: SubstreamSlicer
    parent_stream_configs:
      - stream: "*ref(definitions.adgroups_stream)"
        parent_key: "id"
        stream_slice_field: "adgroup_id"

  keywords_stream:
    $ref: "*ref(definitions.base_stream)"
    $options:
      name: "keywords"
      primary_key: "id"
    retriever:
      $ref: "*ref(definitions.base_stream.retriever)"
      requester:
        $ref: "*ref(definitions.requester)"
        path: "/campaigns/{{ stream_slice.parent_slice.campaign_id }}/adgroups/{{ stream_slice.adgroup_id }}/targetingkeywords"
      stream_slicer:
        type: CartesianProductStreamSlicer
        stream_slicers:
          - "*ref(definitions.stream_slicer_adgroup)"

  stream_slicer_date:
    type: "DatetimeStreamSlicer"
    start_datetime:
      datetime: "{{ config['start_date'] }}"
      datetime_format: "%Y-%m-%d"
    end_datetime:
      datetime: "{{ config['end_date'] or today_utc() }}"
      datetime_format: "%Y-%m-%d"
    step: "1d"
    lookback_window: "30d"
    datetime_format: "%Y-%m-%d"
    cursor_field: "{{ options['stream_cursor_field'] }}"

  report_stream:
    retriever:
      $ref: "*ref(definitions.retriever)"
      record_selector:
        extractor:
          type: DpathExtractor
          field_pointer: ["data", "reportingDataResponse", "row"]
      paginator:
        type: NoPagination
      stream_slicer:
        type: CartesianProductStreamSlicer
        stream_slicers:
          - "*ref(definitions.stream_slicer_date)"
      requester:
        $ref: "*ref(definitions.requester)"
        http_method: "POST"
        request_options_provider:
          request_headers:
            X-AP-Context: "orgId={{ config['org_id'] }}"
          request_body_json:
            startTime: "{{ stream_slice['start_time'] }}"
            endTime: "{{ stream_slice['end_time'] }}"
            timeZone: "UTC"
            granularity: "{{ options.granularity }}"
            selector: '{
              "orderBy": [
                {
                  "field": "countryOrRegion",
                  "sortOrder": "ASCENDING"
                }
              ]
            }'
            groupBy: "[ 'countryOrRegion' ]"

  campaigns_report_daily_stream:
    $ref: "*ref(definitions.report_stream)"
    $options:
      name: "campaigns_report_daily"
      stream_cursor_field: "date"
      granularity: "DAILY"
      primary_key: [["date"], ["campaignId"]]
    retriever:
      $ref: "*ref(definitions.report_stream.retriever)"
      requester:
        $ref: "*ref(definitions.report_stream.retriever.requester)"
        path: "/reports/campaigns"
    transformations:
      - type: AddFields
        fields:
          - path: [ "campaignId" ]
            value: "{{ record['metadata']['campaignId'] }}"
          - path: [ "date" ]
            value: "{{ stream_slice['start_time'] }}"

  adgroups_report_daily_stream:
    $ref: "*ref(definitions.report_stream)"
    $options:
      name: "adgroups_report_daily"
      stream_cursor_field: "date"
      granularity: "DAILY"
      primary_key: [["date"], ["adGroupId"]]
    retriever:
      $ref: "*ref(definitions.report_stream.retriever)"
      stream_slicer:
        type: CartesianProductStreamSlicer
        stream_slicers:
          - "*ref(definitions.stream_slicer_date)"
          - "*ref(definitions.stream_slicer_campaign)"
      requester:
        $ref: "*ref(definitions.report_stream.retriever.requester)"
        path: "/reports/campaigns/{{ stream_slice.campaign_id }}/adgroups"
    transformations:
      - type: AddFields
        fields:
          - path: [ "adGroupId" ]
            value: "{{ record['metadata']['adGroupId'] }}"
          - path: [ "date" ]
            value: "{{ stream_slice['start_time'] }}"

  keywords_report_daily_stream:
    $ref: "*ref(definitions.report_stream)"
    $options:
      name: "keywords_report_daily"
      stream_cursor_field: "date"
      granularity: "DAILY"
      primary_key: [["date"], ["keywordId"]]
    retriever:
      $ref: "*ref(definitions.report_stream.retriever)"
      stream_slicer:
        type: CartesianProductStreamSlicer
        stream_slicers:
          - "*ref(definitions.stream_slicer_date)"
          - "*ref(definitions.stream_slicer_campaign)"
      requester:
        $ref: "*ref(definitions.report_stream.retriever.requester)"
        path: "/reports/campaigns/{{ stream_slice.campaign_id }}/keywords"
        error_handler:
          response_filters:
            - predicate: "{{ 'CAMPAIGN DOES NOT CONTAIN KEYWORD' in response.error.errors[0].message }}"
              action: IGNORE
    transformations:
      - type: AddFields
        fields:
          - path: [ "keywordId" ]
            value: "{{ record['metadata']['keywordId'] }}"
          - path: [ "date" ]
            value: "{{ stream_slice['start_time'] }}"


streams:
  - "*ref(definitions.campaigns_stream)"
  - "*ref(definitions.adgroups_stream)"
  - "*ref(definitions.keywords_stream)"
  - "*ref(definitions.campaigns_report_daily_stream)"
  - "*ref(definitions.adgroups_report_daily_stream)"
  - "*ref(definitions.keywords_report_daily_stream)"

check:
  stream_names:
    - "campaigns"
