#
# Copyright (c) 2021 Airbyte, Inc., all rights reserved.
#

from typing import Tuple
import json
import os
from datetime import datetime
from typing import Dict, Generator, Mapping, Any, List
import pendulum

from airbyte_cdk.logger import AirbyteLogger
from airbyte_cdk.models import (
    AirbyteCatalog,
    AirbyteConnectionStatus,
    AirbyteMessage,
    AirbyteRecordMessage,
    AirbyteStream,
    ConfiguredAirbyteCatalog,
    Status,
    Type,
)
from airbyte_cdk.sources import Source
from googleapiclient.discovery import build
from  google.oauth2.credentials import Credentials
from googleapiclient.errors import HttpError
from .streams import DBMStream
from .streams import CookieReach
from .streams import Standard

class SourceDV360(Source):

    def get_credentials(self,config: json) -> Credentials:
        cred_json = config.get('credentials')
        return Credentials(
        cred_json.get('access_token'),
        refresh_token= cred_json.get('refresh_token'),
        token_uri=cred_json.get('token_uri'),
        client_id=cred_json.get('client_id'),
        client_secret=cred_json.get('client_secret'))


    def check(self, logger: AirbyteLogger, config: json) -> AirbyteConnectionStatus:
        """
        Tests if the input configuration can be used to successfully connect to the integration
            e.g: if a provided Stripe API token can be used to connect to the Stripe API.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
        the properties of the spec.json file

        :return: AirbyteConnectionStatus indicating a Success or Failure
        """
        try:
            dv360 = build('displayvideo','v1', credentials=self.get_credentials(config))
            request = dv360.partners().list().execute()
            return AirbyteConnectionStatus(status=Status.SUCCEEDED)
        except Exception as err:
            return AirbyteConnectionStatus(status=Status.FAILED, message=f"Unable to connect to Google Ads API with the provided credentials - {repr(err)}")


    def discover(self, logger: AirbyteLogger, config: json) -> AirbyteCatalog:
        """
        Returns an AirbyteCatalog representing the available streams and fields in this integration.
        For example, given valid credentials to a Postgres database,
        returns an Airbyte catalog where each postgres table is a stream, and each table column is a field.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
        the properties of the spec.json file

        :return: AirbyteCatalog is an object describing a list of all available streams in this source.
            A stream is an AirbyteStream object that includes:
            - its stream name (or table name in the case of Postgres)
            - json_schema providing the specifications of expected schema for this stream (a list of columns described
            by their names and types)
        """
        streams = []
        schemas_path = './source_dv_360/schemas'
        for file in os.listdir(schemas_path):
            with open(os.path.join(schemas_path, file)) as schema:
                stream_name = os.path.splitext(file)[0]
                json_schema = json.loads(schema.read())
            streams.append(AirbyteStream(name=stream_name, json_schema=json_schema))
        return AirbyteCatalog(streams=streams)


    def read(
        self, logger: AirbyteLogger, config: json, catalog: ConfiguredAirbyteCatalog, state: Dict[str, any]
    ) -> Generator[AirbyteMessage, None, None]:
        """
        Returns a generator of the AirbyteMessages generated by reading the source with the given configuration,
        catalog, and state.

        :param logger: Logging object to display debug/info/error to the logs
            (logs will not be accessible via airbyte UI if they are not passed to this logger)
        :param config: Json object containing the configuration of this source, content of this json is as specified in
            the properties of the spec.json file
        :param catalog: The input catalog is a ConfiguredAirbyteCatalog which is almost the same as AirbyteCatalog
            returned by discover(), but
        in addition, it's been configured in the UI! For each particular stream and field, there may have been provided
        with extra modifications such as: filtering streams and/or columns out, renaming some entities, etc
        :param state: When a Airbyte reads data from a source, it might need to keep a checkpoint cursor to resume
            replication in the future from that saved checkpoint.
            This is the object that is provided with state from previous runs and avoid replicating the entire set of
            data everytime.

        :return: A generator that produces a stream of AirbyteRecordMessage contained in AirbyteMessage object.
        """
        dbm_service = build('doubleclickbidmanager','v1.1', credentials=self.get_credentials(config))
        start_date = config.get("start_date")
        end_date = config.get("end_date")
        stream_name = "cookie_reach"  # Example
        data = {"Advertiser ID":705159561,"Advertiser":"Stage Entertainment_Germany","Insertion Order ID":22061360,"Insertion Order":"de_2021-7_restart_ps_multipleshows_national_multiaudience_auction_cps_multiplacement_interest_mi_multipleshows_usecase1googleinmarketaudience","Line Item ID":55828118,"Line Item":"de_2021-8_restart_ps_multipleshows_national_multiaudience_auction_cps_multiplacement_interest_mi_dynamic-image_h5_multipleshows_usecase1googleinmarketaudience-mmr","Partner          ID":694186226,"Partner":"TP - Stage Entertainment - DQ&A - DV360 - DE","Cookie Reach: Impression Reach":310859}

 # Example
        dbm_stream = CookieReach(credentials=self.get_credentials(config),partner_id = config.get('partner_id'), start_date=start_date, end_date=end_date)

        #data=dbm_stream.read_records(sync_mode=None)

        yield AirbyteMessage(
            type=Type.RECORD,
            record=AirbyteRecordMessage(stream=stream_name, data=data, emitted_at=int(datetime.now().timestamp()) * 1000),
        )
