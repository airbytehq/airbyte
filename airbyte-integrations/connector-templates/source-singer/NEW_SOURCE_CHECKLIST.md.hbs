# New Singer source checklist

This is an autogenerated file describing the steps needed to implement a new Airbyte source based on a Singer Tap.

1. Include the Singer Tap you'd like to build this Source on top by including it in `setup.py` as a dependency.
1. First, build the module by running the following from the `airbyte` project root directory:
   ```
   ./gradlew :airbyte-integrations:connectors:source-{{dashCase name}}-singer:build
   ```
1. Define the specification for this source connector by modifying `source_{{snakeCase name}}_singer/spec.json`.
   A specification is a JSON file which uses JSONSchema to declare all the inputs needed for your integration to function
   correctly. For example, if you were configuring a Postgres source, your specification might declare that you need a
   `username` field which a string, a `password` field which is a string, a `host_url` which is a URI-formatted string,
   and a `port` which is a `number`. The Airbyte UI will generate configurations that match the specification (by asking
   the user to input them) and pass those configs to your source connector as input when it is being run.
   You can also manually generate config files and pass them to the integration CLI.
1. Implement your integration by editing `source_{{snakeCase name}}_singer/source.py` (and creating additional files as necessary).
    1. Implement the `Source` interface. For more information see the docstrings in `Source` and any parent classes.
    1. All logging should be done through the `logger` object passed into each method. Otherwise, logs will not be shown
    in the Airbyte UI.
1. Update the `sample_files` directory with an example config and catalog (discover output).
1. Create tests for your integration.
    1. Unit tests: Unit tests go in the `unit_tests` folder.
    1. Standard Source tests: These are a bank of tests that all sources need to pass. We have pre-written them for you, all you need to do is provide this test suite with the proper inputs.
        1. First see [Testing Connectors](https://docs.airbyte.io/contributing-to-airbyte/building-new-connector/testing-connectors) for more info on these standard tests.
        1. Running the tests: You can run these tests with the following command `./gradlew :airbyte-integrations:connectors:source-{{dashCase name}}:integrationTest`.
1. Update `README.md` to document the usage of your integration. If API credentials are required to run the integration, please document how they can be obtained or link to a how-to guide.
    1. For Airybte core contributors, make sure to add the secret to RPass under the secret name as listed in `README.md`.
1. So far, all we've done is create the integration. Now let's make it available for use from the Airbyte UI and API! Add your source to the source
   definition registry. In `airbyte-config/init/src/main/resources/seed/source_definitions.yaml` add an entry for the new source. Make sure to generate a new _unique_ UUIDv4 for the `sourceDefinitionId` field. You can get one [here](https://www.uuidgenerator.net/). Follow the example of the other entries in the index. Include a unique `name` as well as the `dockerRepository` and `dockerImageTag` for the connectors docker image. Also include a link to the documentation in the `documentationUrl` field. Running `./gradlew :airbyte-config:init:build` will generate the necessary configuration to insert the new connector in the UI.
1. To be able to run the integration tests for this connector in CI, add your config.json to the Airbyte repo Github secrets. If you are unable to provide
   your own credentials (e.g: they're for your personal or employer's account), create an issue in the Airbyte Github repo with directions on how the
   Airbyte team can create credentials and run them against your integration.
1. Once the config is stored in Github Secrets, edit `.github/workflows/gradle.yaml` to inject the config into the build environment.
1. Edit the `airbyte/tools/bin/ci_credentials.sh` script to pull the script from the build environment and write it to `secrets/config.json` during the build.\
1. From the `airbyte` project root, run `./gradlew build` to make sure your module builds within the rest of the monorepo. Commit any changes, such as styling changes.
    1. Create a PR against the Airbyte repo with your changes.

Once you've done all the above, delete this file :)
