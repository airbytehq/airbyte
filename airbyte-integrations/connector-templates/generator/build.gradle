def generateScaffolds = tasks.register('generateScaffolds')

def addScaffoldTemplateTask(name, packageName, outputDirName, scaffoldParams=[]) {
    def taskName = "generateScaffold_${name}"
    def outputDir = "airbyte-integrations/connectors/${outputDirName}"

   def task = tasks.register(taskName) {
        inputs.files rootProject.fileTree("airbyte-integrations/connector-templates/")

        doLast {
            exec {
                workingDir rootDir
                commandLine 'rm', '-rf', outputDir
            }
            exec {
                workingDir rootDir
                def cmd = [project.file('generate.sh'), name, packageName]
                cmd.addAll(scaffoldParams)
                commandLine cmd
            }
        }

        outputs.dir rootProject.file(outputDir)
    }

    generateScaffolds.configure { dependsOn task }
}


addScaffoldTemplateTask('Python Source', 'scaffold-source-python', 'source-scaffold-source-python')
addScaffoldTemplateTask('Python HTTP API Source', 'scaffold-source-http', 'source-scaffold-source-http')
addScaffoldTemplateTask('Java JDBC Source', 'scaffold-java-jdbc', 'source-scaffold-java-jdbc')
addScaffoldTemplateTask('Python Destination', 'scaffold-destination-python', 'destination-scaffold-destination-python')
// TODO: enable Singer template testing
//addScaffoldTask('source-python-singer', ['tap-exchangeratesapi'])
