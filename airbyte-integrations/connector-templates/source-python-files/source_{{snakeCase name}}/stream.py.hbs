#
# Copyright (c) 2022 Airbyte, Inc., all rights reserved.
#


from typing import Iterator

from airbyte_cdk.sources.streams.files import FileInfo, IncrementalFilesStream
from source_{{snakeCase name}}.{{snakeCase name}}_file import {{properCase name}}File


class {{properCase name}}Stream(IncrementalFilesStream):

    @property
    def storagefile_class(self) -> type:
        return {{properCase name}}File

    def file_iterator(self) -> Iterator[FileInfo]:
        """
        TODO: Code the functionality to connect to the container/bucket and yield a FileInfo instance for every file inside
            - you can access the fields you specify in spec.py in the dict `self._provider`, such as credentials.
            - ideally you can do a 'list'-like function on the container which will return all the files with their properties.
            - you don't need to do any filtering on patterns or timestamps here, that is all handled by the parent class.
            - To build the FileInfo instances, you'll need:
                - a key for each file which should be unique. This would typically be the url / filepath.
                - the last modified timestamp on the file. You'll need to work out how to obtain this property from the provider.
                - the size of the file in bytes. If this can't be obtained, just use a value of 1, it isn't functionally required.

        :yield: FileInfo instance
        """
