#
# Copyright (c) 2022 Airbyte, Inc., all rights reserved.
#


from contextlib import contextmanager
from typing import BinaryIO, Iterator, TextIO, Union

from airbyte_cdk.sources.streams.files import StorageFile


class {{properCase name}}File(StorageFile):
    
    @contextmanager
    def open(self, binary: bool) -> Iterator[Union[TextIO, BinaryIO]]:
        """
        :param binary: whether or not to open file as binary
        :return: file-like object
        """

        # TODO: Code functionality to open a specific file from the provider container/bucket
        #    - you can access the fields you specify in spec.py in the dict `self._provider`, such as credentials.
        #    - you can access the specific file's FileInfo object using `self.file_info`.
        #    - Recommendation: utilise smart_open (https://github.com/RaRe-Technologies/smart_open) if it supports your source.
        #    - e.g. result = smart_open.open(f"s3://{bucket}/{self.url}", transport_params=params, mode=mode)


        # Leave this code here to handle yielding the open file and closing it.
        # see https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager for why we do this
        try:
            yield result
        finally:
            result.close()
